bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign();	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
2	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign();	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
3	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  &&  assign.assignNode.getLastChild().getString().equals( "prototype "));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  &&  assign.assignNode.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign  &&  assign.assignNode.getLastChild().getString().equals( "prototype "));	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
4	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( "prototype "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( "prototype "));	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
5	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.assignNode.hasPropertyAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.assignNode.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.assignNode.hasPropertyAssign;	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
6	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	82	None	replace
7	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	82	None	replace
8	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	82	None	replace
9	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	82	None	replace
10	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	82	None	replace
11	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.assign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.assign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.assign;	  hasPropertyAssign    &=    assign.assign;    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assign;	  hasPropertyAssign    &=    assign.assign;    	non-compiled	[CE]  	13	None	replace
13	[BUG]  [BUGGY]  assign.assignNode.setFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setFirstChild();	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
14	[BUG]  [BUGGY]  assign.assignNode.removeChild(var);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.removeChild(var);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.removeChild(var);	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
15	[BUG]  [BUGGY]  assign.assignNode.setPropertyAssign(null);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setPropertyAssign(null);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setPropertyAssign(null);	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
16	[BUG]  [BUGGY]  assign.assignNode.setString(null);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setString(null);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setString(null);	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
17	[BUG]  [BUGGY]  assign.assignNode.setParent(null);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setParent(null);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setParent(null);	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
18	[BUG]  [BUGGY]  assign.assignNode.setLastChild()  -  1;  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setLastChild()  -  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setLastChild()  -  1;	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
19	[BUG]  [BUGGY]  isPropertyAssign  =  false;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  false;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  false;	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
20	[BUG]  [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getString().equals( "prototype "));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getString().equals( "prototype "));	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
21	[BUG]  [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getString().equals( "property "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getString().equals( "property "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getString().equals( "property "));	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
22	[BUG]  [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
23	[BUG]  [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
24	[BUG]  [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  hasFollowing  &&  assign.assignNode.getLastChild().getString().endsWith( "__ "));	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
25	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.assignNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	61	None	replace
26	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.assignNode.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	61	None	replace
27	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  -1  :  assign.assignNode.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  -1  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  -1  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	61	None	replace
28	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  0  :  assign.assignNode.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  0  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  0  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	61	None	replace
29	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  -1  :  assign.assignNode.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  -1  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  -1  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	61	None	replace
30	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode;	  hasPropertyAssign    |=    isPropertyAssign;    	non-compiled	[CE]  	15	None	replace
31	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.isPropertyAssign;	  hasPropertyAssign    |=    isPropertyAssign;    	non-compiled	[CE]  	15	None	replace
32	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.propertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.propertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.propertyAssign;	  hasPropertyAssign    |=    isPropertyAssign;    	non-compiled	[CE]  	15	None	replace
33	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.hasPropertyAssign;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.hasPropertyAssign;	  hasPropertyAssign    |=    isPropertyAssign;    	non-compiled	[CE]  	15	None	replace
34	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	114	None	replace
35	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	114	None	replace
36	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	114	None	replace
37	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	114	None	replace
38	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	114	None	replace
39	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.NAME;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	114	None	replace
40	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.FUNCTION;    	non-compiled	[CE]  	123	None	replace
41	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.FUNCTION;    	non-compiled	[CE]  	123	None	replace
42	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.FUNCTION;    	non-compiled	[CE]  	123	None	replace
43	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.FUNCTION;    	non-compiled	[CE]  	123	None	replace
44	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.FUNCTION;    	non-compiled	[CE]  	123	None	replace
45	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.FUNCTION;    	non-compiled	[CE]  	123	None	replace
46	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.isPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.isPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	6	None	replace
47	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.getPropertyAssign();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.getPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.getPropertyAssign();	  hasPropertyAssign    =(isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	6	None	replace
48	[BUG]  [BUGGY]  hasPropertyAssign  =(hasPropertyAssign)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(hasPropertyAssign)?  null  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(hasPropertyAssign)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	6	None	replace
49	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.assignNode.getLastChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	6	None	replace
50	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	77	None	replace
51	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects  +  1;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	77	None	replace
52	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	77	None	replace
53	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.canModifyAllCallSites  &&  mayHaveSecondarySideEffects;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.canModifyAllCallSites  &&  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.canModifyAllCallSites  &&  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	77	None	replace
54	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	81	None	replace
55	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	81	None	replace
56	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	81	None	replace
57	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	81	None	replace
58	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getFirstChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getFirstChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getFirstChild());    	non-compiled	[CE]  	142	None	replace
59	[BUG]  [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getLastChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  getPropertyAssign(assign.getLastChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getFirstChild());    	non-compiled	[CE]  	142	None	replace
60	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getFirstChild());    	non-compiled	[CE]  	142	None	replace
61	[BUG]  [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getFirstChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  getPropertyAssign(assign.getFirstChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getFirstChild());    	non-compiled	[CE]  	142	None	replace
62	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.node.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.node.getFirstChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.node.getFirstChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getFirstChild());    	non-compiled	[CE]  	142	None	replace
63	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  false  :  assign.assignNode.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  false  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  false  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.hasPropertyAssign())?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	93	None	replace
64	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  false  :  assign.assignNode.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  false  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  false  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.hasPropertyAssign())?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	93	None	replace
65	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign())?  true  :  assign.assignNode.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign())?  true  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign())?  true  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.hasPropertyAssign())?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	93	None	replace
66	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.assignNode.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign())?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	57	None	replace
67	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.assignNode.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.getPropertyAssign())?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	57	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(compiler));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(compiler));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(compiler));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer(compiler));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer(compiler));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer(compiler));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer(compiler));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer(compiler));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer(compiler));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assign,  new  CallSiteOptimizer(compiler));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  assign,  new  CallSiteOptimizer(compiler));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  assign,  new  CallSiteOptimizer(compiler));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(assign));  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(assign));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(assign));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assigned,  new  CallSiteOptimizer(compiler));  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assigned,  new  CallSiteOptimizer(compiler));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assigned,  new  CallSiteOptimizer(compiler));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign.assign));  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign.assign));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign.assign));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
75	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  assign.mayHaveSecondarySideEffects;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  assign.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	75	None	replace
76	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects  +  1;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	75	None	replace
77	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	75	None	replace
78	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	75	None	replace
79	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects,  hasFollowing;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects,  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects,  hasFollowing;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	75	None	replace
80	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isUnknownAssign)?  null  :  assign.assignNode.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.isUnknownAssign)?  null  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isUnknownAssign)?  null  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isUnknownAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	98	None	replace
81	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.removeFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.removeFirstChild();    	non-compiled	[CE]  	133	None	replace
82	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.assignNode.removeLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.assignNode.removeLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.assignNode.removeLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.removeFirstChild();    	non-compiled	[CE]  	133	None	replace
83	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.removeLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.removeLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.removeLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.removeFirstChild();    	non-compiled	[CE]  	133	None	replace
84	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	49	None	replace
85	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	49	None	replace
86	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	49	None	replace
87	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	49	None	replace
88	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	49	None	replace
89	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()!=  Token.VAR;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()!=  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()!=  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	49	None	replace
90	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.getLastChild());  current--;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.getLastChild());  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.getLastChild());  current--;	  NodeUtil.removeChild(assign.assignNode.getFirstChild());    current--;    	non-compiled	[CE]  	91	None	replace
91	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.getFirstChild());  current--;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.getFirstChild());  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.getFirstChild());  current--;	  NodeUtil.removeChild(assign.assignNode.getFirstChild());    current--;    	non-compiled	[CE]  	91	None	replace
92	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getLastChild());  current--;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode.getLastChild());  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getLastChild());  current--;	  NodeUtil.removeChild(assign.assignNode.getFirstChild());    current--;    	non-compiled	[CE]  	91	None	replace
93	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.getPropertyAssign());  current--;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.getPropertyAssign());  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.getPropertyAssign());  current--;	  NodeUtil.removeChild(assign.assignNode.getFirstChild());    current--;    	non-compiled	[CE]  	91	None	replace
94	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.getLastChild());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.getLastChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.getLastChild());	  NodeUtil.removeChild(assign.assignNode.getFirstChild());    current--;    	non-compiled	[CE]  	91	None	replace
95	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.getFirstChild());  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.getFirstChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.getFirstChild());	  NodeUtil.removeChild(assign.assignNode.getFirstChild());    current--;    	non-compiled	[CE]  	91	None	replace
96	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( ".prototype "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( ".prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( ".prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   ".prototype   "));    	non-compiled	[CE]  	119	None	replace
97	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isUnknownAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isUnknownAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isUnknownAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isUnknownAssign;    	non-compiled	[CE]  	111	None	replace
98	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.hasUnknownAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.hasUnknownAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.hasUnknownAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isUnknownAssign;    	non-compiled	[CE]  	111	None	replace
99	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.isUnknownAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.isUnknownAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.isUnknownAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isUnknownAssign;    	non-compiled	[CE]  	111	None	replace
100	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.removeLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.removeLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.removeLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.removeFirstChild();    	non-compiled	[CE]  	96	None	replace
101	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.removeFirstChild();    	non-compiled	[CE]  	96	None	replace
102	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.removeFirstChild();    	non-compiled	[CE]  	96	None	replace
103	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.removeFirstChild();    	non-compiled	[CE]  	96	None	replace
104	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.removeFirstChild();    	non-compiled	[CE]  	96	None	replace
105	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.nextChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.nextChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.nextChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.removeFirstChild();    	non-compiled	[CE]  	96	None	replace
106	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString();	  hasPropertyAssign    &=    assign.assignNode;    	non-compiled	[CE]  	11	None	replace
107	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getParent();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getParent();	  hasPropertyAssign    &=    assign.assignNode;    	non-compiled	[CE]  	11	None	replace
108	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild())  }  ;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild())  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild())  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
109	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getFirstChild())  }  ;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getFirstChild())  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getFirstChild())  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
110	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild())  }  ;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild())  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild())  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
111	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild()),  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild()),  isPropertyAssign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild()),  isPropertyAssign);	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
112	[BUG]  [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getFirstChild())  }  ;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getFirstChild())  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  getPropertyAssign(assign.getFirstChild())  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
113	[BUG]  [BUGGY]  hasPropertyAssign  &=  isPropertyAssign(assign.getLastChild())  }  ;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  isPropertyAssign(assign.getLastChild())  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  isPropertyAssign(assign.getLastChild())  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
114	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode  +  1;	  hasPropertyAssign    &=    assign.isPropertyAssign    +    1;    	non-compiled	[CE]  	121	None	replace
115	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  +  2;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  +  2;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isPropertyAssign  +  2;	  hasPropertyAssign    &=    assign.isPropertyAssign    +    1;    	non-compiled	[CE]  	121	None	replace
116	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getPropertyAssign()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getPropertyAssign()  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getPropertyAssign()  +  1;	  hasPropertyAssign    &=    assign.isPropertyAssign    +    1;    	non-compiled	[CE]  	121	None	replace
117	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign()  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasPropertyAssign()  +  1;	  hasPropertyAssign    &=    assign.isPropertyAssign    +    1;    	non-compiled	[CE]  	121	None	replace
118	[BUG]  [BUGGY]  hasPropertyAssign  +=  assign.isPropertyAssign  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  +=  assign.isPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  +=  assign.isPropertyAssign  +  1;	  hasPropertyAssign    &=    assign.isPropertyAssign    +    1;    	non-compiled	[CE]  	121	None	replace
119	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  hasPropertyAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    hasPropertyAssign;    	non-compiled	[CE]  	124	None	replace
120	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  hasFollowing;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  hasFollowing;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    hasPropertyAssign;    	non-compiled	[CE]  	124	None	replace
121	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  hasPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    hasPropertyAssign;    	non-compiled	[CE]  	124	None	replace
122	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  hasPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    hasPropertyAssign;    	non-compiled	[CE]  	124	None	replace
123	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assignedToUnknownValue;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assignedToUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assignedToUnknownValue;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    hasPropertyAssign;    	non-compiled	[CE]  	124	None	replace
124	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasOwnPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasOwnPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.hasOwnPropertyAssign;	  hasPropertyAssign    &=    assign.hasOwnPropertyAssign;    	non-compiled	[CE]  	117	None	replace
125	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasOwnPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasOwnPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasOwnPropertyAssign;	  hasPropertyAssign    &=    assign.hasOwnPropertyAssign;    	non-compiled	[CE]  	117	None	replace
126	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  hasFollowing;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  hasFollowing;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasFollowing;    	non-compiled	[CE]  	50	None	replace
127	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  hasFollowing;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  hasFollowing;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasFollowing;    	non-compiled	[CE]  	50	None	replace
128	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasFollowing;    	non-compiled	[CE]  	50	None	replace
129	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  hasFollowing;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  hasFollowing;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasFollowing;    	non-compiled	[CE]  	50	None	replace
130	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasFollowing;    	non-compiled	[CE]  	50	None	replace
131	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.propertyAssign;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.propertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.propertyAssign;	  hasPropertyAssign    &=    assign.propertyAssign;    	non-compiled	[CE]  	146	None	replace
132	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.propertyAssign  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.propertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.propertyAssign  +  1;	  hasPropertyAssign    &=    assign.propertyAssign;    	non-compiled	[CE]  	146	None	replace
133	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.assignNode.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	43	None	replace
134	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.assignNode.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	43	None	replace
135	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isUnknownValue;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isUnknownValue;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isUnknownValue;    	non-compiled	[CE]  	72	None	replace
136	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.isUnknownValue;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.isUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.isUnknownValue;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isUnknownValue;    	non-compiled	[CE]  	72	None	replace
137	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  true  :  assign.isPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  true  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  true  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isUnknownAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	110	None	replace
138	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.hasPropertyAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isUnknownAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	110	None	replace
139	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  true  :  assign.isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  true  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown)?  true  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isUnknown)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	112	None	replace
140	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isFalse;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isFalse;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isFalse;	  hasPropertyAssign    =(assign.isUnknown)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	112	None	replace
141	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign.hasPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isUnknown)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	112	None	replace
142	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	84	None	replace
143	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	84	None	replace
144	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	84	None	replace
145	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	84	None	replace
146	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	84	None	replace
147	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	84	None	replace
148	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()!=  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()!=  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()!=  null;	  hasPropertyAssign    &=    assign.assignNode.getLastChild()!=    null;    	non-compiled	[CE]  	62	None	replace
149	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  null;	  hasPropertyAssign    &=    assign.assignNode.getLastChild()!=    null;    	non-compiled	[CE]  	62	None	replace
150	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild()  >>  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild()  >>  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild()  >>  null;	  hasPropertyAssign    &=    assign.assignNode.getLastChild()!=    null;    	non-compiled	[CE]  	62	None	replace
151	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	103	None	replace
152	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	103	None	replace
153	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	103	None	replace
154	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()!=  Token.NAME;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()!=  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()!=  Token.NAME;	  hasPropertyAssign    &=    assign.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	103	None	replace
155	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	103	None	replace
156	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  false  :  assign.assignNode.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  false  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isPropertyAssign)?  false  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	41	None	replace
157	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	32	None	replace
158	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	32	None	replace
159	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	32	None	replace
160	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	32	None	replace
161	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	32	None	replace
162	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	32	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(compiler));  current--;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(compiler));  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(compiler));  current--;	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    current--;    	non-compiled	[CE]  	131	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer(compiler));  current--;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer(compiler));  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer(compiler));  current--;	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    current--;    	non-compiled	[CE]  	131	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer(compiler));  current--;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer(compiler));  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer(compiler));  current--;	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    current--;    	non-compiled	[CE]  	131	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign.assign));  current--;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign.assign));  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign.assign));  current--;	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    current--;    	non-compiled	[CE]  	131	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  CallSiteOptimizer(compiler));  current--;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  CallSiteOptimizer(compiler));  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  node,  new  CallSiteOptimizer(compiler));  current--;	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    current--;    	non-compiled	[CE]  	131	None	replace
168	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.assignedToUnknownValue;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.assignedToUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.assignedToUnknownValue;	  hasPropertyAssign    &=    assign.assignedToUnknownValue;    	non-compiled	[CE]  	107	None	replace
169	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignedToUnknownValue;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignedToUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignedToUnknownValue;	  hasPropertyAssign    &=    assign.assignedToUnknownValue;    	non-compiled	[CE]  	107	None	replace
170	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild(),  true);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild(),  true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild(),  true);	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild());    	non-compiled	[CE]  	140	None	replace
171	[BUG]  [BUGGY]  hasPropertyAssign  |=  getPropertyAssign(assign.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  getPropertyAssign(assign.getLastChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  getPropertyAssign(assign.getLastChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild());    	non-compiled	[CE]  	140	None	replace
172	[BUG]  [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "prototype "));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "prototype "));	  HasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	39	None	replace
173	[BUG]  [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "prototype "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "prototype "));	  HasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	39	None	replace
174	[BUG]  [BUGGY]  HasPropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype "));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype "));	  HasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	39	None	replace
175	[BUG]  [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property "));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property "));	  HasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	39	None	replace
176	[BUG]  [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( ".prototype "));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( ".prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( ".prototype "));	  HasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	39	None	replace
177	[BUG]  [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype "));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype "));	  HasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	39	None	replace
178	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  hasPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasPropertyAssign;    	non-compiled	[CE]  	137	None	replace
179	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assignedToUnknownValue;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assignedToUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assignedToUnknownValue;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasPropertyAssign;    	non-compiled	[CE]  	137	None	replace
180	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasPropertyAssign;    	non-compiled	[CE]  	137	None	replace
181	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasPropertyAssign;    	non-compiled	[CE]  	137	None	replace
182	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
183	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.BLOCK;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
184	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
185	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
186	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.CALL;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
187	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
188	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImmediateParentNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImmediateParentNode();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImmediateParentNode();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign();    	non-compiled	[CE]  	3	None	replace
189	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImplicitPropertyAssign();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImplicitPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImplicitPropertyAssign();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign();    	non-compiled	[CE]  	3	None	replace
190	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImmediateParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImmediateParent();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImmediateParent();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign();    	non-compiled	[CE]  	3	None	replace
191	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getReferencedValue();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getReferencedValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getReferencedValue();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign();    	non-compiled	[CE]  	3	None	replace
192	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "property "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "property "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "property "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "property   "));    	non-compiled	[CE]  	38	None	replace
193	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "property "));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "property "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "property "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "property   "));    	non-compiled	[CE]  	38	None	replace
194	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().equals( "property "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().equals( "property "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString().equals( "property "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "property   "));    	non-compiled	[CE]  	38	None	replace
195	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString();	  hasPropertyAssign    &=    assign.assignNode.getLastChild()    ==    null;    	non-compiled	[CE]  	64	None	replace
196	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString()  ==  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString()  ==  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString()  ==  null;	  hasPropertyAssign    &=    assign.assignNode.getLastChild()    ==    null;    	non-compiled	[CE]  	64	None	replace
197	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.isPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
198	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.getPropertyAssign();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.getPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.getPropertyAssign();	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
199	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasFollowing;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasFollowing;	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
200	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  true  :  assign.hasPropertyAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  true  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  true  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
201	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  -1  :  assign.hasPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  -1  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  -1  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
202	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	150	None	replace
203	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	150	None	replace
204	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	150	None	replace
205	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  false  :  assign.assignNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  false  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isPropertyAssign)?  false  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	10	None	replace
206	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
207	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  isPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
208	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
209	[BUG]  [BUGGY]  hasPropertyAssign  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
210	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  isPropertyAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
211	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
212	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild().getString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild().getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild().getString();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString();    	non-compiled	[CE]  	125	None	replace
213	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString();    	non-compiled	[CE]  	125	None	replace
214	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getValue();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString();    	non-compiled	[CE]  	125	None	replace
215	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getNext();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getNext();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString();    	non-compiled	[CE]  	125	None	replace
216	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString();    	non-compiled	[CE]  	125	None	replace
217	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    isPropertyAssign;    	non-compiled	[CE]  	78	None	replace
218	[BUG]  [BUGGY]  hasPropertyAssign  ||  assign.mayHaveSecondarySideEffects;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  ||  assign.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  ||  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    isPropertyAssign;    	non-compiled	[CE]  	78	None	replace
219	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  isPropertyAssign;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    isPropertyAssign;    	non-compiled	[CE]  	78	None	replace
220	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  isFollowing;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  isFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  isFollowing;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    isPropertyAssign;    	non-compiled	[CE]  	78	None	replace
221	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.assignNode.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.assignNode.getFirstChild();	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
222	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild(),  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild(),  true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild(),  true);	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
223	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getLastChild();	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
224	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assign.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assign.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assign.getFirstChild();	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
225	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.assignNode.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.assignNode.getLastChild();	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
226	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  ||  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasPropertyAssign  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.hasPropertyAssign    &&    isPropertyAssign;    	non-compiled	[CE]  	135	None	replace
227	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode  &&  isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.hasPropertyAssign    &&    isPropertyAssign;    	non-compiled	[CE]  	135	None	replace
228	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  ||  isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isPropertyAssign  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.hasPropertyAssign    &&    isPropertyAssign;    	non-compiled	[CE]  	135	None	replace
229	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  &&  mayHaveSecondarySideEffects;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  &&  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasPropertyAssign  &&  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.hasPropertyAssign    &&    isPropertyAssign;    	non-compiled	[CE]  	135	None	replace
230	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.removeLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.removeLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.removeLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.removeFirstChild();    	non-compiled	[CE]  	97	None	replace
231	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.removeFirstChild();    	non-compiled	[CE]  	97	None	replace
232	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.removeFirstChild();    	non-compiled	[CE]  	97	None	replace
233	[BUG]  [BUGGY]  assign  =  assign.assignNode.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.assignNode.getNext();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assignNode.getNext();	  assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	25	None	replace
234	[BUG]  [BUGGY]  assign  =  assign.node.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.node.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.node.getFirstChild();	  assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	25	None	replace
235	[BUG]  [BUGGY]  assign  =  assign.getLastChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.getLastChild();	  assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	25	None	replace
236	[BUG]  [BUGGY]  assign  =  assign.assignNode.getParent();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.assignNode.getParent();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assignNode.getParent();	  assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	25	None	replace
237	[BUG]  [BUGGY]  assign  =  assign.assignParent.getFirstChild();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.assignParent.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assignParent.getFirstChild();	  assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	25	None	replace
238	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  null  :  assign.assignNode.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  null  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  null  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.hasPropertyAssign())?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	100	None	replace
239	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign())?  null  :  assign.assignNode.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign())?  null  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign())?  null  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.hasPropertyAssign())?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	100	None	replace
240	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  null  :  assign.assignNode.getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  null  :  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  null  :  assign.assignNode.getString();	  hasPropertyAssign    =(assign.hasPropertyAssign())?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	100	None	replace
241	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.getString();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.getString();	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
242	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  -1  :  assign.assignNode.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  -1  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  -1  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
243	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getFirstChild().getType()  ==  Token.NAME)?  null  :  assign.assignNode.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getFirstChild().getType()  ==  Token.NAME)?  null  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getFirstChild().getType()  ==  Token.NAME)?  null  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
244	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasFollowing)?  null  :  assign.hasFollowing;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasFollowing)?  null  :  assign.hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasFollowing)?  null  :  assign.hasFollowing;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasFollowing;    	non-compiled	[CE]  	4	None	replace
245	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.hasFollowing;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.hasFollowing;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasFollowing;    	non-compiled	[CE]  	4	None	replace
246	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.hasFollowing;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.hasFollowing;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasFollowing;    	non-compiled	[CE]  	4	None	replace
247	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.hasFollowing  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.hasFollowing  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.hasFollowing  +  1;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasFollowing;    	non-compiled	[CE]  	4	None	replace
248	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.hasFollowing;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.hasFollowing;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasFollowing;    	non-compiled	[CE]  	4	None	replace
249	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().toLowerCase().equals( "prototype "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().toLowerCase().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().toLowerCase().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().toLowerCase().equals(   "prototype   "));    	non-compiled	[CE]  	36	None	replace
250	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().toLowerCase().equals( "prototype "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().toLowerCase().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString().toLowerCase().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().toLowerCase().equals(   "prototype   "));    	non-compiled	[CE]  	36	None	replace
251	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().contains( "prototype "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().contains( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().contains( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().toLowerCase().equals(   "prototype   "));    	non-compiled	[CE]  	36	None	replace
252	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( ".prototype "));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( ".prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( ".prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().toLowerCase().equals(   "prototype   "));    	non-compiled	[CE]  	36	None	replace
253	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toUpperCase().equals( "prototype "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toUpperCase().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toUpperCase().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().toLowerCase().equals(   "prototype   "));    	non-compiled	[CE]  	36	None	replace
254	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getLocalName();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getLocalName();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getLocalName();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getString();    	non-compiled	[CE]  	8	None	replace
255	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getType();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getType();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getString();    	non-compiled	[CE]  	8	None	replace
256	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getLocalPart();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getLocalPart();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getLocalPart();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getString();    	non-compiled	[CE]  	8	None	replace
257	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  true  :  assign.isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  true  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  true  :  assign.isPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	70	None	replace
258	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.hasPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	70	None	replace
259	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getLastChild().getString().equals( "prototype "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getLastChild().getString().equals( "prototype "));	  hasPropertyAssign    &=    assign.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	37	None	replace
260	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().contains( "prototype "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().contains( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString().contains( "prototype "));	  hasPropertyAssign    &=    assign.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	37	None	replace
261	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  true  :  assign.isPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  true  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown())?  true  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isUnknown())?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	144	None	replace
262	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign)?  false  :  assign.isPropertyAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign)?  false  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign)?  false  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isUnknown())?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	144	None	replace
263	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isFalse;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isFalse;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isFalse;	  hasPropertyAssign    =(assign.isUnknown())?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	144	None	replace
264	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign);	  hasPropertyAssign    =(assign.isUnknown())?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	144	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  current);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  current);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  current);	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  callSiteOptimizer);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  callSiteOptimizer);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  callSiteOptimizer);	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  callSiteOptimizer);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  callSiteOptimizer);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  callSiteOptimizer);	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  parent);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  parent);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  parent);	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  isPropertyAssign);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  isPropertyAssign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  isPropertyAssign);	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  this);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  this);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  this);	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
271	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
272	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
273	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
274	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
275	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  false  :  assign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
276	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
277	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	54	None	replace
278	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	54	None	replace
279	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	54	None	replace
280	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	54	None	replace
281	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	54	None	replace
282	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.hasPropertyAssign;    	non-compiled	[CE]  	16	None	replace
283	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.EXPR_RESULT;	  hasPropertyAssign    &=    assign.assignNode.hasPropertyAssign;    	non-compiled	[CE]  	16	None	replace
284	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.VAR;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.hasPropertyAssign;    	non-compiled	[CE]  	16	None	replace
285	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.NAME;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.hasPropertyAssign;    	non-compiled	[CE]  	16	None	replace
286	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.FUNCTION;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	45	None	replace
287	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	45	None	replace
288	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	45	None	replace
289	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.BLOCK;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	80	None	replace
290	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.BLOCK;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	80	None	replace
291	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  assign.assignNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(parent,  assign.assignNode);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(parent,  assign.assignNode);	  NodeUtil.removeChild(assign.assignNode);    	non-compiled	[CE]  	87	None	replace
292	[BUG]  [BUGGY]  NodeUtil.removeChild(assign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign);	  NodeUtil.removeChild(assign.assignNode);    	non-compiled	[CE]  	87	None	replace
293	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.getPropertyAssign());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.getPropertyAssign());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.getPropertyAssign());	  NodeUtil.removeChild(assign.assignNode);    	non-compiled	[CE]  	87	None	replace
294	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode,  current);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode,  current);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode,  current);	  NodeUtil.removeChild(assign.assignNode);    	non-compiled	[CE]  	87	None	replace
295	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasHaveSecondarySideEffects;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.hasHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
296	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasFollowing;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasFollowing;	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
297	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasHaveSecondarySideEffects;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
298	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasSecondarySideEffects;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasSecondarySideEffects;	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
299	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    =    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	79	None	replace
300	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.assignNode.mayHaveSecondarySideEffects;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.assignNode.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.assignNode.mayHaveSecondarySideEffects;	  hasPropertyAssign    =    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	79	None	replace
301	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  &&  isPropertyAssign;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  &&  isPropertyAssign;	  hasPropertyAssign    =    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	79	None	replace
302	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;	  hasPropertyAssign    =    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	79	None	replace
303	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  ||  isPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  ||  isPropertyAssign;	  hasPropertyAssign    =    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	79	None	replace
304	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.mayHaveSecondarySideEffects  +  1;	  hasPropertyAssign    =    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	79	None	replace
305	[BUG]  [BUGGY]  var  =  assign.assignNode.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  var  =  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assignNode.getLastChild();	  var    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	88	None	replace
306	[BUG]  [BUGGY]  var  =  assign.assign.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  var  =  assign.assign.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assign.getLastChild();	  var    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	88	None	replace
307	[BUG]  [BUGGY]  var  =  assign.assignParent.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  var  =  assign.assignParent.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assignParent.getFirstChild();	  var    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	88	None	replace
308	[BUG]  [BUGGY]  var  =  assign.assignNode.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  var  =  assign.assignNode.getNext();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assignNode.getNext();	  var    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	88	None	replace
309	[BUG]  [BUGGY]  var  =  assign.assignNode.getString();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  var  =  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assignNode.getString();	  var    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	88	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  this);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  this);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  this);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	129	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  this,  assign);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	129	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assign);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  assign);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	129	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignment);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignment);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  assignment);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	129	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  this);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  this);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assignment,  this);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	129	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  current);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  current);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  this,  current);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	129	None	replace
316	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESUL  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESUL  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESUL	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	48	None	replace
317	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RES  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RES  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RES	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	48	None	replace
318	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	48	None	replace
319	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	48	None	replace
320	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	48	None	replace
321	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESUL  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESUL  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESUL	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	48	None	replace
322	[BUG]  [BUGGY]  assign.assignNode.getFirstChild(),  true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.getFirstChild(),  true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.getFirstChild(),  true);	  assign.assignNode.getLastChild(),    true);    	non-compiled	[CE]  	23	None	replace
323	[BUG]  [BUGGY]  assign.assignNode.getLastChild(),  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.getLastChild(),  false);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.getLastChild(),  false);	  assign.assignNode.getLastChild(),    true);    	non-compiled	[CE]  	23	None	replace
324	[BUG]  [BUGGY]  assign.assignNode.removeFirstChild(),  true);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.removeFirstChild(),  true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.removeFirstChild(),  true);	  assign.assignNode.getLastChild(),    true);    	non-compiled	[CE]  	23	None	replace
325	[BUG]  [BUGGY]  assign.assignNode.removeLastChild(),  true);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.removeLastChild(),  true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.removeLastChild(),  true);	  assign.assignNode.getLastChild(),    true);    	non-compiled	[CE]  	23	None	replace
326	[BUG]  [BUGGY]  assign.assignNode.setLastChild(),  false);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setLastChild(),  false);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setLastChild(),  false);	  assign.assignNode.getLastChild(),    true);    	non-compiled	[CE]  	23	None	replace
327	[BUG]  [BUGGY]  assign.assignNode.setLastChild(),  true);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setLastChild(),  true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setLastChild(),  true);	  assign.assignNode.getLastChild(),    true);    	non-compiled	[CE]  	23	None	replace
328	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.getPropertyAssign())?  true  :  assign.assignNode.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.getPropertyAssign())?  true  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.getPropertyAssign())?  true  :  assign.assignNode.getLastChild();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	44	None	replace
329	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.getPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.getPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.getPropertyAssign())?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	44	None	replace
330	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.getString();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	44	None	replace
331	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.getPropertyAssign();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.getPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.getPropertyAssign();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
332	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())||  false  :  assign.getPropertyAssign();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())||  false  :  assign.getPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())||  false  :  assign.getPropertyAssign();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
333	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getValue();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
334	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getImmediateParentNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getImmediateParentNode();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getImmediateParentNode();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
335	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getReferencedValue();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getReferencedValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getReferencedValue();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
336	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	85	None	replace
337	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	85	None	replace
338	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	85	None	replace
339	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	85	None	replace
340	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	85	None	replace
341	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	85	None	replace
342	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getLastChild()!=  null)?  null  :  assign.assignNode.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getLastChild()!=  null)?  null  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getLastChild()!=  null)?  null  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	60	None	replace
343	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  0  :  assign.assignNode.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  0  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  0  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	9	None	replace
344	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().equals( "prototype "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	35	None	replace
345	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().toLowerCase().equals( "prototype "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().toLowerCase().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString().toLowerCase().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	35	None	replace
346	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects  +  1;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	104	None	replace
347	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	104	None	replace
348	[BUG]  [BUGGY]  hasPropertyAssign  ||  mayHaveSecondarySideEffects;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  ||  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  ||  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	104	None	replace
349	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.isPropertyAssign();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.isPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.isPropertyAssign();	  hasPropertyAssign    &=    assign.isPropertyAssign();    	non-compiled	[CE]  	147	None	replace
350	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasPropertyAssign();	  hasPropertyAssign    &=    assign.isPropertyAssign();    	non-compiled	[CE]  	147	None	replace
351	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	56	None	replace
352	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	56	None	replace
353	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	56	None	replace
354	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	56	None	replace
355	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.getPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.getPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.getPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign;    	non-compiled	[CE]  	95	None	replace
356	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImplicitPropertyAssign;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImplicitPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImplicitPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign;    	non-compiled	[CE]  	95	None	replace
357	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getPropertyAssignNode;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getPropertyAssignNode;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getPropertyAssignNode;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign;    	non-compiled	[CE]  	95	None	replace
358	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.FUNCTION;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    >>    Token.FUNCTION;    	non-compiled	[CE]  	122	None	replace
359	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    >>    Token.FUNCTION;    	non-compiled	[CE]  	122	None	replace
360	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    >>    Token.FUNCTION;    	non-compiled	[CE]  	122	None	replace
361	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFunctionAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFunctionAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFunctionAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.isPropertyAssign;    	non-compiled	[CE]  	68	None	replace
362	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFollowing;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFollowing;	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.isPropertyAssign;    	non-compiled	[CE]  	68	None	replace
363	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isPropertyAssign  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isPropertyAssign  +  1;	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.isPropertyAssign;    	non-compiled	[CE]  	68	None	replace
364	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isPropertyAssignNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isPropertyAssignNode;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isPropertyAssignNode;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssignNode;    	non-compiled	[CE]  	73	None	replace
365	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getPropertyAssignNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getPropertyAssignNode();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getPropertyAssignNode();	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssignNode;    	non-compiled	[CE]  	73	None	replace
366	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.isPropertyAssignNode;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.isPropertyAssignNode;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.isPropertyAssignNode;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssignNode;    	non-compiled	[CE]  	73	None	replace
367	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ==  null  ||  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ==  null  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ==  null  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild()    ==    null;    	non-compiled	[CE]  	63	None	replace
368	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	19	None	replace
369	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild()  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	19	None	replace
370	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getValue();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getValue();    	non-compiled	[CE]  	139	None	replace
371	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.getValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.getValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.getValue();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getValue();    	non-compiled	[CE]  	139	None	replace
372	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getParent();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getParent();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getValue();    	non-compiled	[CE]  	139	None	replace
373	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.getValue();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.getValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.getValue();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getValue();    	non-compiled	[CE]  	139	None	replace
374	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getShortValue();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getShortValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getShortValue();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getValue();    	non-compiled	[CE]  	139	None	replace
375	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign())?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.hasPropertyAssign())?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	134	None	replace
376	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasFollowing;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasFollowing;	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	138	None	replace
377	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.hasPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	138	None	replace
378	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  -1  :  assign.hasPropertyAssign;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  -1  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  -1  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	138	None	replace
379	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.isPropertyAssign;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	138	None	replace
380	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasPropertyAssign  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasPropertyAssign  +  1;	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	138	None	replace
381	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    +    1;    	non-compiled	[CE]  	101	None	replace
382	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  -  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  -  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  -  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    +    1;    	non-compiled	[CE]  	101	None	replace
383	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    +    1;    	non-compiled	[CE]  	101	None	replace
384	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    +    1;    	non-compiled	[CE]  	101	None	replace
385	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  2;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  2;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  2;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    +    1;    	non-compiled	[CE]  	101	None	replace
386	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  +  2;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  +  2;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasPropertyAssign  +  2;	  hasPropertyAssign    &=    assign.hasPropertyAssign    +    1;    	non-compiled	[CE]  	116	None	replace
387	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFalse;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFalse;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFalse;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isFalse;    	non-compiled	[CE]  	69	None	replace
388	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknown;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknown;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknown;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isFalse;    	non-compiled	[CE]  	69	None	replace
389	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isVoid;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isVoid;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isVoid;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isFalse;    	non-compiled	[CE]  	69	None	replace
390	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isTrue;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isTrue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isTrue;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isFalse;    	non-compiled	[CE]  	69	None	replace
391	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isVarArgs;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isVarArgs;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isVarArgs;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isFalse;    	non-compiled	[CE]  	69	None	replace
392	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.assignNode.isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.assignNode.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.assignNode.isPropertyAssign;	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
393	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( "prototype "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( "prototype "));	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
394	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( " "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( " "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( " "));	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
395	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
396	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
397	[BUG]  [BUGGY]  assign  =  assign.node.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.node.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.node.getLastChild();	  assign    =    assign.assignNode.getLastChild();    	non-compiled	[CE]  	21	None	replace
398	[BUG]  [BUGGY]  assign  =  assign.assignParent.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.assignParent.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assignParent.getLastChild();	  assign    =    assign.assignNode.getLastChild();    	non-compiled	[CE]  	21	None	replace
399	[BUG]  [BUGGY]  assign  =  assign.assign.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.assign.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assign.getFirstChild();	  assign    =    assign.assignNode.getLastChild();    	non-compiled	[CE]  	21	None	replace
400	[BUG]  [BUGGY]  assign  =  assign.assign.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.assign.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assign.getLastChild();	  assign    =    assign.assignNode.getLastChild();    	non-compiled	[CE]  	21	None	replace
401	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	55	None	replace
402	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	55	None	replace
403	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	55	None	replace
404	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	55	None	replace
405	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	55	None	replace
406	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	55	None	replace
407	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	34	None	replace
408	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	34	None	replace
409	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	34	None	replace
410	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	34	None	replace
411	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()!=  Token.VAR;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()!=  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()!=  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	34	None	replace
412	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.getString();	  hasPropertyAssign    =(assign.getPropertyAssign())?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	42	None	replace
413	[BUG]  [BUGGY]  havePropertyAssign  =  false;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  =  false;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  =  false;	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
414	[BUG]  [BUGGY]  vePropertyAssign  =  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  vePropertyAssign  =  false;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	vePropertyAssign  =  false;	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
415	[BUG]  [BUGGY]  havePropertyAssign  =  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  =  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  =  null;	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
416	[BUG]  [BUGGY]  HavePropertyAssign  =  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HavePropertyAssign  =  false;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HavePropertyAssign  =  false;	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
417	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.getLastChild(),  assign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.getLastChild(),  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.getLastChild(),  assign);	  NodeUtil.removeChild(assign.assignNode.getLastChild());    	non-compiled	[CE]  	90	None	replace
418	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getLastChild(),  assign);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode.getLastChild(),  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getLastChild(),  assign);	  NodeUtil.removeChild(assign.assignNode.getLastChild());    	non-compiled	[CE]  	90	None	replace
419	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getString());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode.getString());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getString());	  NodeUtil.removeChild(assign.assignNode.getLastChild());    	non-compiled	[CE]  	90	None	replace
420	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assign);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assign);	  NodeUtil.removeChild(assign.assignNode.getLastChild());    	non-compiled	[CE]  	90	None	replace
421	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isFunctionAssign)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isFunctionAssign)?  null  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isFunctionAssign)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isUnknownAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	94	None	replace
422	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    hasPropertyAssign;    	non-compiled	[CE]  	148	None	replace
423	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  hasPropertyAssign;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    hasPropertyAssign;    	non-compiled	[CE]  	148	None	replace
424	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  hasFollowing;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  hasFollowing;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    hasPropertyAssign;    	non-compiled	[CE]  	148	None	replace
425	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    hasPropertyAssign;    	non-compiled	[CE]  	148	None	replace
426	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    hasPropertyAssign;    	non-compiled	[CE]  	148	None	replace
427	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  isPropertyAssign;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    hasPropertyAssign;    	non-compiled	[CE]  	148	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  current);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  current);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  current);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  current,  var);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  current,  var);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  current,  var);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  assign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  current,  assign);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  assignedToUnknownValue);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  null);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  current,  null);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  true);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  current,  true);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
434	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.VAR;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    >>    Token.VAR;    	non-compiled	[CE]  	105	None	replace
435	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    >>    Token.VAR;    	non-compiled	[CE]  	105	None	replace
436	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.VAR;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    >>    Token.VAR;    	non-compiled	[CE]  	105	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  this);  current--;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  this);  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  this);  current--;	  NodeTraversal.traverse(compiler,    var,    this);    current--;    	non-compiled	[CE]  	127	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  null);  current--;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  null);  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  null);  current--;	  NodeTraversal.traverse(compiler,    var,    this);    current--;    	non-compiled	[CE]  	127	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  this);  current--;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  this);  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assignment,  this);  current--;	  NodeTraversal.traverse(compiler,    var,    this);    current--;    	non-compiled	[CE]  	127	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  current,  this);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  current,  this);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  current,  this);	  NodeTraversal.traverse(compiler,    var,    this);    current--;    	non-compiled	[CE]  	127	None	replace
441	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  +  1;	  hasPropertyAssign    &=    assign.assignNode.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	74	None	replace
442	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  assign.assignNode.mayHaveSecondarySideEffects;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  assign.assignNode.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects  ||  assign.assignNode.mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.assignNode.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	74	None	replace
443	[BUG]  [BUGGY]  assign.assignNode.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.removeFirstChild();	  assign.assignNode.removeLastChild();    	non-compiled	[CE]  	24	None	replace
444	[BUG]  [BUGGY]  assign.assignNode.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.getLastChild();	  assign.assignNode.removeLastChild();    	non-compiled	[CE]  	24	None	replace
445	[BUG]  [BUGGY]  assign.assignNode.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.getFirstChild();	  assign.assignNode.removeLastChild();    	non-compiled	[CE]  	24	None	replace
446	[BUG]  [BUGGY]  assign.assignNode.clear();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.clear();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.clear();	  assign.assignNode.removeLastChild();    	non-compiled	[CE]  	24	None	replace
447	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.getFirstChild(),  assign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.getFirstChild(),  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.getFirstChild(),  assign);	  NodeUtil.removeChild(assign.assignNode.getFirstChild());    	non-compiled	[CE]  	86	None	replace
448	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.VAR;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	29	None	replace
449	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	29	None	replace
450	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	29	None	replace
451	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isUnknownValue;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isUnknownValue;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
452	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isFunctionAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isFunctionAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isFunctionAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
453	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isFollowing;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isFollowing;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
454	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isReferencedValue;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isReferencedValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isReferencedValue;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
455	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    isPropertyAssign;    	non-compiled	[CE]  	53	None	replace
456	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isFunctionAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isFunctionAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isFunctionAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    isPropertyAssign;    	non-compiled	[CE]  	53	None	replace
457	[BUG]  [BUGGY]  hasPropertyAssign  ||  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  ||  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  ||  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    isPropertyAssign;    	non-compiled	[CE]  	53	None	replace
458	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild()  >=  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild()  >=  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild()  >=  null;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild()    >=    null;    	non-compiled	[CE]  	65	None	replace
459	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().endsWith( "prototype "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().endsWith( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().endsWith( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().endsWith(   "prototype   "));    	non-compiled	[CE]  	136	None	replace
460	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().endsWith( "prototype "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().endsWith( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().endsWith( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().endsWith(   "prototype   "));    	non-compiled	[CE]  	136	None	replace
461	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().endsWith( "prototype "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().endsWith( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().endsWith( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().endsWith(   "prototype   "));    	non-compiled	[CE]  	136	None	replace
462	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().endsWith( "prototype ")));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().endsWith( "prototype ")));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().endsWith( "prototype ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().endsWith(   "prototype   "));    	non-compiled	[CE]  	136	None	replace
463	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().endsWith( ".prototype "));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().endsWith( ".prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().endsWith( ".prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().endsWith(   "prototype   "));    	non-compiled	[CE]  	136	None	replace
464	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().endsWith( "prototype ")  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().endsWith( "prototype ")  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().endsWith( "prototype ")	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().endsWith(   "prototype   "));    	non-compiled	[CE]  	136	None	replace
465	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.hasPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.hasPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.hasPropertyAssign())?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	58	None	replace
466	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.node.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.node.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.node.getFirstChild();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	58	None	replace
467	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.BLOCK;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()!=    Token.BLOCK;    	non-compiled	[CE]  	83	None	replace
468	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.BLOCK;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()!=    Token.BLOCK;    	non-compiled	[CE]  	83	None	replace
469	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.BLOCK;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()!=    Token.BLOCK;    	non-compiled	[CE]  	83	None	replace
470	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
471	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.NAME;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
472	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  isPropertyAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
473	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
474	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
475	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getString()  ==  Token.CALL;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getString()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getString()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
476	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().contains( "prototype "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().contains( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().contains( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().contains(   "prototype   "));    	non-compiled	[CE]  	40	None	replace
477	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "property "));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "property "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "property "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().contains(   "prototype   "));    	non-compiled	[CE]  	40	None	replace
478	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().indexOf( "prototype "));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().indexOf( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().indexOf( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().contains(   "prototype   "));    	non-compiled	[CE]  	40	None	replace
479	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( ".prototype. "));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( ".prototype. "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( ".prototype. "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().contains(   "prototype   "));    	non-compiled	[CE]  	40	None	replace
480	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.isPropertyAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
481	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.hasPropertyAssign)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.hasPropertyAssign)?  null  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.hasPropertyAssign)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
482	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())||  assign.hasPropertyAssign;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())||  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())||  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
483	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getPropertyAssign();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getPropertyAssign();	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
484	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.getPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	108	None	replace
485	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	108	None	replace
486	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  -1  :  assign.assignNode.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  -1  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  -1  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	108	None	replace
487	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getString();	  hasPropertyAssign    =(assign.getPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	108	None	replace
488	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  0  :  assign.assignNode.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  0  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  0  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	108	None	replace
489	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	33	None	replace
490	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	33	None	replace
491	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	33	None	replace
492	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	33	None	replace
493	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	33	None	replace
494	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	33	None	replace
495	[BUG]  [BUGGY]  HasPropertyAssign  =  false;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  false;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  false;	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
496	[BUG]  [BUGGY]  HasPropertyAssign  =!assign.isPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =!assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =!assign.isPropertyAssign;	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
497	[BUG]  [BUGGY]  HasPropertyAssign  =  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  null;	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
498	[BUG]  [BUGGY]  HasPropertyAssign  =!assign.hasPropertyAssign();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =!assign.hasPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =!assign.hasPropertyAssign();	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
499	[BUG]  [BUGGY]  HasPropertyAssign  =  isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  isPropertyAssign;	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
500	[BUG]  [BUGGY]  HasPropertyAssign  =!hasPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =!hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =!hasPropertyAssign;	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
501	[BUG]  [BUGGY]  HasPropertyAssign  =!assign.isPropertyAssign();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =!assign.isPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =!assign.isPropertyAssign();	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
502	[BUG]  [BUGGY]  Node  node  =  assign.assignNode.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Node  node  =  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Node  node  =  assign.assignNode.getLastChild();	  Node    node    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	20	None	replace
503	[BUG]  [BUGGY]  Node  node  =  assign.node.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Node  node  =  assign.node.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Node  node  =  assign.node.getFirstChild();	  Node    node    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	20	None	replace
504	[BUG]  [BUGGY]  Node  node  =  assign.assignNode.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Node  node  =  assign.assignNode.getNext();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Node  node  =  assign.assignNode.getNext();	  Node    node    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	20	None	replace
505	[BUG]  [BUGGY]  Node  node  =  assign.assignParent.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Node  node  =  assign.assignParent.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Node  node  =  assign.assignParent.getFirstChild();	  Node    node    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	20	None	replace
506	[BUG]  [BUGGY]  Node  node  =  assign.assignNode.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Node  node  =  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Node  node  =  assign.assignNode.removeFirstChild();	  Node    node    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	20	None	replace
507	[BUG]  [BUGGY]  Node  node  =  assign.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Node  node  =  assign.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Node  node  =  assign.getLastChild();	  Node    node    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	20	None	replace
508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(compiler)).traverse();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(compiler)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(compiler)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
509	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(assign)).traverse();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(assign)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(assign)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
510	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer(compiler)).traverse();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer(compiler)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer(compiler)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer(compiler)).traverse();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer(compiler)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assignment,  new  CallSiteOptimizer(compiler)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  CallSiteOptimizer(compiler)).traverse();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  CallSiteOptimizer(compiler)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  node,  new  CallSiteOptimizer(compiler)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign.assignNode)).traverse();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign.assignNode)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign.assignNode)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
514	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.NAME;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	51	None	replace
515	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()!=  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	51	None	replace
516	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	51	None	replace
517	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    isPropertyAssign;    	non-compiled	[CE]  	31	None	replace
518	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    isPropertyAssign;    	non-compiled	[CE]  	31	None	replace
519	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    isPropertyAssign;    	non-compiled	[CE]  	31	None	replace
520	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isFunctionAssign;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isFunctionAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isFunctionAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    isPropertyAssign;    	non-compiled	[CE]  	31	None	replace
521	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  isPropertyAssign;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    isPropertyAssign;    	non-compiled	[CE]  	31	None	replace
522	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  isPropertyAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.VAR  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    isPropertyAssign;    	non-compiled	[CE]  	31	None	replace
523	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "prototype ")));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "prototype ")));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "prototype ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   ")));    	non-compiled	[CE]  	120	None	replace
524	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "prototype ")));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "prototype ")));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "prototype ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   ")));    	non-compiled	[CE]  	120	None	replace
525	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype ")));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype ")));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   ")));    	non-compiled	[CE]  	120	None	replace
526	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property ")));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property ")));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   ")));    	non-compiled	[CE]  	120	None	replace
527	[BUG]  [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype ")));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype ")));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   ")));    	non-compiled	[CE]  	120	None	replace
528	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype ")));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype ")));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   ")));    	non-compiled	[CE]  	120	None	replace
529	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  value);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  value);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getFirstChild(),  value);	  NodeUtil.removeChild(assign.assignNode.getFirstChild(),    assign);    	non-compiled	[CE]  	89	None	replace
530	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getString(),  assign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode.getString(),  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getString(),  assign);	  NodeUtil.removeChild(assign.assignNode.getFirstChild(),    assign);    	non-compiled	[CE]  	89	None	replace
531	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  current);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  current);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getFirstChild(),  current);	  NodeUtil.removeChild(assign.assignNode.getFirstChild(),    assign);    	non-compiled	[CE]  	89	None	replace
532	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isUnknownAssign)?  null  :  assign.assignNode.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.isUnknownAssign)?  null  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isUnknownAssign)?  null  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isUnknownAssign)?    null    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	109	None	replace
533	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isFunctionAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isFunctionAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isFunctionAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    isPropertyAssign;    	non-compiled	[CE]  	46	None	replace
534	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    isPropertyAssign;    	non-compiled	[CE]  	46	None	replace
535	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    isPropertyAssign;    	non-compiled	[CE]  	46	None	replace
536	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    isPropertyAssign;    	non-compiled	[CE]  	46	None	replace
537	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    isPropertyAssign;    	non-compiled	[CE]  	46	None	replace
538	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >>  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()!=    Token.NAME;    	non-compiled	[CE]  	52	None	replace
539	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.NAME;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  >=  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()!=    Token.NAME;    	non-compiled	[CE]  	52	None	replace
540	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.NAME;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()!=    Token.NAME;    	non-compiled	[CE]  	52	None	replace
541	[BUG]  [BUGGY]  Assign  assign  =  assign.assignNode.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assignNode.getLastChild();	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
542	[BUG]  [BUGGY]  Assign  assign  =  assign.assign.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.assign.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assign.getLastChild();	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
543	[BUG]  [BUGGY]  Assign  assign  =  assign.assignNode.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.assignNode.getNext();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assignNode.getNext();	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
544	[BUG]  [BUGGY]  Assign  assign  =  assign.assignNode.getParent();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.assignNode.getParent();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assignNode.getParent();	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
545	[BUG]  [BUGGY]  Assign  assign  =  assign.node.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.node.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.node.getFirstChild();	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
546	[BUG]  [BUGGY]  Assign  assign  =  assign.assignNode.getAncestor(1);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.assignNode.getAncestor(1);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assignNode.getAncestor(1);	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
547	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
548	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.VAR;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()!=  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
549	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
550	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()  ==  Token.CALL;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
551	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()!=  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()!=  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()!=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
552	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getString()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
553	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  2;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  2;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    +    1;    	non-compiled	[CE]  	76	None	replace
554	[BUG]  [BUGGY]  hasPropertyAssign  +=  assign.mayHaveSecondarySideEffects  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  +=  assign.mayHaveSecondarySideEffects  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  +=  assign.mayHaveSecondarySideEffects  +  1;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    +    1;    	non-compiled	[CE]  	76	None	replace
555	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getFirstChild()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getFirstChild()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
556	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
557	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
558	[BUG]  [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getFirstChild()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  getPropertyAssign(assign.getFirstChild()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
559	[BUG]  [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getLastChild()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  getPropertyAssign(assign.getLastChild()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  getPropertyAssign(assign.getLastChild()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
560	[BUG]  [BUGGY]  hasPropertyAssign  |=  getPropertyAssign(assign.getLastChild()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  getPropertyAssign(assign.getLastChild()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  getPropertyAssign(assign.getLastChild()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
561	[BUG]  [BUGGY]  hasPropertyAssign(assign.assignNode.getLastChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign(assign.assignNode.getLastChild()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign(assign.assignNode.getLastChild()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
562	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().mayHaveSecondarySideEffects;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.assignNode.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	74	None	replace
563	[BUG]  [BUGGY]  arePropertyAssign  =  false;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  arePropertyAssign  =  false;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	arePropertyAssign  =  false;	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
564	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.getPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.getPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.getPropertyAssign;	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
565	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasHaveSecondarySideEffects;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasHaveSecondarySideEffects;	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
566	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasPropertyAssign  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasPropertyAssign  +  1;	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
567	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "-prototype "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "-prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "-prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   ".prototype   "));    	non-compiled	[CE]  	119	None	replace
568	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "/prototype "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "/prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "/prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   ".prototype   "));    	non-compiled	[CE]  	119	None	replace
569	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isUnknownValue;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isUnknownValue;	  hasPropertyAssign    =(assign.isUnknown())?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	144	None	replace
570	[BUG]  [BUGGY]  assign.assignNode.removeChild(assign);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.removeChild(assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.removeChild(assign);	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
571	[BUG]  [BUGGY]  assign.assignNode.setPropertyAssign(value);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setPropertyAssign(value);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setPropertyAssign(value);	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
572	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects  ||  isPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	104	None	replace
573	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects  *  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects  *  2;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects  *  2;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	104	None	replace
574	[BUG]  [BUGGY]  hasPropertyAssign  =(assign!=  null)?  false  :  assign.isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign!=  null)?  false  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign!=  null)?  false  :  assign.isPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	70	None	replace
575	[BUG]  [BUGGY]  hasPropertyAssign  =(assign  ==  null)?  false  :  assign.isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign  ==  null)?  false  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign  ==  null)?  false  :  assign.isPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	70	None	replace
576	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.getPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.getPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.getPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	70	None	replace
577	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign.isPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign.isPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	70	None	replace
578	[BUG]  [BUGGY]  Node  node  =  assign.assignNode.cloneTree();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Node  node  =  assign.assignNode.cloneTree();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Node  node  =  assign.assignNode.cloneTree();	  Node    node    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	20	None	replace
579	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  null);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  null);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	129	None	replace
580	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	55	None	replace
581	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	55	None	replace
582	[BUG]  [BUGGY]  HasPropertyAssign  =  fnScope.getPropertyAssign(assign);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  fnScope.getPropertyAssign(assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  fnScope.getPropertyAssign(assign);	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
583	[BUG]  [BUGGY]  HasPropertyAssign  =  fnScope.isPropertyAssign(assign);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  fnScope.isPropertyAssign(assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  fnScope.isPropertyAssign(assign);	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
584	[BUG]  [BUGGY]  HasPropertyAssign  =  fnScope.getPropertyAssignment(assign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  fnScope.getPropertyAssignment(assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  fnScope.getPropertyAssignment(assign);	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
585	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.getPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.getPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.getPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign;    	non-compiled	[CE]  	95	None	replace
586	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  &&  isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign  &&  isPropertyAssign;	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
587	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign  +  1;	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
588	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign  ||  assign.assignNode.getLastChild().getString().equals( "prototype "))  {	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
589	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	54	None	replace
590	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  -1  :  assign.hasPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  -1  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  -1  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	138	None	replace
591	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(fnScope)).traverse();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(fnScope)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(fnScope)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  callSiteOptimizer)).traverse();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  callSiteOptimizer)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  callSiteOptimizer)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
593	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign)).traverse();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler,  assign)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
594	[BUG]  [BUGGY]  havePropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype "));	  hasPropertyAssign    &=    assign.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	37	None	replace
595	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().equals( ".prototype "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().equals( ".prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString().equals( ".prototype "));	  hasPropertyAssign    &=    assign.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	37	None	replace
596	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode,  var);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode,  var);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode,  var);	  NodeUtil.removeChild(assign.assignNode);    	non-compiled	[CE]  	87	None	replace
597	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getPropertyAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getPropertyAssign;	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
598	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.removeFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
599	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.next;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.next;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.next;	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
600	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getPropertyAssignNode;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getPropertyAssignNode;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getPropertyAssignNode;	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
601	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	114	None	replace
602	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	114	None	replace
603	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESUL  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESUL  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESUL	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	48	None	replace
604	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	48	None	replace
605	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.node.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.node.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.node.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	51	None	replace
606	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
607	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.NAME;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getString()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
608	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
609	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.VAR;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
610	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.VAR;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
611	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString()  ==  Token.VAR;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
612	[BUG]  [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().contains(   "prototype   "));    	non-compiled	[CE]  	40	None	replace
613	[BUG]  [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild()  ==  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild()  ==  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  &=  assign.assignNode.getFirstChild()  ==  null;	  hasPropertyAssign    &=    assign.assignNode.getLastChild()    ==    null;    	non-compiled	[CE]  	64	None	replace
614	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.assignNode.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isUnknownAssign)?    null    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	109	None	replace
615	[BUG]  [BUGGY]  var  =  assign.assignNode.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  var  =  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assignNode.removeFirstChild();	  var    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	88	None	replace
616	[BUG]  [BUGGY]  var  =  assign.assignNode.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  var  =  assign.assignNode.getParent();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assignNode.getParent();	  var    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	88	None	replace
617	[BUG]  [BUGGY]  var  =  assign.assignNode.getFirstChild()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  var  =  assign.assignNode.getFirstChild()  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assignNode.getFirstChild()  +  1;	  var    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	88	None	replace
618	[BUG]  [BUGGY]  assign.assignNode.addLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.addLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.addLastChild();	  assign.assignNode.removeLastChild();    	non-compiled	[CE]  	24	None	replace
619	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasFollowing  &&  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasFollowing  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasFollowing  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.hasPropertyAssign    &&    isPropertyAssign;    	non-compiled	[CE]  	135	None	replace
620	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	85	None	replace
621	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isAll;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isAll;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isAll;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isFalse;    	non-compiled	[CE]  	69	None	replace
622	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isLocal;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isLocal;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isLocal;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isFalse;    	non-compiled	[CE]  	69	None	replace
623	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	32	None	replace
624	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	32	None	replace
625	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.node.getLastChild())  }  ;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.node.getLastChild())  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.node.getLastChild())  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
626	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild()),  isPropertyAssign  }  ;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild()),  isPropertyAssign  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getLastChild()),  isPropertyAssign  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
627	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNode())  }  ;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNode())  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getNode())  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
628	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getString())  }  ;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getString())  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getString())  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
629	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.removeFirstChild();    	non-compiled	[CE]  	96	None	replace
630	[BUG]  [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild().getString().equals( "prototype "));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild().getString().equals( "prototype "));	  HasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	39	None	replace
631	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isLocale;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isLocale;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isLocale;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isUnknownAssign;    	non-compiled	[CE]  	111	None	replace
632	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()!=    Token.NAME;    	non-compiled	[CE]  	52	None	replace
633	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
634	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  false  :  assign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  false  :  assign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  false  :  assign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
635	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  null;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
636	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	108	None	replace
637	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getType();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getType();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getType();	  hasPropertyAssign    =(assign.getPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	108	None	replace
638	[BUG]  [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	29	None	replace
639	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.node.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.node.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.node.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	29	None	replace
640	[BUG]  [BUGGY]  assign.assignNode.clear(),  true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.clear(),  true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.clear(),  true);	  assign.assignNode.getLastChild(),    true);    	non-compiled	[CE]  	23	None	replace
641	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.value;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.value;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.value;	  hasPropertyAssign    &=    assign.propertyAssign;    	non-compiled	[CE]  	146	None	replace
642	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
643	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
644	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.NAME;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
645	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >=  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()!=    Token.VAR;    	non-compiled	[CE]  	30	None	replace
646	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ==  null)?  false  :  assign.getPropertyAssign();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ==  null)?  false  :  assign.getPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()  ==  null)?  false  :  assign.getPropertyAssign();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
647	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  >  0)?  false  :  assign.getPropertyAssign();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  >  0)?  false  :  assign.getPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()  >  0)?  false  :  assign.getPropertyAssign();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
648	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()!=  null)?  false  :  assign.getPropertyAssign();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()!=  null)?  false  :  assign.getPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()!=  null)?  false  :  assign.getPropertyAssign();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
649	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getNameNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getNameNode();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getNameNode();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
650	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  +  3;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  +  3;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasPropertyAssign  +  3;	  hasPropertyAssign    &=    assign.hasPropertyAssign    +    1;    	non-compiled	[CE]  	116	None	replace
651	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	34	None	replace
652	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  &&  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	34	None	replace
653	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString();    	non-compiled	[CE]  	125	None	replace
654	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString();    	non-compiled	[CE]  	125	None	replace
655	[BUG]  [BUGGY]  hasPropertyAssign  &=  isPropertyAssign(assign.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  isPropertyAssign(assign.getFirstChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  isPropertyAssign(assign.getFirstChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getFirstChild());    	non-compiled	[CE]  	142	None	replace
656	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assignedToUnknownValue;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assignedToUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assignedToUnknownValue;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
657	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isFunctionAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isFunctionAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isFunctionAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
658	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
659	[BUG]  [BUGGY]  isPropertyAssign  =!assign.isPropertyAssign;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =!assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =!assign.isPropertyAssign;	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
660	[BUG]  [BUGGY]  isPropertyAssign  =  fnScope.getVar(assign.assignNode).isPropertyAssign();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  fnScope.getVar(assign.assignNode).isPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  fnScope.getVar(assign.assignNode).isPropertyAssign();	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
661	[BUG]  [BUGGY]  isPropertyAssign  =  fnScope.getVar(assign.assignNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  fnScope.getVar(assign.assignNode);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  fnScope.getVar(assign.assignNode);	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
662	[BUG]  [BUGGY]  isPropertyAssign  =  fnScope.getVar(assign.assignNode.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  fnScope.getVar(assign.assignNode.getLastChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  fnScope.getVar(assign.assignNode.getLastChild());	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
663	[BUG]  [BUGGY]  isPropertyAssign  =  fnScope.getVar(assign.assignNode.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  fnScope.getVar(assign.assignNode.getFirstChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  fnScope.getVar(assign.assignNode.getFirstChild());	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
664	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.hasPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isUnknown)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	112	None	replace
665	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isImmutableAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isImmutableAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isImmutableAssign;	  hasPropertyAssign    =(assign.isUnknown)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	112	None	replace
666	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    +    1;    	non-compiled	[CE]  	101	None	replace
667	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  3;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  3;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  3;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    +    1;    	non-compiled	[CE]  	101	None	replace
668	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  false  :  assign.assignNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  false  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  false  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	41	None	replace
669	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getType()  ==  Token.VAR;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign;    	non-compiled	[CE]  	12	None	replace
670	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.removeFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.removeFirstChild();    	non-compiled	[CE]  	97	None	replace
671	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.cloneTree();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.cloneTree();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.removeFirstChild();    	non-compiled	[CE]  	97	None	replace
672	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "properties "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "properties "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "properties "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "property   "));    	non-compiled	[CE]  	38	None	replace
673	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property_ "));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property_ "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property_ "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "property   "));    	non-compiled	[CE]  	38	None	replace
674	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property- "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property- "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property- "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "property   "));    	non-compiled	[CE]  	38	None	replace
675	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasHaveSecondarySideEffects  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasHaveSecondarySideEffects  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasHaveSecondarySideEffects  +  1;	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
676	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasUnknownSideEffects;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasUnknownSideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasUnknownSideEffects;	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
677	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  -1  :  assign.assignNode.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  -1  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  -1  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	9	None	replace
678	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(assign));  current--;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(assign));  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(assign));  current--;	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    current--;    	non-compiled	[CE]  	131	None	replace
679	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(fnScope));  current--;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(fnScope));  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(fnScope));  current--;	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    current--;    	non-compiled	[CE]  	131	None	replace
680	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(convention));  current--;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(convention));  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(convention));  current--;	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    current--;    	non-compiled	[CE]  	131	None	replace
681	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  CallSiteOptimizer(compiler));  current--;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  nameNode,  new  CallSiteOptimizer(compiler));  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  nameNode,  new  CallSiteOptimizer(compiler));  current--;	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    current--;    	non-compiled	[CE]  	131	None	replace
682	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(fnScope));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(fnScope));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(fnScope));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
683	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  a,  new  CallSiteOptimizer(compiler));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  a,  new  CallSiteOptimizer(compiler));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  a,  new  CallSiteOptimizer(compiler));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
684	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(convention));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(convention));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(convention));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
685	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(this,  assign));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(this,  assign));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(this,  assign));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
686	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.canModifyAllCallSites;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.canModifyAllCallSites;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.canModifyAllCallSites;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    isPropertyAssign;    	non-compiled	[CE]  	78	None	replace
687	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  assign.mayHaveSecondarySideEffects;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  assign.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	75	None	replace
688	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects  *  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects  *  2;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects  *  2;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	75	None	replace
689	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFollowNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFollowNode();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isFollowNode();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.isPropertyAssign;    	non-compiled	[CE]  	68	None	replace
690	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isUnknownAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isUnknownAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isUnknownAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
691	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.isPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
692	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isFollowNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isFollowNode();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isFollowNode();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
693	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isPropertyAssign  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isPropertyAssign  +  1;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
694	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getLastChild().getString().equals( "prototype "))?  null  :  assign.assignNode.getLastChil  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getLastChild().getString().equals( "prototype "))?  null  :  assign.assignNode.getLastChil  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getLastChild().getString().equals( "prototype "))?  null  :  assign.assignNode.getLastChil	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	60	None	replace
695	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString()));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().endsWith(   "prototype   "));    	non-compiled	[CE]  	136	None	replace
696	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString()).endsWith( "prototype "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString()).endsWith( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString()).endsWith( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().endsWith(   "prototype   "));    	non-compiled	[CE]  	136	None	replace
697	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assign);  current--;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assign);  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  this,  assign);  current--;	  NodeTraversal.traverse(compiler,    var,    this);    current--;    	non-compiled	[CE]  	127	None	replace
698	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.BLOCK;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()!=    Token.BLOCK;    	non-compiled	[CE]  	83	None	replace
699	[BUG]  [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	45	None	replace
700	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	45	None	replace
701	[BUG]  [BUGGY]  hasPropertyAssign  =(assign)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign)?  null  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	6	None	replace
702	[BUG]  [BUGGY]  hasPropertyAssign  =(assign!=  null)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign!=  null)?  null  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign!=  null)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	6	None	replace
703	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.getPropertyAssign;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.getPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.getPropertyAssign;	  hasPropertyAssign    =(isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	6	None	replace
704	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  3;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  3;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  3;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    +    1;    	non-compiled	[CE]  	76	None	replace
705	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  4;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  4;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  4;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    +    1;    	non-compiled	[CE]  	76	None	replace
706	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  1L;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  1L;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  1L;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    +    1;    	non-compiled	[CE]  	76	None	replace
707	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  *  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  *  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  *  1;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    +    1;    	non-compiled	[CE]  	76	None	replace
708	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.FUNCTION;    	non-compiled	[CE]  	123	None	replace
709	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  hasFollowing;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION  ||  hasFollowing;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.FUNCTION;    	non-compiled	[CE]  	123	None	replace
710	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	49	None	replace
711	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	49	None	replace
712	[BUG]  [BUGGY]  assign  =  assign.assignNode.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assignNode.removeFirstChild();	  assign    =    assign.assignNode.getLastChild();    	non-compiled	[CE]  	21	None	replace
713	[BUG]  [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype ")));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype ")));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   ")));    	non-compiled	[CE]  	120	None	replace
714	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( ".prototype ")));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( ".prototype ")));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( ".prototype ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   ")));    	non-compiled	[CE]  	120	None	replace
715	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.node.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.node.getLastChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.node.getLastChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild());    	non-compiled	[CE]  	140	None	replace
716	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getString());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getString());	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild());    	non-compiled	[CE]  	140	None	replace
717	[BUG]  [BUGGY]  Assign  assign  =  assign.assignNode.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assignNode.removeFirstChild();	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
718	[BUG]  [BUGGY]  Assign  assign  =  assign.assignNode.cloneTree();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.assignNode.cloneTree();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assignNode.cloneTree();	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
719	[BUG]  [BUGGY]  Assign  assign  =  assign.assignNode.getAncestor(2);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.assignNode.getAncestor(2);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assignNode.getAncestor(2);	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
720	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().substring(0,  assign.assignNode.getLastChild().getString().equals( "prototype "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().substring(0,  assign.assignNode.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString().substring(0,  assign.assignNode.getLastChild().getString().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	35	None	replace
721	[BUG]  [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	35	None	replace
722	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().substring(0,  assign.assignNode.getLastChild().getString()).equals( "prototype "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString().substring(0,  assign.assignNode.getLastChild().getString()).equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString().substring(0,  assign.assignNode.getLastChild().getString()).equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	35	None	replace
723	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue.getLastChild();	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
724	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.node.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.node.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.node.getLastChild();	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
725	[BUG]  [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  &=  assign.assignNode.getFirstChild();	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
726	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild();	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
727	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isPropertyAssignNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isPropertyAssignNode;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isPropertyAssignNode;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssignNode;    	non-compiled	[CE]  	73	None	replace
728	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assign,  isPropertyAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assign,  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assign,  isPropertyAssign;	  hasPropertyAssign    &=    assign.assign;    	non-compiled	[CE]  	13	None	replace
729	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assign  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assign  +  1;	  hasPropertyAssign    &=    assign.assign;    	non-compiled	[CE]  	13	None	replace
730	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assign,  hasFollowing;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assign,  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assign,  hasFollowing;	  hasPropertyAssign    &=    assign.assign;    	non-compiled	[CE]  	13	None	replace
731	[BUG]  [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	80	None	replace
732	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  isPropertyAssign;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    isPropertyAssign;    	non-compiled	[CE]  	53	None	replace
733	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isUnknown;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isUnknown;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isUnknown;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    isPropertyAssign;    	non-compiled	[CE]  	53	None	replace
734	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	33	None	replace
735	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString()!=  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getString()!=  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getString()!=  null;	  hasPropertyAssign    &=    assign.assignNode.getLastChild()!=    null;    	non-compiled	[CE]  	62	None	replace
736	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
737	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callSiteOptimizer,  new  CallSiteOptimizer());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  callSiteOptimizer,  new  CallSiteOptimizer());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  callSiteOptimizer,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
738	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.node.getFirstChild()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.node.getFirstChild()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.node.getFirstChild()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
739	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getString()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.assignNode.getString()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
740	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assignNode.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assignNode.getFirstChild()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assignNode.getFirstChild()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
741	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assignedToUnknownValue;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assignedToUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assignedToUnknownValue;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    hasPropertyAssign;    	non-compiled	[CE]  	148	None	replace
742	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasOwnPropertyAssign  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasOwnPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasOwnPropertyAssign  +  1;	  hasPropertyAssign    &=    assign.hasOwnPropertyAssign;    	non-compiled	[CE]  	117	None	replace
743	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasUnknownPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasUnknownPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasUnknownPropertyAssign;	  hasPropertyAssign    &=    assign.hasOwnPropertyAssign;    	non-compiled	[CE]  	117	None	replace
744	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue  +  1;	  hasPropertyAssign    &=    assign.assignedToUnknownValue;    	non-compiled	[CE]  	107	None	replace
745	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().hasPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.hasPropertyAssign;    	non-compiled	[CE]  	16	None	replace
746	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.ASSIGN;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.ASSIGN;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getType()  ==  Token.ASSIGN;	  hasPropertyAssign    &=    assign.assignNode.hasPropertyAssign;    	non-compiled	[CE]  	16	None	replace
747	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.isUnknownAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.isUnknownAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.isUnknownAssign;	  hasPropertyAssign    =(assign.isUnknownAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	94	None	replace
748	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  isPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  isPropertyAssign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  current,  isPropertyAssign);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
749	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current  +  1);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  current  +  1);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
750	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  false);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  current,  false);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
751	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isFalse;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isFalse;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isFalse;	  hasPropertyAssign    =(assign.isUnknownAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	110	None	replace
752	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isUnknownAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isUnknownAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isUnknownAssign;	  hasPropertyAssign    =(assign.isUnknownAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	110	None	replace
753	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isLocale;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isLocale;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isLocale;	  hasPropertyAssign    =(assign.isUnknownAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	110	None	replace
754	[BUG]  [BUGGY]  hasPropertyAssign  &=  isPropertyAssign  &&  mayHaveSecondarySideEffects;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  isPropertyAssign  &&  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  isPropertyAssign  &&  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	77	None	replace
755	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign  +  1;	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
756	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild());	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
757	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getString().endsWith( "__ "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign  ||  assign.assignNode.getLastChild().getString().endsWith( "__ "))  {	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
758	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild());	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
759	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.getValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.getValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.getValue();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getValue();    	non-compiled	[CE]  	139	None	replace
760	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.isPropertyAssign;    	non-compiled	[CE]  	59	None	replace
761	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.getString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.getString();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getString();    	non-compiled	[CE]  	8	None	replace
762	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.assignNode.getString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.assignNode.getString();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getString();    	non-compiled	[CE]  	8	None	replace
763	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign  +  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    isPropertyAssign;    	non-compiled	[CE]  	46	None	replace
764	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	84	None	replace
765	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  +  3;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  +  3;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isPropertyAssign  +  3;	  hasPropertyAssign    &=    assign.isPropertyAssign    +    1;    	non-compiled	[CE]  	121	None	replace
766	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  +  4;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  +  4;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isPropertyAssign  +  4;	  hasPropertyAssign    &=    assign.isPropertyAssign    +    1;    	non-compiled	[CE]  	121	None	replace
767	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.node.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.node.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.node.getFirstChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	103	None	replace
768	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.removeFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.removeFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.removeFirstChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	103	None	replace
769	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.BLOCK;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	81	None	replace
770	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getLastChild().getString().equals( "prototype "))?  true  :  assign.assignNode.getLastChil  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getLastChild().getString().equals( "prototype "))?  true  :  assign.assignNode.getLastChil  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()  ||  assign.assignNode.getLastChild().getString().equals( "prototype "))?  true  :  assign.assignNode.getLastChil	  hasPropertyAssign    =(assign.getPropertyAssign())?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	42	None	replace
771	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign(true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign(true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isPropertyAssign(true);	  hasPropertyAssign    &=    assign.isPropertyAssign();    	non-compiled	[CE]  	147	None	replace
772	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign(false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign(false);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isPropertyAssign(false);	  hasPropertyAssign    &=    assign.isPropertyAssign();    	non-compiled	[CE]  	147	None	replace
773	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getPropertyAssign();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getPropertyAssign();	  hasPropertyAssign    &=    assign.isPropertyAssign();    	non-compiled	[CE]  	147	None	replace
774	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isUnknownAssign)?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.isUnknownAssign)?  true  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isUnknownAssign)?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	58	None	replace
775	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.getPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.getPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.getPropertyAssign)?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	58	None	replace
776	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.hasPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.hasPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.hasPropertyAssign)?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	58	None	replace
777	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isUnknownAssign)?  true  :  assign.assignNode.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.isUnknownAssign)?  true  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isUnknownAssign)?  true  :  assign.assignNode.getLastChild();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	44	None	replace
778	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.removeFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign())?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	42	None	replace
779	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ||  isPropertyAssign;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    isPropertyAssign;    	non-compiled	[CE]  	53	None	replace
780	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isFunctionExpression;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isFunctionExpression;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isFunctionExpression;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    isPropertyAssign;    	non-compiled	[CE]  	53	None	replace
781	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  true  :  assign.assignNode.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  true  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  true  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isUnknownAssign)?    null    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	109	None	replace
782	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.CALL;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()!=  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	84	None	replace
783	[BUG]  [BUGGY]  assign  =  assign.assignNode.cloneTree();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign  =  assign.assignNode.cloneTree();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assignNode.cloneTree();	  assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	25	None	replace
784	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignName.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignName.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignName.getFirstChild();	  hasPropertyAssign    &=    assign.assignNode.getLastChild();    	non-compiled	[CE]  	17	None	replace
785	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue  &&  isPropertyAssign;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignedToUnknownValue;    	non-compiled	[CE]  	107	None	replace
786	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue  ||  isPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignedToUnknownValue;    	non-compiled	[CE]  	107	None	replace
787	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasOwnPropertyAssign  &&  isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasOwnPropertyAssign  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasOwnPropertyAssign  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.hasOwnPropertyAssign;    	non-compiled	[CE]  	117	None	replace
788	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasFollowing;    	non-compiled	[CE]  	50	None	replace
789	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.FUNCTION;    	non-compiled	[CE]  	123	None	replace
790	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssignNode;    	non-compiled	[CE]  	73	None	replace
791	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknownNode;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknownNode;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknownNode;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssignNode;    	non-compiled	[CE]  	73	None	replace
792	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignedToUnknownValue;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignedToUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignedToUnknownValue;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isUnknownValue;    	non-compiled	[CE]  	72	None	replace
793	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  *  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  *  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasPropertyAssign  *  1;	  hasPropertyAssign    &=    assign.hasPropertyAssign    +    1;    	non-compiled	[CE]  	116	None	replace
794	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()!=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	32	None	replace
795	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prop "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prop "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prop "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "property   "));    	non-compiled	[CE]  	38	None	replace
796	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  1  :  assign.assignNode.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  1  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  1  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	7	None	replace
797	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild().getString().contains( "prototype "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild().getString().contains( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getLastChild().getString().contains( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().contains(   "prototype   "));    	non-compiled	[CE]  	40	None	replace
798	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.removeFirstChild();	  hasPropertyAssign    =(assign.isUnknownAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	94	None	replace
799	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign()  &&  mayHaveSecondarySideEffects;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign()  &&  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isPropertyAssign()  &&  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    &&    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	77	None	replace
800	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	56	None	replace
801	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	56	None	replace
802	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	56	None	replace
803	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getLastChild();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
804	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getName();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getName();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getName();	  hasPropertyAssign    =(assign.getPropertyAssign())?    false    :    assign.getPropertyAssign();    	non-compiled	[CE]  	71	None	replace
805	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isUnknownValue;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isUnknownValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isUnknownValue;	  hasPropertyAssign    =(assign.isUnknownAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	110	None	replace
806	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isUnknown;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isUnknown;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isUnknown;	  hasPropertyAssign    =(assign.isUnknownAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	110	None	replace
807	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().replace('.',  '/'));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().replace('.',  '/'));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString().replace('.',  '/'));	  hasPropertyAssign    &=    assign.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	37	None	replace
808	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().endsWith( "prototype "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().endsWith( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString().endsWith( "prototype "));	  hasPropertyAssign    &=    assign.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	37	None	replace
809	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.assignNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	10	None	replace
810	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assignment;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assignment;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assignment;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
811	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isFunctionExpression;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isFunctionExpression;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isFunctionExpression;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    isPropertyAssign;    	non-compiled	[CE]  	113	None	replace
812	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  Boolean.TRUE  :  Boolean.FALSE;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
813	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  Boolean.FALSE  :  Boolean.TRUE;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign;    	non-compiled	[CE]  	145	None	replace
814	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  1  :  assign.assignNode.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  1  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  1  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.getPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	108	None	replace
815	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ==  null)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  ==  null)?  null  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()  ==  null)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
816	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  <  null)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()  <  null)?  null  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()  <  null)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
817	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()!=  null)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign()!=  null)?  null  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign()!=  null)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
818	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getName();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getName();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.getName();	  hasPropertyAssign    =(assign.getPropertyAssign())?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	5	None	replace
819	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	103	None	replace
820	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.VAR;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	103	None	replace
821	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getQualifiedName();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getQualifiedName();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getQualifiedName();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString();    	non-compiled	[CE]  	125	None	replace
822	[BUG]  [BUGGY]  isPropertyAssign  =  assign.isPropertyAssign();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  assign.isPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  assign.isPropertyAssign();	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
823	[BUG]  [BUGGY]  isPropertyAssign  =  assign.isPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  assign.isPropertyAssign;	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
824	[BUG]  [BUGGY]  isPropertyAssign  =  assign.hasPropertyAssign();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  assign.hasPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  assign.hasPropertyAssign();	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
825	[BUG]  [BUGGY]  isPropertyAssign  =  hasFollowing  ||  hasPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  hasFollowing  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  hasFollowing  ||  hasPropertyAssign;	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
826	[BUG]  [BUGGY]  isPropertyAssign  =  assign.isPropertyAssign()  &&  hasFollowing;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  assign.isPropertyAssign()  &&  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  assign.isPropertyAssign()  &&  hasFollowing;	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
827	[BUG]  [BUGGY]  isPropertyAssign  =  assign.isPropertyAssign  &&  hasFollowing;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  isPropertyAssign  =  assign.isPropertyAssign  &&  hasFollowing;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  assign.isPropertyAssign  &&  hasFollowing;	  isPropertyAssign    =    true;    	non-compiled	[CE]  	27	None	replace
828	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    assign.assignNode.getLastChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	48	None	replace
829	[BUG]  [BUGGY]  hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	51	None	replace
830	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignName.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignName.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignName.getFirstChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	51	None	replace
831	[BUG]  [BUGGY]  NodeUtil.removeChild(value,  assign.assignNode.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(value,  assign.assignNode.getLastChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(value,  assign.assignNode.getLastChild());	  NodeUtil.removeChild(assign.assignNode.getLastChild());    	non-compiled	[CE]  	90	None	replace
832	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isUnknownAssign();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.isUnknownAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isUnknownAssign();	  hasPropertyAssign    &=    assign.isPropertyAssign();    	non-compiled	[CE]  	147	None	replace
833	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	82	None	replace
834	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	82	None	replace
835	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getName();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getName();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getName();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign;    	non-compiled	[CE]  	95	None	replace
836	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImplicitPrototype();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImplicitPrototype();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getImplicitPrototype();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.getPropertyAssign;    	non-compiled	[CE]  	95	None	replace
837	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNode());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNode());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getNode());	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild());    	non-compiled	[CE]  	140	None	replace
838	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign,  assign.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign,  assign.getLastChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign,  assign.getLastChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild());    	non-compiled	[CE]  	140	None	replace
839	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNameNode());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNameNode());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getNameNode());	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild());    	non-compiled	[CE]  	140	None	replace
840	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild(),  assign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild(),  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild(),  assign);	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild());    	non-compiled	[CE]  	140	None	replace
841	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  true  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isUnknownAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	98	None	replace
842	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  assign);  current--;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  assign);  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getFirstChild(),  assign);  current--;	  NodeUtil.removeChild(assign.assignNode.getFirstChild());    current--;    	non-compiled	[CE]  	91	None	replace
843	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.getParent());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.getParent());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.getParent());	  NodeUtil.removeChild(assign.assignNode);    	non-compiled	[CE]  	87	None	replace
844	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.getString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.getString();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.getString();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getString();    	non-compiled	[CE]  	8	None	replace
845	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getParent();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getParent();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getString();    	non-compiled	[CE]  	8	None	replace
846	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(convention)).traverse();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(convention)).traverse();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(convention)).traverse();	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler)).traverse();    	non-compiled	[CE]  	128	None	replace
847	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ||  isPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	19	None	replace
848	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ||  assign.isPropertyAssign();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ||  assign.isPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ||  assign.isPropertyAssign();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	19	None	replace
849	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isUnknown;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isUnknown;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isUnknown;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    isPropertyAssign;    	non-compiled	[CE]  	31	None	replace
850	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isFunctionExpression;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isFunctionExpression;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isFunctionExpression;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    isPropertyAssign;    	non-compiled	[CE]  	31	None	replace
851	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNode()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNode()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getNode()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
852	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNameNode()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNameNode()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getNameNode()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
853	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getString()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getString()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
854	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getParent()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getParent()));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getParent()));	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild()));    	non-compiled	[CE]  	143	None	replace
855	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  isFunctionExpression;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  isFunctionExpression;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  isFunctionExpression;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    isPropertyAssign;    	non-compiled	[CE]  	78	None	replace
856	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	55	None	replace
857	[BUG]  [BUGGY]  HasPropertyAssign  =  hasPropertyAssign;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  hasPropertyAssign;	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
858	[BUG]  [BUGGY]  HasPropertyAssign  =  assign.hasPropertyAssign();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  assign.hasPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  assign.hasPropertyAssign();	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
859	[BUG]  [BUGGY]  HasPropertyAssign  =  assign.isPropertyAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  assign.isPropertyAssign;	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
860	[BUG]  [BUGGY]  HasPropertyAssign  =  new  HasPropertyAssign(assign);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  HasPropertyAssign  =  new  HasPropertyAssign(assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  new  HasPropertyAssign(assign);	  HasPropertyAssign    =    true;    	non-compiled	[CE]  	92	None	replace
861	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  assign));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  assign));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getFirstChild(),  assign));	  NodeUtil.removeChild(assign.assignNode.getFirstChild(),    assign);    	non-compiled	[CE]  	89	None	replace
862	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getParent(),  assign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeUtil.removeChild(assign.assignNode.getParent(),  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getParent(),  assign);	  NodeUtil.removeChild(assign.assignNode.getFirstChild(),    assign);    	non-compiled	[CE]  	89	None	replace
863	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    &=(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	58	None	replace
864	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	150	None	replace
865	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	150	None	replace
866	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()!=  Token.CALL;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()!=  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()!=  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getFirstChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	150	None	replace
867	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assignment;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assignment;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assignment;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    isPropertyAssign;    	non-compiled	[CE]  	46	None	replace
868	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isUnknown;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isUnknown;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isUnknown;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    isPropertyAssign;    	non-compiled	[CE]  	46	None	replace
869	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()!=  Token.CALL;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()!=  Token.CALL;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()!=  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.CALL;    	non-compiled	[CE]  	33	None	replace
870	[BUG]  [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	34	None	replace
871	[BUG]  [BUGGY]  assign.assignNode.setString(node.getString());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setString(node.getString());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setString(node.getString());	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
872	[BUG]  [BUGGY]  assign.assignNode.setPropertyAssign(assign);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  assign.assignNode.setPropertyAssign(assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setPropertyAssign(assign);	  assign.assignNode.setLastChild();    	non-compiled	[CE]  	26	None	replace
873	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  hasPropertyAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR    ||    hasPropertyAssign;    	non-compiled	[CE]  	124	None	replace
874	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  true  :  assign.assignNode.removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  true  :  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  true  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    =(assign.hasPropertyAssign())?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	93	None	replace
875	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.assignNode.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(isPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	99	None	replace
876	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getPropertyAssign()  &&  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.getPropertyAssign()  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getPropertyAssign()  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.hasPropertyAssign    &&    isPropertyAssign;    	non-compiled	[CE]  	135	None	replace
877	[BUG]  [BUGGY]  var  =  assign.assignNode.cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  var  =  assign.assignNode.cloneTree();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assignNode.cloneTree();	  var    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	88	None	replace
878	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.canModifyAllCallSites  ||  mayHaveSecondarySideEffects;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.canModifyAllCallSites  ||  mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.canModifyAllCallSites  ||  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects    ||    mayHaveSecondarySideEffects;    	non-compiled	[CE]  	104	None	replace
879	[BUG]  [BUGGY]  hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	80	None	replace
880	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignName.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignName.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignName.getLastChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	80	None	replace
881	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasChildren();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasChildren();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasChildren();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	138	None	replace
882	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.id;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.id;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.id;	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	138	None	replace
883	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current--);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current--);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  current--);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	126	None	replace
884	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  >>  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  >>  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  >>  null;	  hasPropertyAssign    &=    assign.assignNode.getLastChild()!=    null;    	non-compiled	[CE]  	62	None	replace
885	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  [Delete]  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  [Delete]  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString()  [Delete]  null;	  hasPropertyAssign    &=    assign.assignNode.getLastChild()!=    null;    	non-compiled	[CE]  	62	None	replace
886	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign()  &&  assign.mayHaveSecondarySideEffects;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign()  &&  assign.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign()  &&  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    =    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	79	None	replace
887	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign()?  null  :  assign.mayHaveSecondarySideEffects;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign()?  null  :  assign.mayHaveSecondarySideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign()?  null  :  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    =    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	79	None	replace
888	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assignment);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  assignment);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  this,  assignment);	  NodeTraversal.traverse(compiler,    var,    this);    	non-compiled	[CE]  	129	None	replace
889	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.removeFirstChild();	  hasPropertyAssign    &=    assign.assignNode.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	74	None	replace
890	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  current,  new  CallSiteOptimizer());	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
891	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  allFunctionScopes);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  allFunctionScopes);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer(),  allFunctionScopes);	  NodeTraversal.traverse(compiler,    assign,    new    CallSiteOptimizer());    	non-compiled	[CE]  	130	None	replace
892	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.BLOCK;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >>  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
893	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.BLOCK;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  >=  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
894	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.BLOCK;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.BLOCK;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.BLOCK;    	non-compiled	[CE]  	149	None	replace
895	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  -1  :  assign.assignNode.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  -1  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  -1  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	61	None	replace
896	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  -1  :  assign.assignNode.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  -1  :  assign.assignNode.getLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  -1  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    -1    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	61	None	replace
897	[BUG]  [BUGGY]  Assign  assign  =  assign.assignNode.getFirstChild(),  true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Assign  assign  =  assign.assignNode.getFirstChild(),  true);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assignNode.getFirstChild(),  true);	  Assign    assign    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	22	None	replace
898	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isReferencedVar(var);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isReferencedVar(var);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isReferencedVar(var);	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
899	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isVarArgs;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isVarArgs;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isVarArgs;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.isPropertyAssign;    	non-compiled	[CE]  	1	None	replace
900	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.removeFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  1  :  assign.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.removeFirstChild();    	non-compiled	[CE]  	96	None	replace
901	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.hasChildren();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.hasChildren();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.hasChildren();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasFollowing;    	non-compiled	[CE]  	4	None	replace
902	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  -1  :  assign.assignNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  -1  :  assign.assignNode.getFirstChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  -1  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.hasPropertyAssign())?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	100	None	replace
903	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  &&  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign  &&  isPropertyAssign;	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
904	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign()  &&  assign.isPropertyAssign;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign()  &&  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign()  &&  assign.isPropertyAssign;	  hasPropertyAssign    =    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
905	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNameNode())  }  ;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getNameNode())  }  ;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getNameNode())  }  ;	  hasPropertyAssign    &=    getPropertyAssign(assign.getLastChild())    }    ;    	non-compiled	[CE]  	141	None	replace
906	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isUnknownAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isUnknownAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isUnknownAssign;	  hasPropertyAssign    =(assign.isUnknown())?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	144	None	replace
907	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isUnknown())?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	144	None	replace
908	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign)?  true  :  assign.isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign)?  true  :  assign.isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown()  ||  assign.isPropertyAssign)?  true  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isUnknown())?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	144	None	replace
909	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  /  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  /  1;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  /  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME    +    1;    	non-compiled	[CE]  	101	None	replace
910	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  current--;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  this,  current--;	  NodeTraversal.traverse(compiler,    var,    this);    current--;    	non-compiled	[CE]  	127	None	replace
911	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  current--);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this,  current--);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  this,  current--);	  NodeTraversal.traverse(compiler,    var,    this);    current--;    	non-compiled	[CE]  	127	None	replace
912	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current);  current--;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current);  current--;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  current);  current--;	  NodeTraversal.traverse(compiler,    var,    this);    current--;    	non-compiled	[CE]  	127	None	replace
913	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasLastChild();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.hasLastChild();	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
914	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasSideEffects;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasSideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasSideEffects;	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
915	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasChildren();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasChildren();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.hasChildren();	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
916	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasDefinedSideEffects;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.hasDefinedSideEffects;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasDefinedSideEffects;	  hasPropertyAssign    &=    assign.hasHaveSecondarySideEffects;    	non-compiled	[CE]  	115	None	replace
917	[BUG]  [BUGGY]  hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.VAR;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	29	None	replace
918	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignName.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignName.getLastChild().getType()  ==  Token.VAR;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignName.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	29	None	replace
919	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.VAR;    	non-compiled	[CE]  	106	None	replace
920	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  ||  isPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  ||  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign  ||  isPropertyAssign;	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
921	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  ||  assign.assignNode.getLastChild().getString().endsWith( "__ "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign  ||  assign.assignNode.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign  ||  assign.assignNode.getLastChild().getString().endsWith( "__ "))  {	  hasPropertyAssign    =    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
922	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  1  :  assign.hasPropertyAssign;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  1  :  assign.hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  1  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
923	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.getValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.getValue();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.getValue();	  hasPropertyAssign    =(assign.hasPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	2	None	replace
924	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.NAME;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  [Delete]  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString()    ==    Token.NAME;    	non-compiled	[CE]  	102	None	replace
925	[BUG]  [BUGGY]  Node  node  =  assign.assignNode.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  Node  node  =  assign.assignNode.getParent();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Node  node  =  assign.assignNode.getParent();	  Node    node    =    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	20	None	replace
926	[BUG]  [BUGGY]  hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assignment.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	45	None	replace
927	[BUG]  [BUGGY]  havePropertyAssign  =  assign.hasPropertyAssign()?  assign.hasPropertyAssign  :  null;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  =  assign.hasPropertyAssign()?  assign.hasPropertyAssign  :  null;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  =  assign.hasPropertyAssign()?  assign.hasPropertyAssign  :  null;	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
928	[BUG]  [BUGGY]  havePropertyAssign  =  assign.hasPropertyAssign()  &&  isPropertyAssign;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  =  assign.hasPropertyAssign()  &&  isPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  =  assign.hasPropertyAssign()  &&  isPropertyAssign;	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
929	[BUG]  [BUGGY]  havePropertyAssign  =  assign.hasPropertyAssign()?  assign.hasPropertyAssign  :  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  =  assign.hasPropertyAssign()?  assign.hasPropertyAssign  :  false;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  =  assign.hasPropertyAssign()?  assign.hasPropertyAssign  :  false;	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
930	[BUG]  [BUGGY]  havePropertyAssign  =  assign.isPropertyAssign();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  =  assign.isPropertyAssign();  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  =  assign.isPropertyAssign();	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
931	[BUG]  [BUGGY]  havePropertyAssign  =  assign.hasPropertyAssign()  &&(assign.isPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  havePropertyAssign  =  assign.hasPropertyAssign()  &&(assign.isPropertyAssign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  =  assign.hasPropertyAssign()  &&(assign.isPropertyAssign);	  havePropertyAssign    =    true;    	non-compiled	[CE]  	28	None	replace
932	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  hasPropertyAssign;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  hasPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION    ||    hasPropertyAssign;    	non-compiled	[CE]  	137	None	replace
933	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild(),  assign);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild(),  assign);  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild(),  assign);	  hasPropertyAssign    &=    getPropertyAssign(assign.getFirstChild());    	non-compiled	[CE]  	142	None	replace
934	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.removeFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.removeFirstChild());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.removeFirstChild());	  hasPropertyAssign    &=    getPropertyAssign(assign.getFirstChild());    	non-compiled	[CE]  	142	None	replace
935	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getString());  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getString());	  hasPropertyAssign    &=    getPropertyAssign(assign.getFirstChild());    	non-compiled	[CE]  	142	None	replace
936	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(current));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(current));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(current));	  NodeTraversal.traverse(compiler,    var,    new    CallSiteOptimizer(compiler));    	non-compiled	[CE]  	132	None	replace
937	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK    ||    assign.assignNode.getLastChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	85	None	replace
938	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isImmutableValue;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isImmutableValue;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isImmutableValue;	  hasPropertyAssign    =(assign.isUnknown)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	112	None	replace
939	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isUnknown;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isUnknown;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isUnknown;	  hasPropertyAssign    =(assign.isUnknown)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	112	None	replace
940	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign.getPropertyAssign;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign.getPropertyAssign;  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  false  :  assign.getPropertyAssign;	  hasPropertyAssign    =(assign.isUnknown)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	112	None	replace
941	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().equals( "prototype "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   ".prototype   "));    	non-compiled	[CE]  	119	None	replace
942	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString()).equals( "prototype "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {      [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString()).equals( "prototype "));  [BUGGY]      }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().substring(0,  assign.assignNode.getLastChild().getString()).equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   ".prototype   "));    	non-compiled	[CE]  	119	None	replace
