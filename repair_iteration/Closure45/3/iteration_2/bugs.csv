bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isPropertyAssign;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
2	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
3	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getPropertyAssign();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getPropertyAssign();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getPropertyAssign();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
4	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.hasFollowing;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.hasFollowing;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.hasFollowing;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
5	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
6	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
7	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.getFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getString();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getString();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.getString();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	13	None	replace
11	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode;	  hasPropertyAssign    &=    isPropertyAssign;    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign;	  hasPropertyAssign    &=    isPropertyAssign;    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assign;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assign;	  hasPropertyAssign    &=    isPropertyAssign;    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =  assign.isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.isPropertyAssign;	  hasPropertyAssign    &=    isPropertyAssign;    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  hasPropertyAssign  |=  isPropertyAssign;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  |=  isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  |=  isPropertyAssign;	  hasPropertyAssign    &=    isPropertyAssign;    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasPropertyAssign;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.hasPropertyAssign;	  hasPropertyAssign    &=    assign.hasPropertyAssign;    	non-compiled	[CE]  	12	None	replace
17	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild();	  hasPropertyAssign    &=    assign.hasPropertyAssign;    	non-compiled	[CE]  	12	None	replace
18	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =  assign.hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.hasPropertyAssign;	  hasPropertyAssign    &=    assign.hasPropertyAssign;    	non-compiled	[CE]  	12	None	replace
19	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild();	  hasPropertyAssign    &=    assign.hasPropertyAssign;    	non-compiled	[CE]  	12	None	replace
20	[BUG]  [BUGGY]  Node  node  =  assign.assignNode.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  Node  node  =  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Node  node  =  assign.assignNode.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
21	[BUG]  [BUGGY]  assign  =  assign.assignNode.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  assign  =  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assignNode.getLastChild();	      	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  Assign  assign  =  assign.assignNode.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  Assign  assign  =  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	Assign  assign  =  assign.assignNode.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
23	[BUG]  [BUGGY]  assign.assignNode.getLastChild(),  true);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  assign.assignNode.getLastChild(),  true);  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.getLastChild(),  true);	      	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  assign.assignNode.removeLastChild();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  assign.assignNode.removeLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.removeLastChild();	      	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  assign  =  assign.assignNode.getFirstChild();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  assign  =  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign  =  assign.assignNode.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  assign.assignNode.setLastChild();  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  assign.assignNode.setLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	assign.assignNode.setLastChild();	      	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  isPropertyAssign  =  true;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  isPropertyAssign  =  true;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	isPropertyAssign  =  true;	  hasPropertyAssign    =    false;    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  havePropertyAssign  =  true;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  havePropertyAssign  =  true;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	havePropertyAssign  =  true;	  hasPropertyAssign    =    false;    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isPropertyAssign;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "prototype "));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "prototype "));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getString().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "prototype "));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "prototype "));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().toLowerCase().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype "));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype "));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getString().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property "));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property "));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "property "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype "));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype "));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	4	None	replace
40	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype "));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype "));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().contains( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	4	None	replace
41	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	16	None	replace
42	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	16	None	replace
43	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	16	None	replace
44	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	16	None	replace
45	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	2	None	replace
46	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	2	None	replace
48	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.EXPR_RESULT;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	2	None	replace
49	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  assign.assignNode.getLastChild().getType()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	2	None	replace
50	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasFollowing;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
53	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
54	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
55	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
57	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	17	None	replace
58	[BUG]  [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=(assign.isPropertyAssign)?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	17	None	replace
59	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.isPropertyAssign;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.isPropertyAssign;	  hasPropertyAssign    &=    assign.isPropertyAssign;    	non-compiled	[CE]  	5	None	replace
60	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  null  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	15	None	replace
61	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	15	None	replace
62	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild()!=  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild()!=  null;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild()!=  null;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild()!=    null;    	non-compiled	[CE]  	11	None	replace
63	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ==  null;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ==  null;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild()  ==  null;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild()!=    null;    	non-compiled	[CE]  	11	None	replace
64	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild()  ==  null;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild()  ==  null;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild()  ==  null;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild()!=    null;    	non-compiled	[CE]  	11	None	replace
65	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  >=  null;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  >=  null;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild()  >=  null;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild()!=    null;    	non-compiled	[CE]  	11	None	replace
66	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  >>  null;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  >>  null;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild()  >>  null;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild()!=    null;    	non-compiled	[CE]  	11	None	replace
67	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  [Delete]  null;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild()  [Delete]  null;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild()  [Delete]  null;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild()!=    null;    	non-compiled	[CE]  	11	None	replace
68	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isPropertyAssign;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
69	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isFalse;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isFalse;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isFalse;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
70	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.isPropertyAssign;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  false  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
71	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getPropertyAssign();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getPropertyAssign();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign())?  false  :  assign.getPropertyAssign();	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
72	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknownValue;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknownValue;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknownValue;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
73	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isPropertyAssignNode;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isPropertyAssignNode;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isPropertyAssignNode;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
74	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	10	None	replace
75	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	10	None	replace
76	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  1;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  +  1;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	10	None	replace
77	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  &&  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	10	None	replace
78	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	10	None	replace
79	[BUG]  [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =  assign.mayHaveSecondarySideEffects;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =  assign.mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	10	None	replace
80	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
81	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
82	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
83	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()!=  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
84	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
85	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
86	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild());  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getFirstChild());	      	non-compiled	[CE]  	8	None	replace
87	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeUtil.removeChild(assign.assignNode);  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode);	      	non-compiled	[CE]  	8	None	replace
88	[BUG]  [BUGGY]  var  =  assign.assignNode.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  var  =  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	var  =  assign.assignNode.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
89	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  assign);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild(),  assign);  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getFirstChild(),  assign);	      	non-compiled	[CE]  	8	None	replace
90	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getLastChild());  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeUtil.removeChild(assign.assignNode.getLastChild());  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getLastChild());	      	non-compiled	[CE]  	8	None	replace
91	[BUG]  [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild());  current--;  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeUtil.removeChild(assign.assignNode.getFirstChild());  current--;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeUtil.removeChild(assign.assignNode.getFirstChild());  current--;	      	non-compiled	[CE]  	8	None	replace
92	[BUG]  [BUGGY]  HasPropertyAssign  =  true;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  HasPropertyAssign  =  true;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	HasPropertyAssign  =  true;	  hasPropertyAssign    =    false;    	non-compiled	[CE]  	1	None	replace
93	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  true  :  assign.assignNode.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  true  :  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  true  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	16	None	replace
94	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.hasPropertyAssign;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
95	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getPropertyAssign;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
96	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.removeFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.removeFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
97	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.removeFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.removeFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	13	None	replace
98	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.getFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	13	None	replace
99	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.assignNode.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  null  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	13	None	replace
100	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  null  :  assign.assignNode.getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  null  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  null  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	13	None	replace
101	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  1;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  1;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  +  1;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
102	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
103	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.getFirstChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
104	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.mayHaveSecondarySideEffects  ||  mayHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	10	None	replace
105	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.VAR;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.VAR;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
106	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.VAR;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
107	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignedToUnknownValue;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignedToUnknownValue;	  hasPropertyAssign    &=    isPropertyAssign;    	non-compiled	[CE]  	9	None	replace
108	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.getPropertyAssign)?  null  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	15	None	replace
109	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  null  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.assignNode.getLastChild();    	non-compiled	[CE]  	15	None	replace
110	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isPropertyAssign;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknownAssign)?  false  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
111	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknownAssign;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknownAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign.isUnknownAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
112	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isPropertyAssign;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown)?  false  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
113	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  isPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
114	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getLastChild().getType()  ==  Token.NAME;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
115	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasHaveSecondarySideEffects;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.hasHaveSecondarySideEffects;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasHaveSecondarySideEffects;	  hasPropertyAssign    &=    assign.hasPropertyAssign;    	non-compiled	[CE]  	12	None	replace
116	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  +  1;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasPropertyAssign  +  1;	  hasPropertyAssign    &=    assign.hasPropertyAssign;    	non-compiled	[CE]  	12	None	replace
117	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasOwnPropertyAssign;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.hasOwnPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasOwnPropertyAssign;	  hasPropertyAssign    &=    assign.hasPropertyAssign;    	non-compiled	[CE]  	12	None	replace
118	[BUG]  [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  true  :  assign.assignNode.getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(isPropertyAssign)?  true  :  assign.assignNode.getLastChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(isPropertyAssign)?  true  :  assign.assignNode.getLastChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	17	None	replace
119	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( ".prototype "));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( ".prototype "));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( ".prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	4	None	replace
120	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype ")));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype ")));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().equals( "prototype ")));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	4	None	replace
121	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign  +  1;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isPropertyAssign  +  1;	  hasPropertyAssign    &=    assign.isPropertyAssign;    	non-compiled	[CE]  	5	None	replace
122	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.FUNCTION;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.FUNCTION;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  >>  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	2	None	replace
123	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.FUNCTION;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	2	None	replace
124	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  hasPropertyAssign;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.VAR  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
125	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString();	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.VAR;    	non-compiled	[CE]  	3	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeTraversal.traverse(compiler,  var,  current);  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  current);	      	non-compiled	[CE]  	8	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  current--;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  current--;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  this);  current--;	      	non-compiled	[CE]  	8	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler)).traverse();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler)).traverse();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler)).traverse();	      	non-compiled	[CE]  	8	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  this);	      	non-compiled	[CE]  	8	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer());  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer());  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  assign,  new  CallSiteOptimizer());	      	non-compiled	[CE]  	8	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler));  current--;  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler));  current--;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler));  current--;	      	non-compiled	[CE]  	8	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler));  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	NodeTraversal.traverse(compiler,  var,  new  CallSiteOptimizer(compiler));	      	non-compiled	[CE]  	8	None	replace
133	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.assignNode.removeFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.assignNode.removeFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  true  :  assign.assignNode.removeFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	17	None	replace
134	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.hasPropertyAssign())?  true  :  assign.assignNode.getFirstChild();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.hasPropertyAssign())?  true  :  assign.assignNode.getFirstChild();	  hasPropertyAssign    =(assign.isPropertyAssign)?    true    :    assign.assignNode.getFirstChild();    	non-compiled	[CE]  	17	None	replace
135	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  &&  isPropertyAssign;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.hasPropertyAssign  &&  isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.hasPropertyAssign  &&  isPropertyAssign;	  hasPropertyAssign    &=    assign.hasPropertyAssign;    	non-compiled	[CE]  	12	None	replace
136	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().endsWith( "prototype "));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().endsWith( "prototype "));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString().endsWith( "prototype "));	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getString().equals(   "prototype   "));    	non-compiled	[CE]  	4	None	replace
137	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasPropertyAssign;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	2	None	replace
138	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasPropertyAssign;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  -1  :  assign.hasPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
139	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getValue();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getValue();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  null  :  assign.getValue();	  hasPropertyAssign    =(assign.isPropertyAssign)?    null    :    assign.hasPropertyAssign;    	non-compiled	[CE]  	18	None	replace
140	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild());  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild());	  hasPropertyAssign    =    false;    	non-compiled	[CE]  	1	None	replace
141	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild())  }  ;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild())  }  ;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild())  }  ;	  hasPropertyAssign    =    false;    	non-compiled	[CE]  	1	None	replace
142	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild());  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getFirstChild());	  hasPropertyAssign    =    false;    	non-compiled	[CE]  	1	None	replace
143	[BUG]  [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild()));  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  getPropertyAssign(assign.getLastChild()));	  hasPropertyAssign    =    false;    	non-compiled	[CE]  	1	None	replace
144	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isPropertyAssign;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isUnknown())?  false  :  assign.isPropertyAssign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
145	[BUG]  [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  =(assign.isPropertyAssign)?  false  :  assign;	  hasPropertyAssign    =(assign.isPropertyAssign)?    false    :    assign.isPropertyAssign;    	non-compiled	[CE]  	14	None	replace
146	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.propertyAssign;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.propertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.propertyAssign;	  hasPropertyAssign    &=    isPropertyAssign;    	non-compiled	[CE]  	9	None	replace
147	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.isPropertyAssign();  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.isPropertyAssign();	  hasPropertyAssign    &=    assign.mayHaveSecondarySideEffects;    	non-compiled	[CE]  	10	None	replace
148	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.NAME  ||  hasPropertyAssign;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	7	None	replace
149	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getString()  ==  Token.BLOCK;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
150	[BUG]  [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    assignedToUnknownValue  =  value  !=  null  &&  !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {    [BUGGY]  hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;  [BUGGY]    }  else  if  (!NodeUtil.isLiteralValue(  assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.24253562503633297	734	734	1	replace	hasPropertyAssign  &=  assign.assignNode.getFirstChild().getType()  ==  Token.BLOCK  ||  assign.assignNode.getFirstChild().getType()  ==  Token.CALL;	  hasPropertyAssign    &=    assign.assignNode.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	6	None	replace
