bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.compiler  =  compiler.getCompiler();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  this.compiler  =  compiler.getCompiler();  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	this.compiler  =  compiler.getCompiler();	this.compiler  =  compiler;  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
2	[BUG]  [BUGGY]  this.compiler  =  compiler.getCompiler(safeNameIdSupplier);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  this.compiler  =  compiler.getCompiler(safeNameIdSupplier);  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	this.compiler  =  compiler.getCompiler(safeNameIdSupplier);	this.compiler  =  compiler;  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
3	[BUG]  [BUGGY]  this(compiler,  safeNameIdSupplier);  [CE]  recursive  constructor  invocation  [FE]        AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  this(compiler,  safeNameIdSupplier);  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	this(compiler,  safeNameIdSupplier);	this.compiler  =  compiler;  	non-compiled	[CE]  recursive  constructor  invocation	3	None	replace
4	[BUG]  [BUGGY]  this.compiler  =  compiler.getInitialValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  this.compiler  =  compiler.getInitialValue();  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	this.compiler  =  compiler.getInitialValue();	this.compiler  =  compiler;  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
5	[BUG]  [BUGGY]  this.compiler  =  compiler.getParameterTypes();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  this.compiler  =  compiler.getParameterTypes();  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	this.compiler  =  compiler.getParameterTypes();	this.compiler  =  compiler;  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
6	[BUG]  [BUGGY]    [CE]  variable  compiler  might  not  have  been  initialized  [FE]              AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]    [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	  	this.compiler  =  compiler;  	non-compiled	[CE]  variable  compiler  might  not  have  been  initialized	3	None	replace
7	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  0,  safeNameIdSupplier);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  0,  safeNameIdSupplier);  }  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  0,  safeNameIdSupplier);  }	this.compiler  =  compiler;  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	3	None	replace
8	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier,  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier,  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier,	this.compiler  =  compiler;  	non-compiled	[CE]  ')'  expected	3	None	replace
9	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  safeNameIdSupplier,  staleVars);  }  [CE]  cannot  find  symbol  staleVars  [FE]        AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  safeNameIdSupplier,  staleVars);  }  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  safeNameIdSupplier,  staleVars);  }	this.compiler  =  compiler;  	non-compiled	[CE]  cannot  find  symbol  staleVars	3	None	replace
10	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier	this.compiler  =  compiler;  	non-compiled	[CE]  ')'  expected	3	None	replace
11	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier);  }  [CE]  cannot  find  symbol  staleVars  [FE]            AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier);  }  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier);  }	this.compiler  =  compiler;  	non-compiled	[CE]  cannot  find  symbol  staleVars	3	None	replace
12	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier,  staleVars);  }  [CE]  cannot  find  symbol  staleVars  [FE]              AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier,  staleVars);  }  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Set  <  String>  staleVars  =  Sets.newHashSet();  System.arraycopy(compiler,  0,  this.staleVars,  0,  safeNameIdSupplier,  staleVars);  }	this.compiler  =  compiler;  	non-compiled	[CE]  cannot  find  symbol  staleVars	3	None	replace
13	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Preconditions.checkNotNull(compiler);  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CE]  variable  safeNameIdSupplier  might  already  have  been  assigned  [FE]    AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Preconditions.checkNotNull(compiler);  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  Preconditions.checkNotNull(compiler);  this.safeNameIdSupplier  =  safeNameIdSupplier;  }	this.compiler  =  compiler;  	non-compiled	[CE]  variable  safeNameIdSupplier  might  already  have  been  assigned	3	None	replace
14	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  safeNameIdSupplier);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  safeNameIdSupplier);  }  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  safeNameIdSupplier);  }	this.compiler  =  compiler;  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	3	None	replace
15	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CE]  variable  safeNameIdSupplier  might  already  have  been  assigned  [FE]        AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  this.safeNameIdSupplier  =  safeNameIdSupplier;  }	this.compiler  =  compiler;  	non-compiled	[CE]  variable  safeNameIdSupplier  might  already  have  been  assigned	3	None	replace
16	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  compileNameIdSupplier,  safeNameIdSupplier);  }  [CE]  cannot  find  symbol  compileNameIdSupplier  [FE]          AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  compileNameIdSupplier,  safeNameIdSupplier);  }  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  compileNameIdSupplier,  safeNameIdSupplier);  }	this.compiler  =  compiler;  	non-compiled	[CE]  cannot  find  symbol  compileNameIdSupplier	3	None	replace
17	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  1,  safeNameIdSupplier);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError  [CONTEXT]  InlineObjectLiterals(  AbstractCompiler  compiler,  Supplier<String>  safeNameIdSupplier)  {  [BUGGY]  if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  1,  safeNameIdSupplier);  }  [BUGGY]  this.safeNameIdSupplier  =  safeNameIdSupplier;  }  [CLASS]  InlineObjectLiterals  InliningBehavior  1  [METHOD]  <init>  [RETURN_TYPE]  Supplier)  AbstractCompiler  compiler  String>  safeNameIdSupplier  [VARIABLES]  AbstractCompiler  compiler  Supplier  safeNameIdSupplier  Set  staleVars  String  VAR_PREFIX  boolean  	projects/Closure29/src/com/google/javascript/jscomp/InlineObjectLiterals.java	0.3492151478847891	59	59	5	replace	if(compiler!=  null)  {  this.compiler  =  compiler;  }  else  {  System.arraycopy(compiler,  0,  this.safeNameIdSupplier,  1,  safeNameIdSupplier);  }	this.compiler  =  compiler;  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	3	None	replace
