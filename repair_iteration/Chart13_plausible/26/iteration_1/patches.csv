bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D    size    =    this.centerBlock.arrange(g2,    c2);    Size2D  size  =  this.centerBlock.arrange(g2,  c2);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	8	None	add
2	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D    size    =    this.centerBlock.arrange(g2,    c2);    Size2D  size  =  this.centerBlock.arrange(g2,  c3);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	8	None	add
3	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D    size    =    this.centerBlock.arrange(g2,    c2);    Size2D  size  =  this.centerBlock.arrange(g2,  c1);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	8	None	add
4	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	add	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	replace
5	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	replace
6	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]              java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	add	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	replace
7	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]              java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	replace
8	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[4]  =  size.height;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	add	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[4]  =  size.height;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    h[4]    =    size.height;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	replace
9	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[4]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[4]  =  size.height;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[4]  =  size.height;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    h[4]    =    size.height;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	replace
10	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	add	Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    h[4]    =    size.height;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	replace
11	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    h[4]    =    size.height;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	replace
12	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D    size    =    this.centerBlock.arrange(g2,    c1);    Size2D  size  =  this.centerBlock.arrange(g2,  c1);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	4	None	add
13	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D    size    =    this.centerBlock.arrange(g2,    c1);    Size2D  size  =  this.centerBlock.arrange(g2,  c2);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	4	None	add
14	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  Size2D  size  =  this.centerBlock.arrange(g2,  c1));  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  Size2D  size  =  this.centerBlock.arrange(g2,  c1));  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D    size    =    this.centerBlock.arrange(g2,    c1);    Size2D  size  =  this.centerBlock.arrange(g2,  c1));	  	non-compiled	[CE]  ';'  expected	4	None	add
15	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4,  c4);  [CE]  no  suitable  method  found  for  arrange(Graphics2D,RectangleConstraint,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4,  c4);  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c4,  c4);	  Size2D    size    =    this.centerBlock.arrange(g2,    c2);    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,RectangleConstraint,RectangleConstraint)	9	None	replace
16	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  width);  [CE]  no  suitable  method  found  for  arrange(Graphics2D,double)  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  width);  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  width);	  Size2D    size    =    this.centerBlock.arrange(g2,    c3);    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,double)	6	None	replace
17	[BUG]  [BUGGY]  g2.setPaint(this.centerBlock,  c4.getPaint());  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  g2.setPaint(this.centerBlock,  c4.getPaint());  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	g2.setPaint(this.centerBlock,  c4.getPaint());	      g2.setPaint(this.centerBlock.getPaint());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	add	Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
19	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
20	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[4]  =  size.width;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	add	Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[4]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	replace
21	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[4]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[4]  =  size.width;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[4]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	replace
22	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[4]  =  size.width;  [CE]  cannot  find  symbol  c3  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[4]  =  size.width;  [BUGGY]    Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[4]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    w[4]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  c3	3	None	replace
23	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  Size2D  size  =  this.centerBlock.arrange(g2,  c2));  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  Size2D  size  =  this.centerBlock.arrange(g2,  c2));  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	Size2D    size    =    this.centerBlock.arrange(g2,    c2);    Size2D  size  =  this.centerBlock.arrange(g2,  c2));	  	non-compiled	[CE]  ';'  expected	8	None	add
