bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  w  =  constraint.getHeight()  +  1;  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  Integer  w  =  constraint.getHeight()  +  1;  [BUGGY]    else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	Integer  w  =  constraint.getHeight()  +  1;	      Integer    w    =    constraint.getHeight();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	add	else  if(h  ==  LengthConstraintType.FIXED)  {	  else    if(w    ==    LengthConstraintType.RANGE)    {    	compilable	  [FE]  NullPointerException  	2	1	replace
3	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	else  if(h  ==  LengthConstraintType.FIXED)  {	  else    if(w    ==    LengthConstraintType.RANGE)    {    	compilable	  [FE]  NullPointerException  	2	1	replace
4	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.RANGE)  {  else  if(w  ==  LengthConstraintType.RANGE)  {  [CE]  'else'  without  'if'  [FE]    NullPointerException    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  else  if(w  ==  LengthConstraintType.RANGE)  {  else  if(w  ==  LengthConstraintType.RANGE)  {  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	else    if(w    ==    LengthConstraintType.RANGE)    {    else  if(w  ==  LengthConstraintType.RANGE)  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
5	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.RANGE)  {  else  if(w  ==  LengthConstraintType.FIXED)  {  [CE]  'else'  without  'if'  [FE]      NullPointerException    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  else  if(w  ==  LengthConstraintType.RANGE)  {  else  if(w  ==  LengthConstraintType.FIXED)  {  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	else    if(w    ==    LengthConstraintType.RANGE)    {    else  if(w  ==  LengthConstraintType.FIXED)  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
6	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.RANGE)  {  else  if(w  ==  LengthConstraintType.NONE)  {  [CE]  'else'  without  'if'  [FE]        NullPointerException    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  else  if(w  ==  LengthConstraintType.RANGE)  {  else  if(w  ==  LengthConstraintType.NONE)  {  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	else    if(w    ==    LengthConstraintType.RANGE)    {    else  if(w  ==  LengthConstraintType.NONE)  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
7	[BUG]  [BUGGY]  int  w  =  constraint.getWidth();  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  int  w  =  constraint.getWidth();  [BUGGY]    else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	int  w  =  constraint.getWidth();	      int    w    =    constraint.getHeight();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  int  w  =  constraint.getHeight()  +  1;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  int  w  =  constraint.getHeight()  +  1;  [BUGGY]    else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	int  w  =  constraint.getHeight()  +  1;	      int    w    =    constraint.getHeight();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  Integer  w  =  constraint.getWidth()  +  1;  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  Integer  w  =  constraint.getWidth()  +  1;  [BUGGY]    else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	Integer  w  =  constraint.getWidth()  +  1;	      Integer    w    =    constraint.getWidth();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  LengthConstraintType  w  =  constraint.getHeight()  +  1;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  LengthConstraintType  w  =  constraint.getHeight()  +  1;  [BUGGY]    else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	LengthConstraintType  w  =  constraint.getHeight()  +  1;	      LengthConstraintType    w    =    constraint.getHeight();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  LengthConstraintType  w  =  constraint.getWidth()  +  1;  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  LengthConstraintType  w  =  constraint.getWidth()  +  1;  [BUGGY]    else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	LengthConstraintType  w  =  constraint.getWidth()  +  1;	      LengthConstraintType    w    =    constraint.getWidth();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  LengthConstraintType  h  =  constraint.getWidth();  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  LengthConstraintType  h  =  constraint.getWidth();  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	LengthConstraintType  h  =  constraint.getWidth();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2,  constraint);  }  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  else  if(h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2,  constraint);  }  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	else  if(h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2,  constraint);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint);  }  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  else  if(h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint);  }  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	else  if(h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.RANGE)  {  else  if(w!=  LengthConstraintType.RANGE)  {  [CE]  'else'  without  'if'  [FE]    NullPointerException    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  else  if(w  ==  LengthConstraintType.RANGE)  {  else  if(w!=  LengthConstraintType.RANGE)  {  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	else    if(w    ==    LengthConstraintType.RANGE)    {    else  if(w!=  LengthConstraintType.RANGE)  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
16	[BUG]  [BUGGY]  LengthConstraintType  h  =  constraint.getHeight();  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  LengthConstraintType  h  =  constraint.getHeight();  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	LengthConstraintType  h  =  constraint.getHeight();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint);  }  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }    [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint);  }  [BUGGY]    if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	replace	else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
