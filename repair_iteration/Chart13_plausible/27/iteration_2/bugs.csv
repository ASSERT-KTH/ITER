bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [BUGGY]    w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	5	None	replace
2	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  w[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]    =    size.width;    w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
3	[BUG]  [BUGGY]  w[2]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  w[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]    =    size.width;    w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
4	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
5	[BUG]  [BUGGY]  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
6	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
7	[BUG]  [BUGGY]  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
8	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]    =    size.width;    w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
9	[BUG]  [BUGGY]  w[3]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]    =    size.width;    w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
10	[BUG]  [BUGGY]  w[3]  =  size.width;  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]    =    size.width;    Size2D  size  =  this.centerBlock.arrange(g2,  c4);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	add
11	[BUG]  [BUGGY]  w[3]  =  size.width;  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]    =    size.width;    Size2D  size  =  this.centerBlock.arrange(g2,  c3);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	add
12	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
13	[BUG]  [BUGGY]  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
14	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
15	[BUG]  [BUGGY]  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
17	[BUG]  [BUGGY]  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  w[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]    =    size.width;    w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
19	[BUG]  [BUGGY]  w[3]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[3]  =  size.width;  w[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]    =    size.width;    w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
20	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  h[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]    =    size.width;    h[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
21	[BUG]  [BUGGY]  w[2]  =  size.width;  h[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]  w[2]  =  size.width;  h[2]  =  size.width;  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]    =    size.width;    h[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
22	[BUG]  [BUGGY]      g2.setPaint(this.centerBlock.getPaint());  [CE]  cannot  find  symbol  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);    [BUGGY]      g2.setPaint(this.centerBlock.getPaint());  [BUGGY]    h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	        g2.setPaint(this.centerBlock.getPaint());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
