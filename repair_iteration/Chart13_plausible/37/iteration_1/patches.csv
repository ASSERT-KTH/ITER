bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  [CE]  cannot  find  symbol  c3  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  c3	9	None	replace
2	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  [CE]  cannot  find  symbol  c1  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  c1	9	None	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
4	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
6	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
8	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
9	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	        w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
10	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
11	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth();  if(constraint.getWidth()!=  LengthConstraintType.FIXED)  {  w[2]  =  constraint.getWidth();  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  if(constraint.getWidth()!=  LengthConstraintType.FIXED)  {  w[2]  =  constraint.getWidth();  }  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth();    if(constraint.getWidth()!=  LengthConstraintType.FIXED)  {  w[2]  =  constraint.getWidth();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	13	None	add
12	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth();  if(constraint.getWidth()!=  LengthConstraintType.RANGE)  {  w[2]  =  constraint.getWidth();  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  if(constraint.getWidth()!=  LengthConstraintType.RANGE)  {  w[2]  =  constraint.getWidth();  }  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth();    if(constraint.getWidth()!=  LengthConstraintType.RANGE)  {  w[2]  =  constraint.getWidth();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	13	None	add
13	[BUG]  [BUGGY]      Size2D  size  =  this.rightBlock.arrange(g2,  c4);  [CE]  cannot  find  symbol  c4  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      Size2D  size  =  this.rightBlock.arrange(g2,  c4);  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        Size2D  size  =  this.rightBlock.arrange(g2,  c4);	  	non-compiled	[CE]  cannot  find  symbol  c4	5	None	add
14	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[1]  =  size.width;  [CE]  cannot  find  symbol  c3  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[1]  =  size.width;  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[1]  =  size.width;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[1]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  c3	10	None	replace
15	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[1]  =  size.width;  }  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[1]  =  size.width;  }  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[1]  =  size.width;  }	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[1]    =    size.width;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
17	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[2]  =  constraint.getHeight();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getHeight();	      w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	replace
19	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[2]  =  constraint.getHeight();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getHeight();	      w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	replace
20	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[1]  =  constraint.getWidth();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[1]  =  constraint.getWidth();	      w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	replace
21	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[1]  =  constraint.getWidth();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]  =  constraint.getWidth();	      w[2]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	replace
22	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
23	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
24	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
25	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
26	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  [CE]  cannot  find  symbol  c1  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);	      Size2D    size    =    this.rightBlock.arrange(g2,    c2);    	non-compiled	[CE]  cannot  find  symbol  c1	8	None	replace
27	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	      w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	replace
28	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	      w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	replace
29	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
30	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
31	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
32	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
33	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
34	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
35	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  [CE]  cannot  find  symbol  c2  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  h[1]  =  size.height;  }	  	non-compiled	[CE]  cannot  find  symbol  c2	5	None	add
36	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [CE]  cannot  find  symbol  c3  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  }	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  c3	9	None	replace
37	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
38	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
39	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth();  if(constraint!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  constraint.getWidth();  }  [CE]  cannot  find  symbol  c2  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  if(constraint!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  constraint.getWidth();  }  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth();    if(constraint!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  constraint.getWidth();  }	  	non-compiled	[CE]  cannot  find  symbol  c2	13	None	add
40	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth();  if(constraint!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  constraint.getWidth();  }  [CE]  cannot  find  symbol  c2  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  if(constraint!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  constraint.getWidth();  }  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth();    if(constraint!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  constraint.getWidth();  }	  	non-compiled	[CE]  cannot  find  symbol  c2	13	None	add
41	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
42	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
43	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
44	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
45	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[1]  =  size.width;  [CE]  cannot  find  symbol  c2  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[1]  =  size.width;  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[1]  =  size.width;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[1]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  c2	10	None	replace
46	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
47	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
48	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
49	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
50	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
51	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
52	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
53	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
54	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FI  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FI  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	if(this.rightBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FI	      	non-compiled	[CE]  ')'  expected	6	None	replace
55	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	if(this.rightBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED	      	non-compiled	[CE]  ')'  expected	6	None	replace
56	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	      w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	replace
57	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	      w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	replace
58	[BUG]  [BUGGY]  w[2]  =  size.width;  [CE]  cannot  find  symbol  size  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[2]  =  size.width;  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  size.width;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  size	9	None	replace
59	[BUG]  [BUGGY]  w[1]  =  size.width;  [CE]  cannot  find  symbol  size  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]  w[1]  =  size.width;  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]  =  size.width;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[1]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  size	10	None	replace
60	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	        w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
61	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
62	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	        w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
63	[BUG]  [BUGGY]      w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [BUGGY]    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
64	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }    [BUGGY]      if(this.rightBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  [BUGGY]    if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	        if(this.rightBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,	  	non-compiled	[CE]  ')'  expected	5	None	add
