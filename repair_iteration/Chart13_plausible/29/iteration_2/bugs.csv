bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
2	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	12	1	replace
4	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	12	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);	      double    height    =    h[0]    +    h[1]    +    Math.max(h[3],    h[4]);    	compilable	  [FE]  AssertionFailedError  	8	1	replace
6	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);	      double    height    =    h[0]    +    h[1]    +    Math.max(h[3],    h[4]);    	compilable	  [FE]  AssertionFailedError  	8	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
8	[BUG]  [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
10	[BUG]  [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
12	[BUG]  [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
13	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	      h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	10	None	replace
14	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.min(w[2],  Math.max(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]      AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  h[0]  =  h[1]  +  Math.min(w[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  h[1]  +  Math.min(w[2],  Math.max(h[3],  h[4]));	      h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	10	None	replace
15	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	11	None	add
16	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	11	None	add
17	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.min(h[3],  h[4]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.min(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  ';'  expected	11	None	add
18	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	add
19	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	add
20	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  Double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  Double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    Double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	add
21	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	3	None	add
22	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	3	None	add
23	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  Double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  Double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    Double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	3	None	add
24	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  h[4]  =  size.height;  [CE]  cannot  find  symbol  c4  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  h[4]  =  size.height;  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c4);  h[4]  =  size.height;	      	non-compiled	[CE]  cannot  find  symbol  c4	5	None	replace
25	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  w);  [CE]  no  suitable  method  found  for  arrange(Graphics2D,double[])  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  w);  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  w);	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,double[])	6	None	replace
26	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  w[4]);  [CE]  no  suitable  method  found  for  arrange(Graphics2D,double)  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  w[4]);  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  w[4]);	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,double)	6	None	replace
27	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  [CE]  cannot  find  symbol  c3  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c3);	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  cannot  find  symbol  c3	6	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
29	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
30	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	11	None	add
31	[BUG]  [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4));  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4));	  	non-compiled	[CE]  ']'  expected	9	None	add
32	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  [CE]  cannot  find  symbol  height  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c2);	      	non-compiled	[CE]  cannot  find  symbol  height	5	None	replace
33	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);	      double    height    =    h[0]    +    h[1]    +    Math.max(h[3],    h[4]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
34	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);	      double    height    =    h[0]    +    h[1]    +    Math.max(h[3],    h[4]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
35	[BUG]  [BUGGY]  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	      h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	10	None	replace
36	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  ';'  expected	3	None	add
37	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	add
38	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  ';'  expected	1	None	add
39	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	      h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	10	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	12	1	replace
41	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	12	1	replace
42	[BUG]  [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  c4);  [CE]  cannot  find  symbol  c4  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  c4);  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	RectangleConstraint  height  =  this.centerBlock.arrange(g2,  c4);	      	non-compiled	[CE]  cannot  find  symbol  c4	5	None	replace
43	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [CE]  cannot  find  symbol  height  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);	      Size2D    size    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  cannot  find  symbol  height	6	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
45	[BUG]  [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]      h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
46	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	3	None	add
47	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[1]  +  h[3]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    AssertionFailedError    [CONTEXT]    h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }    [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[1]  +  h[3]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]    return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double  height  =  h[1]  +  h[3]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	11	None	add
