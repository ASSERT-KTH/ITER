bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(w[2]  -  this.centerBlock[2]  -  this.centerBlock[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CE]  array  required,  but  Block  found  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(w[2]  -  this.centerBlock[2]  -  this.centerBlock[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(w[2]  -  this.centerBlock[2]  -  this.centerBlock[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);	  RectangleConstraint    c4    =    new    RectangleConstraint(width    -    this.centerBlock[2]    -    w[3],    null,    LengthConstraintType.FIXED,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  array  required,  but  Block  found	5	None	replace
2	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  this.centerBlock[2]  -  this.w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CE]  array  required,  but  Block  found  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  this.centerBlock[2]  -  this.w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  this.centerBlock[2]  -  this.w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);	  RectangleConstraint    c4    =    new    RectangleConstraint(width    -    this.centerBlock[2]    -    w[3],    null,    LengthConstraintType.FIXED,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  array  required,  but  Block  found	5	None	replace
3	[BUG]  [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c1);  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]      -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,          LengthConstraintType.NONE);  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	Size2D  w[2]  =  this.centerBlock.arrange(g2,  c1);	      Size2D    w[2]    =    this.centerBlock.arrange(g2,    c2);    	non-compiled	[CE]  ']'  expected	6	None	replace
4	[BUG]  [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]      -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,          LengthConstraintType.NONE);  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	Size2D  w[2]  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;	      Size2D    w[2]    =    this.centerBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  ']'  expected	3	None	replace
5	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  0,  length,  LengthConstraintType.NONE);  [CE]  cannot  find  symbol  length  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  0,  length,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  0,  length,  LengthConstraintType.NONE);	  RectangleConstraint    c4    =    new    RectangleConstraint(width    -    w[2]    -    w[3],    null,    LengthConstraintType.FIXED,    0,    0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  cannot  find  symbol  length	4	None	replace
6	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]      -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,          LengthConstraintType.NONE);  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);	      Size2D    size    =    this.centerBlock.arrange(g2,    c3);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	2	None	replace
7	[BUG]  [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  Math.max(w[2],  w[3]);  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]      -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,          LengthConstraintType.NONE);  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	Size2D  w[2]  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  Math.max(w[2],  w[3]);	      Size2D    w[2]    =    this.centerBlock.arrange(g2,    c3);    w[3]    =    Math.max(w[2],    w[3]);    	non-compiled	[CE]  ']'  expected	7	None	replace
8	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  this.centerBlock,  0,  0,  null,  LengthConstraintType.NONE);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,<null>,Block,int,int,<null>,LengthConstraintType)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  this.centerBlock,  0,  0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  this.centerBlock,  0,  0,  null,  LengthConstraintType.NONE);	  RectangleConstraint    c4    =    new    RectangleConstraint(width    -    w[2]    -    w[3],    null,    LengthConstraintType.FIXED,    0,    0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,<null>,Block,int,int,<null>,LengthConstraintType)	4	None	replace
9	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  this.centerBlock,  0,  0,  null,  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,<null>,Block,int,int,<null>,LengthConstraintType)  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  this.centerBlock,  0,  0,  null,  LengthConstraintType.FIXED);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  this.centerBlock,  0,  0,  null,  LengthConstraintType.FIXED);	  RectangleConstraint    c4    =    new    RectangleConstraint(width    -    w[2]    -    w[3],    null,    LengthConstraintType.FIXED,    0,    0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,<null>,Block,int,int,<null>,LengthConstraintType)	4	None	replace
10	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  this.centerBlock[2]  -  this.rightBlock[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CE]  array  required,  but  Block  found  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  this.centerBlock[2]  -  this.rightBlock[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  this.centerBlock[2]  -  this.rightBlock[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);	  RectangleConstraint    c4    =    new    RectangleConstraint(width    -    this.centerBlock[2]    -    w[3],    null,    LengthConstraintType.FIXED,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  array  required,  but  Block  found	5	None	replace
11	[BUG]  [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  Math.max(w[2],  w[3]);  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]      -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,          LengthConstraintType.NONE);  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	Size2D  w[2]  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  Math.max(w[2],  w[3]);	      Size2D    w[2]    =    this.centerBlock.arrange(g2,    c3);    w[3]    =    Math.max(w[2],    w[3]);    	non-compiled	[CE]  ']'  expected	7	None	replace
12	[BUG]  [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  Size2D  w[2]  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]      -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,          LengthConstraintType.NONE);  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	Size2D  w[2]  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;	      Size2D    w[2]    =    this.centerBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  ']'  expected	3	None	replace
13	[BUG]  [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  0,  null,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.N  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {    [BUGGY]  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  0,  null,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.N  [BUGGY]    -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	replace	RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0,  0,  null,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.N	  RectangleConstraint    c4    =    new    RectangleConstraint(width    -    w[2]    -    w[3],    null,    LengthConstraintType.FIXED,    0,    0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	4	None	replace
