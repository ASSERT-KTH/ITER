bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Size2D  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth(),  w);  [CE]  variable  contentSize  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  Size2D  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth(),  w);  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	Size2D  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth(),  w);	  Size2D    contentSize    =    arrangeFF(container,    g2,    constraint.getHeight(),    w);    	non-compiled	[CE]  variable  contentSize  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)	3	None	replace
2	[BUG]  [BUGGY]  Size2D  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight(),  h);  [CE]  variable  contentSize  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  Size2D  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight(),  h);  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	Size2D  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight(),  h);	  Size2D    contentSize    =    arrangeFF(container,    g2,    constraint.getHeight(),    w);    	non-compiled	[CE]  variable  contentSize  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)	3	None	replace
3	[BUG]  [BUGGY]  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  [CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    	non-compiled	[CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;	10	None	replace
4	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  'else'  without  'if'  [FE]          StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    else    if(h    ==    LengthConstraintType.NONE)    {    contentSize    =    arrangeFF(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
5	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  'else'  without  'if'  [FE]            StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    else    if(h    ==    LengthConstraintType.NONE)    {    contentSize    =    arrangeFF(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
6	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	add	contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());	  	compilable	  [FE]  StackOverflowError  	9	1	add
7	[BUG]  [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());	  	compilable	  [FE]  StackOverflowError  	9	1	add
8	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	add	contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());	  	compilable	  [FE]  StackOverflowError  	9	1	add
9	[BUG]  [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());	  	compilable	  [FE]  StackOverflowError  	9	1	add
10	[BUG]  [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2.getHeight());  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2.getHeight());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2.getHeight());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
11	[BUG]  [BUGGY]  ContentConstraint  <  LengthConstraintType>  contentConstraint  =  arrangeFN(container,  g2,  constraint.getHeight());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  ContentConstraint  <  LengthConstraintType>  contentConstraint  =  arrangeFN(container,  g2,  constraint.getHeight());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	ContentConstraint  <  LengthConstraintType>  contentConstraint  =  arrangeFN(container,  g2,  constraint.getHeight());	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    ContentConstraint    <    LengthConstraintType>    contentConstraint    =    arrangeFN(container,    g2,    constraint.getHeight());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	11	None	replace
12	[BUG]  [BUGGY]  contentSize  =  arrangeFR(container,  g2,  constraint.getHeight(),  w);  [CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFR(container,  g2,  constraint.getHeight(),  w);  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize  =  arrangeFR(container,  g2,  constraint.getHeight(),  w);	  contentSize    =    arrangeFR(container,    g2,    constraint.getHeight());    	non-compiled	[CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;	1	None	replace
13	[BUG]  [BUGGY]  contentSize  =  arrangeNN(container,  g2,  constraint.getHeight());  [CE]  method  arrangeNN  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeNN(container,  g2,  constraint.getHeight());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize  =  arrangeNN(container,  g2,  constraint.getHeight());	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize    =    arrangeNN(container,    g2,    constraint.getHeight());    	non-compiled	[CE]  method  arrangeNN  in  class  BorderArrangement  cannot  be  applied  to  given  types;	16	None	replace
14	[BUG]  [BUGGY]  LengthConstraintType  h  =  constraint.getWidth()  -  1;  [CE]  variable  h  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  LengthConstraintType  h  =  constraint.getWidth()  -  1;  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	LengthConstraintType  h  =  constraint.getWidth()  -  1;	  LengthConstraintType    h    =    constraint.getHeight()    -    1;    	non-compiled	[CE]  variable  h  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)	14	None	replace
15	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getHeight());  }  [CE]  'else'  without  'if'  [FE]        StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getHeight());  }  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getHeight());  }	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    else    if(h    ==    LengthConstraintType.NONE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
16	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }  [CE]  'else'  without  'if'  [FE]          StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    else    if(h    ==    LengthConstraintType.NONE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
17	[BUG]  [BUGGY]  LengthConstraintType  w  =  constraint.getWidth()  +  1;  [CE]  variable  w  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  LengthConstraintType  w  =  constraint.getWidth()  +  1;  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	LengthConstraintType  w  =  constraint.getWidth()  +  1;	  LengthConstraintType    w    =    constraint.getHeight()    +    1;    	non-compiled	[CE]  variable  w  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)	5	None	replace
18	[BUG]  [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth(),  w);  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth(),  w);  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize  =  arrangeFF(container,  g2,  constraint.getWidth(),  w);	  contentSize    =    arrangeFF(container,    g2,    constraint.getHeight(),    w);    	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	7	None	replace
19	[BUG]  [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight(),  w,  LengthConstraintType.RANGE);  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight(),  w,  LengthConstraintType.RANGE);  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize  =  arrangeFF(container,  g2,  constraint.getHeight(),  w,  LengthConstraintType.RANGE);	  contentSize    =    arrangeFF(container,    g2,    constraint.getHeight(),    w);    	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	7	None	replace
20	[BUG]  [BUGGY]  contentSize  =  arrangeF(container,  g2,  constraint.getWidth());  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeF(container,  g2,  constraint.getWidth());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize  =  arrangeF(container,  g2,  constraint.getWidth());	  contentSize    =    arrangeF(container,    g2,    constraint.getHeight());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
21	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	add	contentSize    =    arrangeFN(container,    g2,    constraint.getWidth());    contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());	  	compilable	  [FE]  StackOverflowError  	12	1	add
22	[BUG]  [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize    =    arrangeFN(container,    g2,    constraint.getWidth());    contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());	  	compilable	  [FE]  StackOverflowError  	12	1	add
23	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	add	contentSize    =    arrangeFN(container,    g2,    constraint.getWidth());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());	  	compilable	  [FE]  StackOverflowError  	12	1	add
24	[BUG]  [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize    =    arrangeFN(container,    g2,    constraint.getWidth());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());	  	compilable	  [FE]  StackOverflowError  	12	1	add
25	[BUG]  [BUGGY]  LengthConstraintType  h  =  constraint.getWidth()  +  1;  [CE]  variable  h  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  LengthConstraintType  h  =  constraint.getWidth()  +  1;  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	LengthConstraintType  h  =  constraint.getWidth()  +  1;	  LengthConstraintType    h    =    constraint.getHeight()    +    1;    	non-compiled	[CE]  variable  h  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)	4	None	replace
26	[BUG]  [BUGGY]  Size2D  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight(),  w);  [CE]  variable  contentSize  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  Size2D  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight(),  w);  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	Size2D  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight(),  w);	  Size2D    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    	non-compiled	[CE]  variable  contentSize  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)	15	None	replace
27	[BUG]  [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight(),  h);  [CE]  method  arrangeFN  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight(),  h);  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize  =  arrangeFN(container,  g2,  constraint.getHeight(),  h);	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize    =    arrangeNN(container,    g2,    constraint.getHeight());    	non-compiled	[CE]  method  arrangeFN  in  class  BorderArrangement  cannot  be  applied  to  given  types;	16	None	replace
28	[BUG]  [BUGGY]  LengthConstraintType  constraint  =(LengthConstraintType)h.clone();  [CE]  variable  constraint  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  LengthConstraintType  constraint  =(LengthConstraintType)h.clone();  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	LengthConstraintType  constraint  =(LengthConstraintType)h.clone();	  LengthConstraintType    constraint    =(LengthConstraintType)constraint.clone();    	non-compiled	[CE]  variable  constraint  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)	19	None	replace
29	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [CE]  'else'  without  'if'  [FE]          StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    else    if(h    ==    LengthConstraintType.NONE)    {    contentSize    =    arrangeFF(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
30	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	add	contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());	  	compilable	  [FE]  StackOverflowError  	9	1	add
31	[BUG]  [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());	  	compilable	  [FE]  StackOverflowError  	9	1	add
32	[BUG]  [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight(),  h);  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight(),  h);  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize  =  arrangeFF(container,  g2,  constraint.getHeight(),  h);	  contentSize    =    arrangeFF(container,    g2,    constraint.getHeight(),    w);    	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	7	None	replace
33	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  'else'  without  'if'  [FE]          StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    else    if(h    ==    LengthConstraintType.NONE)    {    contentSize    =    arrangeFF(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
34	[BUG]  [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  else  if(h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [CE]  'else'  without  'if'  [FE]    StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  else  if(h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize    =    arrangeFN(container,    g2,    constraint.getWidth());    else  if(h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  'else'  without  'if'	12	None	add
35	[BUG]  [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize    =    arrangeFN(container,    g2,    constraint.getWidth());    contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	12	None	add
36	[BUG]  [BUGGY]  Size2D  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth(),  w);  [CE]  variable  contentSize  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  Size2D  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth(),  w);  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	Size2D  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth(),  w);	  Size2D    contentSize    =    arrangeFN(container,    g2,    constraint.getWidth());    	non-compiled	[CE]  variable  contentSize  is  already  defined  in  method  arrange(BlockContainer,Graphics2D,RectangleConstraint)	8	None	replace
37	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [CE]  'else'  without  'if'  [FE]        StackOverflowError      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    else    if(h    ==    LengthConstraintType.NONE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
38	[BUG]  [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth(),  h);  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {      [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth(),  h);  [BUGGY]      }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	contentSize  =  arrangeFF(container,  g2,  constraint.getWidth(),  h);	  contentSize    =    arrangeFF(container,    g2,    constraint.getWidth());    	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	6	None	replace
