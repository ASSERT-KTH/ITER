bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	      else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFF(container,    g2,    constraint.getWidth());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	      else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFF(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  else  if(w  ==  LengthConstraintType.FIXED)  {  [CE]  'else'  without  'if'  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  else  if(w  ==  LengthConstraintType.FIXED)  {  [BUGGY]    contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else    if(w    ==    LengthConstraintType.FIXED)    {    else  if(w  ==  LengthConstraintType.FIXED)  {	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
4	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  else  if(h  ==  LengthConstraintType.FIXED)  {  [CE]  'else'  without  'if'  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  else  if(h  ==  LengthConstraintType.FIXED)  {  [BUGGY]    contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else    if(w    ==    LengthConstraintType.FIXED)    {    else  if(h  ==  LengthConstraintType.FIXED)  {	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
5	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  else  if(w!=  LengthConstraintType.FIXED)  {  [CE]  'else'  without  'if'  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  else  if(w!=  LengthConstraintType.FIXED)  {  [BUGGY]    contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else    if(w    ==    LengthConstraintType.FIXED)    {    else  if(w!=  LengthConstraintType.FIXED)  {	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
6	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	      else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
8	[BUG]  [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
9	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
10	[BUG]  [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [FE]  StackOverflowError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  StackOverflowError  	8	1	add
11	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
12	[BUG]  [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
13	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	      else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFF(container,    g2,    constraint.getWidth());    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  StackOverflowError  	3	1	add
15	[BUG]  [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  StackOverflowError  	3	1	add
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
17	[BUG]  [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
18	[BUG]  [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	3	None	add
19	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	      else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	3	None	add
21	[BUG]  [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	8	None	add
22	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  else  if(w  >=  LengthConstraintType.FIXED)  {  [CE]  'else'  without  'if'  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  else  if(w  >=  LengthConstraintType.FIXED)  {  [BUGGY]    contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else    if(w    ==    LengthConstraintType.FIXED)    {    else  if(w  >=  LengthConstraintType.FIXED)  {	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
23	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  StackOverflowError  	3	1	add
24	[BUG]  [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    throw  new  RuntimeException(   "Not  implemented.   ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }    [BUGGY]      else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]    else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(   "Not  implemented.   ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }	  	compilable	  [FE]  StackOverflowError  	3	1	add
