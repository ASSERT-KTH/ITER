bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }		non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	8	None	add
2	[BUG]  [BUGGY]    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }		non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	8	None	add
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
4	[BUG]  [BUGGY]    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	else  if(w  ==  LengthConstraintType.FIXED)  {	else  if  (h  ==  LengthConstraintType.FIXED)  {  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
6	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(w  ==  LengthConstraintType.FIXED)  {	else  if  (h  ==  LengthConstraintType.FIXED)  {  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
7	[BUG]  [BUGGY]    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }		non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	8	None	add
8	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
9	[BUG]  [BUGGY]    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
10	[BUG]  [BUGGY]    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }		non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	8	None	add
11	[BUG]  [BUGGY]    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }		non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	8	None	add
