bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c4);    w[3]    =    size.width;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	15	None	replace
2	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c4);    w[3]    =    size.width;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	15	None	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
4	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
6	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
8	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
9	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[1];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getWidth()    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
10	[BUG]  [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[1];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getWidth()    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
11	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    w[2]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
12	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    w[2]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
13	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[3]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    w[2]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
14	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[3]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    w[2]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
15	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c4);    w[3]    =    size.width;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	23	None	replace
16	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c4);    w[3]    =    size.width;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	23	None	replace
17	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getWidth()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[2]    =    constraint.getWidth()    -    w[3];    h[2]  =  constraint.getWidth()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	add
18	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getWidth()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getWidth()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]    =    constraint.getWidth()    -    w[3];    h[2]  =  constraint.getWidth()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	add
19	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  w[2]  =  constraint.getWidth()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[2]    =    constraint.getWidth()    -    w[3];    w[2]  =  constraint.getWidth()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	add
20	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  w[2]  =  constraint.getWidth()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  w[2]  =  constraint.getWidth()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]    =    constraint.getWidth()    -    w[3];    w[2]  =  constraint.getWidth()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	add
21	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  b[2]  =  constraint.getWidth()  -  w[3];  [CE]  cannot  find  symbol  b  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  b[2]  =  constraint.getWidth()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]    =    constraint.getWidth()    -    w[3];    b[2]  =  constraint.getWidth()  -  w[3];	  	non-compiled	[CE]  cannot  find  symbol  b	19	None	add
22	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.width;  w[1]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[4]  =  size.width;  w[1]  =  size.width;	  w[2]    =    size.width;    w[1]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	replace
23	[BUG]  [BUGGY]  w[4]  =  size.width;  w[1]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.width;  w[1]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[4]  =  size.width;  w[1]  =  size.width;	  w[2]    =    size.width;    w[1]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	replace
24	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
25	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
26	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
27	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
28	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
29	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
30	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[3]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
31	[BUG]  [BUGGY]  h[3]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[3]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
32	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]        =        size.width;        w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
33	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
34	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  Size.width;  w[3]  =  size.width;  [CE]  cannot  find  symbol  Size  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  Size.width;  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    w[2]  =  Size.width;  w[3]  =  size.width;	  	non-compiled	[CE]  cannot  find  symbol  Size	6	None	add
35	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  Size.width;  [CE]  cannot  find  symbol  Size  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  Size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  Size.width;	  	non-compiled	[CE]  cannot  find  symbol  Size	6	None	add
36	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	add
37	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	add
38	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[2]    =    constraint.getHeight()    -    w[2];    w[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	add
39	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]    =    constraint.getHeight()    -    w[2];    w[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	add
40	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  b[2]  =  constraint.getHeight()  -  w[2];  [CE]  cannot  find  symbol  b  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  b[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]    =    constraint.getHeight()    -    w[2];    b[2]  =  constraint.getHeight()  -  w[2];	  	non-compiled	[CE]  cannot  find  symbol  b	17	None	add
41	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
42	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
43	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
44	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
45	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
46	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
47	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
48	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
49	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
50	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
51	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
52	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[4]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
53	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  size.  [CE]  <identifier>  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  size.  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c4);  size.	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    else    {    Size2D    size    =    this.rightBlock.arrange(g2,    c4);    size.    	non-compiled	[CE]  <identifier>  expected	16	None	replace
54	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
55	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
56	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
57	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
58	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
59	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
60	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	replace
61	[BUG]  [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	replace
62	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.width;  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[4]  =  size.width;  w[3]  =  size.width;	  w[2]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
63	[BUG]  [BUGGY]  w[4]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.width;  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[4]  =  size.width;  w[3]  =  size.width;	  w[2]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
64	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]        =        size.width;        w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
65	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
66	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]        =        size.width;        w[2]    =    size.width;    if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
67	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
68	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[2]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]        =        size.width;        w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
69	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[2]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
70	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[3]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[3]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
71	[BUG]  [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[3]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[3]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
72	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[4]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[4]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[3]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
73	[BUG]  [BUGGY]  h[4]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[4]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[4]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[3]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
74	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  w[2]  =  size.width;  w[1]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]        =        size.width;        w[1]    =    size.width;    w[2]  =  size.width;  w[1]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
75	[BUG]  [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  w[2]  =  size.width;  w[1]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  w[2]  =  size.width;  w[1]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[1]    =    size.width;    w[2]  =  size.width;  w[1]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
76	[BUG]  [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  w[2]  =  size.width;  w[1]  =  Size.width;  [CE]  cannot  find  symbol  Size  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  w[2]  =  size.width;  w[1]  =  Size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[1]    =    size.width;    w[2]  =  size.width;  w[1]  =  Size.width;	  	non-compiled	[CE]  cannot  find  symbol  Size	30	None	add
77	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]        =        size.width;        w[1]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
78	[BUG]  [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[1]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
79	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
80	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
81	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
82	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
83	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c4);    w[3]    =    size.width;    }    else    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	24	None	replace
84	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c4);    w[3]    =    size.width;    }    else    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
85	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  w[2]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	4	None	add
86	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[2]  =  size.width;  w[2]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[2]  =  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	4	None	add
87	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[2]  =  constraint.getHeight()  -  w[3];	  h[2]    =    constraint.getWidth()    -    w[3];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	replace
88	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]  =  constraint.getHeight()  -  w[3];	  h[2]    =    constraint.getWidth()    -    w[3];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	replace
89	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  +  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  +  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
90	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  +  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  +  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  +  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
91	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
92	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[3]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
93	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  size.  [CE]  <identifier>  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  size.  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  size.	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    else    {    Size2D    size    =    this.rightBlock.arrange(g2,    c4);    size.    	non-compiled	[CE]  <identifier>  expected	16	None	replace
94	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	if(this.leftBlock!=  null)  {  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }	  w[2]    =    size.width;    if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[2]    =    size.width;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
95	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }	  w[2]    =    size.width;    if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[2]    =    size.width;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	28	None	replace
96	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[2]    =    constraint.getWidth()    -    w[3];    h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	add
97	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]    =    constraint.getWidth()    -    w[3];    h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	add
98	[BUG]  [BUGGY]  w[2]  =  size.width;  w[3]  =  size.leftBlock;  [CE]  cannot  find  symbol  leftBlock  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  size.width;  w[3]  =  size.leftBlock;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]  =  size.width;  w[3]  =  size.leftBlock;	  w[2]    =    size.width;    w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  leftBlock	7	None	replace
99	[BUG]  [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[1]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  w[3]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[1]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[1]    =    size.width;    if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[1]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  w[3]  =  size.width;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	30	None	add
100	[BUG]  [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[1]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  w[2]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[1]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[1]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[1]    =    size.width;    if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[1]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	30	None	add
101	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
102	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
103	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
104	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  h[1]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
105	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight())  -  w[2];  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight())  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getHeight())  -  w[2];	  	non-compiled	[CE]  ';'  expected	17	None	add
106	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
107	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
108	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
109	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
110	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
111	[BUG]  [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[3]  =  constraint.getWidth()  -  w[2];  h[3]  =  constraint.getHeight()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
112	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	6	None	add
113	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	6	None	add
114	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
115	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[3];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    h[2]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
116	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[2]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[2]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	if(this.leftBlock!=  null)  {  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[2]  =  size.width;  }	  w[2]    =    size.width;    if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c4);    w[2]    =    size.width;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
117	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[2]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[2]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[2]  =  size.width;  }	  w[2]    =    size.width;    if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c4);    w[2]    =    size.width;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	27	None	replace
118	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]        =        size.width;        w[3]    =    size.width;    if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
119	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    if(this.leftBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
120	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c5);  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c5);  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c5);	  Size2D    size    =    this.leftBlock.arrange(g2,    c3);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	21	None	replace
121	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	add
122	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	add
123	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
124	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getHeight()    -    w[2];    h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	add
125	[BUG]  [BUGGY]  w[2]  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CE]  incompatible  types  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c4);    w[3]    =    size.width;    }    else    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    	non-compiled	[CE]  incompatible  types	24	None	replace
126	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[4]  =  size.width;  w[2]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]        =        size.width;        w[2]    =    size.width;    w[4]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
127	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[4]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[4]  =  size.width;  w[2]  =  size.width;  [BUGGY]      }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    w[4]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
128	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getWidth()    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
129	[BUG]  [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getWidth()    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
130	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
131	[BUG]  [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]          h[2]    =    constraint.getWidth()    -    w[2];    h[2]  =  constraint.getWidth()  -  w[1];  h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	                h[2]        =        constraint.getWidth()        -        w[2];        h[2]    =    constraint.getWidth()    -    w[1];    h[2]  =  constraint.getWidth()  +  w[2];  h[2]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
132	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
133	[BUG]  [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);      [BUGGY]  h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	h[3]  =  constraint.getWidth()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	          h[2]    =    constraint.getWidth()    -    w[2];    h[2]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	replace
