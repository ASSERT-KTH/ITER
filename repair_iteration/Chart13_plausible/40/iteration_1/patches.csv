bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	add	Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;	      if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
2	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;	      if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
3	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CE]  cannot  find  symbol  c4  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;	      Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  c4	4	None	replace
4	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]      if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	add	        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
5	[BUG]  [BUGGY]      if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]      if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
6	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]      if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	add	        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
7	[BUG]  [BUGGY]      if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]      if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
8	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CE]  cannot  find  symbol  c4  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;	      Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  c4	3	None	replace
9	[BUG]  [BUGGY]      if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[3]  =  size.width;  }  [CE]  cannot  find  symbol  c2  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]      if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[3]  =  size.width;  }  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[3]  =  size.width;  }	  	non-compiled	[CE]  cannot  find  symbol  c2	5	None	add
10	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  c3);  [CE]  no  suitable  method  found  for  arrange(Graphics2D,RectangleConstraint,RectangleConstraint)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  c3);  [BUGGY]    w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c3,  c3);	  Size2D    size    =    this.leftBlock.arrange(g2,    c4);    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,RectangleConstraint,RectangleConstraint)	1	None	replace
11	[BUG]  [BUGGY]  w[3]  =  size.width;  [CE]  cannot  find  symbol  size  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	w[3]  =  size.width;	      Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  size	3	None	replace
12	[BUG]  [BUGGY]  w[2]  =  size.width;  [CE]  cannot  find  symbol  size  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);    [BUGGY]  w[2]  =  size.width;  [BUGGY]    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	w[2]  =  size.width;	      if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  size	6	None	replace
