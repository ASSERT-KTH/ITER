bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[2]);    RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	4	None	add
2	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[2]);    if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	4	None	add
3	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[2]);    if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	4	None	add
4	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  [CE]  cannot  find  symbol  c5  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    	non-compiled	[CE]  cannot  find  symbol  c5	25	None	replace
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
6	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
8	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
9	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
10	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
11	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[3]);    RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	46	None	add
12	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[3]);    if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	46	None	add
13	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[3]);    if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	46	None	add
14	[BUG]  [BUGGY]  h[4]  =  constraint.getHeight()  -  w[2];  [CE]  cannot  find  symbol  c5  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  h[4]  =  constraint.getHeight()  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	h[4]  =  constraint.getHeight()  -  w[2];	  h[4]    =    constraint.getHeight()    -    w[3];    	non-compiled	[CE]  cannot  find  symbol  c5	26	None	replace
15	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c5);  [CE]  cannot  find  symbol  c5  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c5);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c5);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    if(this.leftBlock!=    null)    {    this.leftBlock.arrange(g2,    c5);    }    	non-compiled	[CE]  cannot  find  symbol  c5	52	None	replace
16	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[3]);    RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	13	None	add
17	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[3]);    if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	13	None	add
18	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c5);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c5);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[3]);    if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }  else  {  Size2D  size  =  this.rightBlock.arrange(g2,  c5);	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
19	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    	non-compiled	[CE]  cannot  find  symbol  c5	36	None	replace
20	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [CE]  cannot  find  symbol  c5  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    	non-compiled	[CE]  cannot  find  symbol  c5	36	None	replace
21	[BUG]  [BUGGY]  h[3]  =  constraint.getHeight()  -  w[4];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  h[3]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	h[3]  =  constraint.getHeight()  -  w[4];	          h[2]    =    constraint.getHeight()    -    w[4];    h[2]    =    constraint.getHeight()    -    w[3];    	non-compiled	[CE]  cannot  find  symbol  c5	23	None	replace
22	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
23	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
24	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
25	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
26	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
27	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
28	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
29	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
30	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
31	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
32	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
33	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
34	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  }  [CE]  cannot  find  symbol  c5  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    if(this.leftBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    }    	non-compiled	[CE]  cannot  find  symbol  c5	16	None	replace
35	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,<null>,LengthConstraintType)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[4],    LengthConstraintType.RANGE,    h[2]);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,<null>,LengthConstraintType)	50	None	replace
36	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[3],  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[3],  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[3],  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[4],    LengthConstraintType.RANGE,    h[2]);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)	50	None	replace
37	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    	non-compiled	[CE]  cannot  find  symbol  c5	34	None	replace
38	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
39	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
40	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
41	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
42	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
43	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
44	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
45	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
46	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
47	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
48	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
49	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    h[4]  =  constraint.getWidth()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
50	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
51	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
52	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
53	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
54	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    h[2]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
55	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    h[2]  =  constraint.getWidth()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
56	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4,  h[4]);  [CE]  cannot  find  symbol  c4  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4,  h[4]);  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c4,  h[4]);	  Size2D    size    =    this.leftBlock.arrange(g2,    h[4]);    	non-compiled	[CE]  cannot  find  symbol  c4	40	None	replace
57	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4,  h);  [CE]  cannot  find  symbol  c4  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4,  h);  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c4,  h);	  Size2D    size    =    this.leftBlock.arrange(g2,    h);    	non-compiled	[CE]  cannot  find  symbol  c4	39	None	replace
58	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  }  [CE]  cannot  find  symbol  c5  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    if(this.rightBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    }    	non-compiled	[CE]  cannot  find  symbol  c5	57	None	replace
59	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[4]);    if(this.leftBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[4]);    }    else    {    this.leftBlock.arrange(g2,    c5);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
60	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c4);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c4);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c4);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[4]);    if(this.leftBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[4]);    }    else    {    this.leftBlock.arrange(g2,    c5);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
61	[BUG]  [BUGGY]  h[3]  =  constraint.getHeight()  -  w[3];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  h[3]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	h[3]  =  constraint.getHeight()  -  w[3];	          h[4]    =    constraint.getHeight()    -    w[4];    h[2]    =    constraint.getHeight()    -    w[4];    	non-compiled	[CE]  cannot  find  symbol  c5	60	None	replace
62	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        w[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
63	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        w[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
64	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        w[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
65	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        w[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
66	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getWidth()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        w[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getWidth()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
67	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getWidth()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getWidth()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        w[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getWidth()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
68	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.FIXED,  h[2],  LengthConstraintType.RANGE);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.FIXED,  h[2],  LengthConstraintType.RANGE);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.FIXED,  h[2],  LengthConstraintType.RANGE);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[4],    LengthConstraintType.RANGE,    h[2],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)	55	None	replace
69	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(h[2],    w[2]);    RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	48	None	add
70	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  if(h[2]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  if(h[2]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(h[2],    w[2]);    if(h[2]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	48	None	add
71	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  if(h[2]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  if(h[2]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(h[2],    w[2]);    if(h[2]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
72	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    	non-compiled	[CE]  cannot  find  symbol  c5	54	None	replace
73	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3],  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3],  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3],  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[4],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType)	56	None	replace
74	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(h[3],    w[3]);    RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	61	None	add
75	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  if(h[3]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  if(h[3]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(h[3],    w[3]);    if(h[3]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	61	None	add
76	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  if(h[3]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  if(h[3]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(h[3],    w[3]);    if(h[3]!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
77	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    if(this.leftBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    }    else    {    this.leftBlock.arrange(g2,    c5);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
78	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c4);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c4);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c4);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    if(this.leftBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    }    else    {    this.leftBlock.arrange(g2,    c5);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
79	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[3];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[3];	          h[4]    =    constraint.getHeight()    -    w[4];    h[4]    =    constraint.getHeight()    -    w[3];    	non-compiled	[CE]  cannot  find  symbol  c5	32	None	replace
80	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[4];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[4]  =  constraint.getHeight()  -  w[4];	          h[4]    =    constraint.getHeight()    -    w[4];    w[4]    =    constraint.getHeight()    -    w[4];    	non-compiled	[CE]  cannot  find  symbol  c5	30	None	replace
81	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[4];  [CE]  cannot  find  symbol  c5  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[3]  =  constraint.getHeight()  -  w[4];	          h[4]    =    constraint.getHeight()    -    w[4];    w[4]    =    constraint.getHeight()    -    w[4];    	non-compiled	[CE]  cannot  find  symbol  c5	30	None	replace
82	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4,  h);  [CE]  cannot  find  symbol  c4  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4,  h);  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c4,  h);	  Size2D    size    =    this.rightBlock.arrange(g2,    h);    	non-compiled	[CE]  cannot  find  symbol  c4	6	None	replace
83	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
84	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
85	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
86	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
87	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
88	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
89	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[3]);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	replace
90	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[3]);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	replace
91	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[2]  =  constraint.getHeight()  -  w[3];	          h[2]    =    constraint.getHeight()    -    w[4];    w[2]    =    constraint.getHeight()    -    w[4];    	non-compiled	[CE]  cannot  find  symbol  c5	21	None	replace
92	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[4];  [CE]  cannot  find  symbol  c5  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[2]  =  constraint.getHeight()  -  w[4];	          h[2]    =    constraint.getHeight()    -    w[4];    w[2]    =    constraint.getHeight()    -    w[4];    	non-compiled	[CE]  cannot  find  symbol  c5	21	None	replace
93	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3]);    if(this.leftBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3]);    }    else    {    this.leftBlock.arrange(g2,    c5);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
94	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c4);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c4);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c4);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3]);    if(this.leftBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3]);    }    else    {    this.leftBlock.arrange(g2,    c5);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
95	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[3]);	  RectangleConstraint    c5    =    new    RectangleConstraint(h[3],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	replace
96	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[3]);	  RectangleConstraint    c5    =    new    RectangleConstraint(h[3],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	replace
97	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[2]);    RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	10	None	add
98	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[2]);    if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	10	None	add
99	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[2]);    if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	10	None	add
100	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[4]);    RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	8	None	add
101	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[4]);    if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	8	None	add
102	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[4]);    if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }  else  {  this.leftBlock.arrange(g2,  c5);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	8	None	add
103	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  LengthConstraintType.RANGE,  h[3],  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,LengthConstraintType,double,LengthConstraintType)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  LengthConstraintType.RANGE,  h[3],  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  LengthConstraintType.RANGE,  h[3],  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    LengthConstraintType.RANGE,    h[4],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,LengthConstraintType,double,LengthConstraintType)	44	None	replace
104	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  LengthConstraintType.RANGE,  h[3],  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,LengthConstraintType,double,LengthConstraintType)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  LengthConstraintType.RANGE,  h[3],  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  LengthConstraintType.RANGE,  h[3],  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    LengthConstraintType.RANGE,    h[4],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,LengthConstraintType,double,LengthConstraintType)	44	None	replace
105	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
106	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
107	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
108	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
109	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
110	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
111	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[2]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[2]);	  RectangleConstraint    c5    =    new    RectangleConstraint(h[2],    w[2]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	replace
112	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[2]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[2]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[2]);	  RectangleConstraint    c5    =    new    RectangleConstraint(h[2],    w[2]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	replace
113	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4,  h[4]);  [CE]  cannot  find  symbol  c4  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4,  h[4]);  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c4,  h[4]);	  Size2D    size    =    this.rightBlock.arrange(g2,    h[4]);    	non-compiled	[CE]  cannot  find  symbol  c4	7	None	replace
114	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        w[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
115	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        w[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
116	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        w[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
117	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        w[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  w[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
118	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  w[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        w[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  w[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
119	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  w[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    w[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  w[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        w[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  w[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
120	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
121	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
122	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
123	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
124	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
125	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
126	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3],  LengthConstraintType.RANGE,  h[2],  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3],  LengthConstraintType.RANGE,  h[2],  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3],  LengthConstraintType.RANGE,  h[2],  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[4],    LengthConstraintType.RANGE,    h[2],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)	55	None	replace
127	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  w[2],  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  w[2],  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  w[2],  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[4],    LengthConstraintType.RANGE,    h[2],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)	55	None	replace
128	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[3]);    if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	13	None	add
129	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    	non-compiled	[CE]  cannot  find  symbol  c5	36	None	replace
130	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint  [CE]  '('  or  '['  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[2]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint	  RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    if(this.rightBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[2]);    }    	non-compiled	[CE]  '('  or  '['  expected	57	None	replace
131	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
132	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
133	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
134	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
135	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
136	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
137	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[4];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[2]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[4];	          h[4]    =    constraint.getHeight()    -    w[4];    w[4]    =    constraint.getHeight()    -    w[4];    	non-compiled	[CE]  cannot  find  symbol  c5	30	None	replace
138	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[2];	          h[4]    =    constraint.getHeight()    -    w[4];    h[4]    =    constraint.getHeight()    -    w[4];    	non-compiled	[CE]  cannot  find  symbol  c5	28	None	replace
139	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        w[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
140	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    w[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        w[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  w[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
141	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2],  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2],  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2],  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[4],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType)	56	None	replace
142	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  [CE]  cannot  find  symbol  c2  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c2);	  Size2D    size    =    this.rightBlock.arrange(g2,    h);    	non-compiled	[CE]  cannot  find  symbol  c2	6	None	replace
143	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[3]);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[3]);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[4],    LengthConstraintType.RANGE,    h[2]);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double)	50	None	replace
144	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
145	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    h[4]  =  constraint.getHeight();  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
146	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[4]);    if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	8	None	add
147	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
148	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
149	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
150	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
151	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[3]);	  RectangleConstraint    c5    =    new    RectangleConstraint(h[3],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	replace
152	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  h[3]);	  RectangleConstraint    c5    =    new    RectangleConstraint(h[3],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	replace
153	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  h[2]  =  constraint.getWidth()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	h[2]  =  constraint.getWidth()  -  w[3];	          h[2]    =    constraint.getHeight()    -    w[4];    h[2]    =    constraint.getHeight()    -    w[3];    	non-compiled	[CE]  cannot  find  symbol  c5	23	None	replace
154	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
155	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
156	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  LengthConstraintType.RANGE,  h[2],  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,LengthConstraintType,double,LengthConstraintType)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  LengthConstraintType.RANGE,  h[2],  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  LengthConstraintType.RANGE,  h[2],  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    LengthConstraintType.RANGE,    h[4],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,LengthConstraintType,double,LengthConstraintType)	44	None	replace
157	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
158	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
159	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3],  LengthConstraintType.RANGE);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3],  LengthConstraintType.RANGE);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3],  LengthConstraintType.RANGE);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3],    LengthConstraintType.RANGE);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType)	45	None	replace
160	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    h[2]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
161	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    h[2]  =  constraint.getHeight()  -  w[4];  h[3]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
162	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[2]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[2]);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[2]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
163	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[2]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[2]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[2]);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[2]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
164	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[3]);    if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	46	None	add
165	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[3]);    if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[3]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	46	None	add
166	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
167	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
168	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
169	[BUG]  [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[3];  h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[2]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[3];    h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
170	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4],  LengthConstraintType.RANGE);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4],  LengthConstraintType.RANGE);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4],  LengthConstraintType.RANGE);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3],    LengthConstraintType.RANGE);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType)	45	None	replace
171	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  LengthConstraintType.RANGE,  h[4],  null,  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,LengthConstraintType,double,<null>,LengthConstraintType)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  LengthConstraintType.RANGE,  h[4],  null,  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  LengthConstraintType.RANGE,  h[4],  null,  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    LengthConstraintType.RANGE,    h[4],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,LengthConstraintType,double,<null>,LengthConstraintType)	44	None	replace
172	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[4]);    if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	8	None	add
173	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[2],    h[4]);    if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[2],  h[4]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	8	None	add
174	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
175	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[2]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
176	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[2]);    if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[2]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	10	None	add
177	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	h[2]  =  constraint.getHeight()  -  w[2];	          h[2]    =    constraint.getHeight()    -    w[4];    h[2]    =    constraint.getHeight()    -    w[3];    	non-compiled	[CE]  cannot  find  symbol  c5	23	None	replace
178	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  }  [CE]  cannot  find  symbol  c5  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[4]);    if(this.leftBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[4]);    }    	non-compiled	[CE]  cannot  find  symbol  c5	2	None	replace
179	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  if(h[2].getHeight()!=  w[2])  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  }  [CE]  double  cannot  be  dereferenced  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  if(h[2].getHeight()!=  w[2])  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(h[2],    w[2]);    if(h[2].getHeight()!=  w[2])  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[2],  w[2]);  }	  	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	add
180	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[2]);    if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	4	None	add
181	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[2]);    if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[2]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	4	None	add
182	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[4],  LengthConstraintType.FIXED);  [CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[4],  LengthConstraintType.FIXED);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4],  LengthConstraintType.RANGE,  h[4],  LengthConstraintType.FIXED);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[4],    LengthConstraintType.FIXED);    	non-compiled	[CE]  no  suitable  constructor  found  for  RectangleConstraint(double,double,LengthConstraintType,double,LengthConstraintType)	56	None	replace
183	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
184	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[4];  h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[4];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
185	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
186	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
187	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[2]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[2]);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[2]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
188	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[2]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[2]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint  c5  =  new  RectangleConstraint(h[4],  w[2]);	  RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[2]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
189	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  if(h[3].getHeight()!=  w[3])  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  }  [CE]  double  cannot  be  dereferenced  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  if(h[3].getHeight()!=  w[3])  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(h[3],    w[3]);    if(h[3].getHeight()!=  w[3])  {  RectangleConstraint  c5  =  new  RectangleConstraint(h[3],  w[3]);  }	  	non-compiled	[CE]  double  cannot  be  dereferenced	61	None	add
190	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
191	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
192	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
193	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
194	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[4];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[4];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	h[2]  =  constraint.getHeight()  -  w[2];  h[2]  =  constraint.getHeight()  -  w[4];	          h[4]    =    constraint.getHeight()    -    w[4];    h[4]    =    constraint.getHeight()    -    w[4];    	non-compiled	[CE]  cannot  find  symbol  c5	28	None	replace
195	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  }  [CE]  cannot  find  symbol  c5  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3]);    if(this.leftBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3]);    }    	non-compiled	[CE]  cannot  find  symbol  c5	42	None	replace
196	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
197	[BUG]  [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          h[4]    =    constraint.getHeight()    -    w[4];    h[4]  =  constraint.getHeight()  -  w[3];  h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                h[4]        =        constraint.getHeight()        -        w[4];        h[4]    =    constraint.getHeight()    -    w[3];    h[2]  =  constraint.getHeight()  -  w[4];  h[4]  =  constraint.getHeight()  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
198	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  }  [CE]  cannot  find  symbol  c5  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[4]);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[4]);    if(this.centerBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[4]);    }    	non-compiled	[CE]  cannot  find  symbol  c5	64	None	replace
199	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [CE]  cannot  find  symbol  c5  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    	non-compiled	[CE]  cannot  find  symbol  c5	54	None	replace
200	[BUG]  [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }  [CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	RectangleConstraint    c5    =    new    RectangleConstraint(w[4],    h[3]);    if(this.centerBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[3]);  }	  	non-compiled	[CE]  variable  c5  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	13	None	add
201	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  }  [CE]  cannot  find  symbol  c5  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]  if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	if(this.rightBlock!=  null)  {  RectangleConstraint  c5  =  new  RectangleConstraint(w[3],  h[3]);  }	  RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3]);    if(this.rightBlock!=    null)    {    RectangleConstraint    c5    =    new    RectangleConstraint(w[3],    h[3]);    }    	non-compiled	[CE]  cannot  find  symbol  c5	63	None	replace
202	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
203	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
204	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
205	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
