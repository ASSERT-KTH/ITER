bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null  &&  this.rightBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	add	if(this.rightBlock!=  null  &&  this.rightBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    if(this.rightBlock!=    null    &&    this.bottomBlock    ==    null)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	replace
2	[BUG]  [BUGGY]  if(this.rightBlock!=  null  &&  this.rightBlock!=  null)  {  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null  &&  this.rightBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.rightBlock!=  null  &&  this.rightBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    if(this.rightBlock!=    null    &&    this.bottomBlock    ==    null)    {    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	replace
3	[BUG]  [BUGGY]  if(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  if(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  if(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.rightBlock!=    null    &&    this.topBlock!=    null)    {    if(this.rightBlock!=  null  &&  this.topBlock!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
4	[BUG]  [BUGGY]  if(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  if(this.rightBlock!=  null  &&  this.topBlock  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  if(this.rightBlock!=  null  &&  this.topBlock  ==  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.rightBlock!=    null    &&    this.topBlock!=    null)    {    if(this.rightBlock!=  null  &&  this.topBlock  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
5	[BUG]  [BUGGY]  Size2D  w[2]  =  this.rightBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  this.rightBlock.arrange(g2,  c1);  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  w[2]  =  this.rightBlock.arrange(g2,  c1);	  Size2D    w[2]    =    this.rightBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	18	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.bottomBlock!=  null  &&  this.rightBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	add	if(this.bottomBlock!=  null  &&  this.rightBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.topBlock!=    null)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
7	[BUG]  [BUGGY]  if(this.bottomBlock!=  null  &&  this.rightBlock!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.bottomBlock!=  null  &&  this.rightBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.bottomBlock!=  null  &&  this.rightBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.topBlock!=    null)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
8	[BUG]  [BUGGY]  w[3]  =  size.width;  [CE]  ']'  expected  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  w[3]  =  size.width;  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	w[3]  =  size.width;	  w[2]    =    size.width;    	non-compiled	[CE]  ']'  expected	20	None	replace
9	[BUG]  [BUGGY]  If(this.rightBlock!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  If(this.rightBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	If(this.rightBlock!=  null)  {	  if(this.bottomBlock!=    null)    {    If(this.bottomBlock!=    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
10	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  If(this.rightBlock!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null)  {  If(this.rightBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.rightBlock!=  null)  {  If(this.rightBlock!=  null)  {	  if(this.bottomBlock!=    null)    {    If(this.bottomBlock!=    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
11	[BUG]  [BUGGY]  if(this.rightBlock  ==  null)  {  if(this.rightBlock  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock  ==  null)  {  if(this.rightBlock  ==  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.rightBlock    ==    null)    {    if(this.rightBlock  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
12	[BUG]  [BUGGY]  if(this.rightBlock  ==  null)  {  if(this.rightBlock!=  null)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock  ==  null)  {  if(this.rightBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.rightBlock    ==    null)    {    if(this.rightBlock!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
13	[BUG]  [BUGGY]  if(this.rightBlock  ==  null)  {  If(this.rightBlock  ==  null)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock  ==  null)  {  If(this.rightBlock  ==  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.rightBlock    ==    null)    {    If(this.rightBlock  ==  null)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
14	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[2]  =  size.width;  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[2]  =  size.width;  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[2]  =  size.width;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c2);    w[2]    =    size.width;    	non-compiled	[CE]  ']'  expected	21	None	replace
15	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  [CE]  ']'  expected  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c2);    w[2]    =    size.width;    	non-compiled	[CE]  ']'  expected	21	None	replace
16	[BUG]  [BUGGY]  Size2D  rightBlock  =  this.bottomBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  rightBlock  =  this.bottomBlock.arrange(g2,  c1);  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  rightBlock  =  this.bottomBlock.arrange(g2,  c1);	  Size2D    rightBlock    =    this.rightBlock.arrange(g2,    c1);    	non-compiled	[CE]  ']'  expected	8	None	replace
17	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    	non-compiled	[CE]  ']'  expected	19	None	replace
18	[BUG]  [BUGGY]  Size2D  rightBlock  =  this.bottomBlock.arrange(g2,  c3);  [CE]  ']'  expected  [FE]        NullPointerException      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  rightBlock  =  this.bottomBlock.arrange(g2,  c3);  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  rightBlock  =  this.bottomBlock.arrange(g2,  c3);	  Size2D    rightBlock    =    this.bottomBlock.arrange(g2,    c2);    	non-compiled	[CE]  ']'  expected	14	None	replace
19	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  if(this.leftBlock!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.leftBlock!=  null)  {  if(this.leftBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.leftBlock!=    null)    {    if(this.leftBlock!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
20	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  if(this.leftBlock  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.leftBlock!=  null)  {  if(this.leftBlock  ==  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.leftBlock!=    null)    {    if(this.leftBlock  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
21	[BUG]  [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c4);  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c4);  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c4);	  Size2D    w[2]    =    this.bottomBlock.arrange(g2,    c1);    	non-compiled	[CE]  ']'  expected	10	None	replace
22	[BUG]  [BUGGY]  Size2D  w[2]  =  this.topBlock.arrange(g2,  c3);  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  this.topBlock.arrange(g2,  c3);  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  w[2]  =  this.topBlock.arrange(g2,  c3);	  Size2D    w[2]    =    this.topBlock.arrange(g2,    c2);    	non-compiled	[CE]  ']'  expected	25	None	replace
23	[BUG]  [BUGGY]  Size2D  w[2]  =  this.topBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  this.topBlock.arrange(g2,  c1);  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  w[2]  =  this.topBlock.arrange(g2,  c1);	  Size2D    w[2]    =    this.topBlock.arrange(g2,    c2);    	non-compiled	[CE]  ']'  expected	25	None	replace
24	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c4);	  Size2D    size    =    this.rightBlock.arrange(g2,    c4);    	non-compiled	[CE]  ']'  expected	31	None	replace
25	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);	  Size2D    size    =    this.bottomBlock.arrange(g2,    c2);    	non-compiled	[CE]  ']'  expected	22	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null  &&  this.centerBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	add	if(this.rightBlock!=  null  &&  this.centerBlock!=  null)  {	  if(this.centerBlock!=    null    &&    this.centerBlock!=    null)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
27	[BUG]  [BUGGY]  if(this.rightBlock!=  null  &&  this.centerBlock!=  null)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null  &&  this.centerBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.rightBlock!=  null  &&  this.centerBlock!=  null)  {	  if(this.centerBlock!=    null    &&    this.centerBlock!=    null)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
28	[BUG]  [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  If(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  If(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  If(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    If(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
29	[BUG]  [BUGGY]  If(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  If(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	If(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    If(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
30	[BUG]  [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.centerBlock!=    null    &&    this.centerBlock!=    null)    {    if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
31	[BUG]  [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  if(this.centerBlock  ==  null  &&  this.centerBlock!=  null)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  if(this.centerBlock  ==  null  &&  this.centerBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.centerBlock!=    null    &&    this.centerBlock!=    null)    {    if(this.centerBlock  ==  null  &&  this.centerBlock!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
32	[BUG]  [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  if(this.centerBlock!=  null  &&  this.centerBlock  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  if(this.centerBlock!=  null  &&  this.centerBlock  ==  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.centerBlock!=    null    &&    this.centerBlock!=    null)    {    if(this.centerBlock!=  null  &&  this.centerBlock  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
33	[BUG]  [BUGGY]  Size2D  rightBlock  =  this.rightBlock.arrange(g2,  c4);  [CE]  ']'  expected  [FE]            NullPointerException      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  rightBlock  =  this.rightBlock.arrange(g2,  c4);  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  rightBlock  =  this.rightBlock.arrange(g2,  c4);	          Size2D    rightBlock    =    this.rightBlock.arrange(g2,    c2);    Size2D    rightBlock    =    this.rightBlock.arrange(g2,    c4);    	non-compiled	[CE]  ']'  expected	13	None	replace
34	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.centerBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	add	if(this.centerBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    if(this.rightBlock!=    null    &&    this.bottomBlock    ==    null)    {    	compilable	  [FE]  NullPointerException  	16	1	replace
35	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.centerBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.centerBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    if(this.rightBlock!=    null    &&    this.bottomBlock    ==    null)    {    	compilable	  [FE]  NullPointerException  	16	1	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.topBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	add	if(this.topBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    if(this.rightBlock!=    null    &&    this.bottomBlock    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
37	[BUG]  [BUGGY]  if(this.topBlock!=  null)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.topBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.topBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    if(this.rightBlock!=    null    &&    this.bottomBlock    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
38	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[3]  =  size.width;  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[3]  =  size.width;  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[3]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    	non-compiled	[CE]  ']'  expected	19	None	replace
39	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[2]  =  size.width;  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[2]  =  size.width;  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[2]  =  size.width;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c2);    w[2]    =    size.width;    	non-compiled	[CE]  ']'  expected	21	None	replace
40	[BUG]  [BUGGY]  if(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  If(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  If(this.rightBlock!=  null  &&  this.topBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.rightBlock!=    null    &&    this.topBlock!=    null)    {    If(this.rightBlock!=  null  &&  this.topBlock!=  null)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
41	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  If(this.leftBlock!=  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.leftBlock!=  null)  {  If(this.leftBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.leftBlock!=    null)    {    If(this.leftBlock!=  null)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
42	[BUG]  [BUGGY]  if(w[2]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]    AssertionFailedError    [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(w[2]!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(w[2]!=  null)  {	  if(this.leftBlock!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	7	None	replace
43	[BUG]  [BUGGY]  w[2]  =  h;  [CE]  ']'  expected  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  w[2]  =  h;  [BUGGY]      if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	w[2]  =  h;	  w[2]    =    size.width;    	non-compiled	[CE]  ']'  expected	20	None	replace
44	[BUG]  [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  If(this.rightBlock!=  null  &&  this.bottomBlock!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }      [BUGGY]  if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  If(this.rightBlock!=  null  &&  this.bottomBlock!=  null)  {  [BUGGY]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	replace	if(this.centerBlock!=  null  &&  this.centerBlock!=  null)  {  If(this.rightBlock!=  null  &&  this.bottomBlock!=  null)  {	  if(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    If(this.rightBlock!=    null    &&    this.bottomBlock!=    null)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
