bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]  h[3]  =  size.width;  [BUGGY]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	add	h[3]  =  size.width;	h[3]  =  size.height;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
2	[BUG]  [BUGGY]  h[3]  =  size.width;  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]  h[3]  =  size.width;  [BUGGY]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	h[3]  =  size.width;	h[3]  =  size.height;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    [BUGGY]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	add	  	h[3]  =  size.height;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
4	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    [BUGGY]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	  	h[3]  =  size.height;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
5	[BUG]  [BUGGY]    Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	    Size2D  size  =  this.rightBlock.arrange(g2,  c3);		non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	42	None	add
6	[BUG]  [BUGGY]    Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	    Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;		non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	42	None	add
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    w[3]  =  size.width;  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	add	    w[3]  =  size.width;		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	add
8	[BUG]  [BUGGY]    w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    w[3]  =  size.width;  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	    w[3]  =  size.width;		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	add
9	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]  h[2]  =  size.height;  [BUGGY]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	add	h[2]  =  size.height;	h[3]  =  size.height;  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	replace
10	[BUG]  [BUGGY]  h[2]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]  h[2]  =  size.height;  [BUGGY]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	h[2]  =  size.height;	h[3]  =  size.height;  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	replace
11	[BUG]  [BUGGY]    Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	    Size2D  size  =  this.bottomBlock.arrange(g2,  c3);		non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	42	None	add
12	[BUG]  [BUGGY]    Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	    Size2D  size  =  this.bottomBlock.arrange(g2,  c2);		non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	42	None	add
13	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    w[3]  =  size.height;  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	add	    w[3]  =  size.height;		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	add
14	[BUG]  [BUGGY]    w[3]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    w[3]  =  size.height;  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	    w[3]  =  size.height;		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	add
15	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    w[4]  =  size.height;  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	add	    w[4]  =  size.height;		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	add
16	[BUG]  [BUGGY]    w[4]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    w[4]  =  size.height;  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	    w[4]  =  size.height;		compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	add
