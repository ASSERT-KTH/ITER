bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DurationField  loopRangeField  =  loopType.getDurationType().getField(iChronology);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  DurationField  loopRangeField  =  loopType.getDurationType().getField(iChronology);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	DurationField  loopRangeField  =  loopType.getDurationType().getField(iChronology);	  DurationField    loopRangeField    =    fieldType.getDurationType().getField(iChronology);    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(compare,  unitField);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.get(compare,  unitField);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.get(compare,  unitField);	  int[]    newValues    =    iTypes.get(compare,    value);    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(compare,  index);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.get(compare,  index);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.get(compare,  index);	  int[]    newValues    =    iTypes.get(compare,    value);    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(newValues,  compare,  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.toArray(newValues,  compare,  value);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.toArray(newValues,  compare,  value);	  int[]    newValues    =    iTypes.toArray(newValues,    compare);    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(compare  *  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.get(compare  *  1);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.get(compare  *  1);	  int[]    newValues    =    iTypes.get(compare    +    1);    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(newValues,  comparator);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.toArray(newValues,  comparator);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.toArray(newValues,  comparator);	  int[]    newValues    =    iTypes.toArray(newValues,    value);    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Value[iTypes.size()  +  1]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Value[iTypes.size()  +  1]);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.toArray(new  Value[iTypes.size()  +  1]);	  int[]    newValues    =    iTypes.toArray(new    Value[iTypes.size()    ]);    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(i  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(i  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(i	  int[]    newValues    =    iTypes.values();    for(int    i    =    0;    i    <    newValues.length;    i++)    {    DateTimeFieldType    loopType    =    loopType.getDurationType().getField(iCh    	non-compiled	[CE]  	6	None	replace
9	[BUG]  [BUGGY]  int[]  newValues  =  loopType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iCh  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  loopType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iCh  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  loopType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iCh	  int[]    newValues    =    loopType.values();    for(int    i    =    0;    i    <    newValues.length;    i++)    {    DateTimeFieldType    loopType    =    loopType.getDurationType().getField(iChronology);    	non-compiled	[CE]  	14	None	replace
10	[BUG]  [BUGGY]  int[]  newValues  =  fieldType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  fieldType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  fieldType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology	  int[]    newValues    =    loopType.getValues();    for(int    i    =    0;    i    <    newValues.length;    i++)    {    DateTimeFieldType    loopType    =    loopType.getDurationType().getField(iChronology    	non-compiled	[CE]  	16	None	replace
11	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Value[iTypes.length  ]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Value[iTypes.length  ]);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.toArray(new  Value[iTypes.length  ]);	  int[]    newValues    =    iTypes.toArray(new    Value[iTypes.size()    ]);    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  int[]  newValues  =  fieldType.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  fieldType.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  fieldType.values();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iChronology);	  int[]    newValues    =    loopType.values();    for(int    i    =    0;    i    <    newValues.length;    i++)    {    DateTimeFieldType    loopType    =    loopType.getDurationType().getField(iChronology);    	non-compiled	[CE]  	14	None	replace
13	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(newValues,  index);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.toArray(newValues,  index);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.toArray(newValues,  index);	  int[]    newValues    =    iTypes.toArray(newValues,    value);    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(compare,  iFieldIndex);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.get(compare,  iFieldIndex);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.get(compare,  iFieldIndex);	  int[]    newValues    =    iTypes.get(compare,    value);    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(compare,  value  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  iTypes.get(compare,  value  -  1);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  iTypes.get(compare,  value  -  1);	  int[]    newValues    =    iTypes.get(compare,    value);    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  int[]  newValues  =  fieldType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iCh  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  int[]  newValues  =  fieldType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iCh  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	int[]  newValues  =  fieldType.getValues();  for(int  i  =  0;  i  <  newValues.length;  i++)  {  DateTimeFieldType  loopType  =  loopType.getDurationType().getField(iCh	  int[]    newValues    =    loopType.getValues();    for(int    i    =    0;    i    <    newValues.length;    i++)    {    DateTimeFieldType    loopType    =    loopType.getDurationType().getField(iChr    	non-compiled	[CE]  	8	None	replace
17	[BUG]  [BUGGY]  DurationField  loopRangeField  =  fieldType.getLoopDurationType().getField(iChronology);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;      [BUGGY]  DurationField  loopRangeField  =  fieldType.getLoopDurationType().getField(iChronology);  [BUGGY]      }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.35355339059327373	446	446	1	replace	DurationField  loopRangeField  =  fieldType.getLoopDurationType().getField(iChronology);	  DurationField    loopRangeField    =    fieldType.getDurationType().getField(iChronology);    	non-compiled	[CE]  	13	None	replace
