bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  0,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	11	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	11	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	11	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i  *  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i  *  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i  *  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	11	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  value  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  value  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  value  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	11	None	replace
6	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  iFieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iFieldIndex);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	46	None	replace
7	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  index);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  index);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iFieldIndex);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)	46	None	replace
8	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldIndex);  [CE]  cannot  find  symbol  fieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iFieldIndex);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	46	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  newPartial  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	139	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  *  1);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  *  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  *  1);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	139	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  1);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	139	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  values.length  -  i  -  1);  [CE]  cannot  find  symbol  values  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  values.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  values.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  values	139	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  index  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  index  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  index  -  1);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	139	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  value.length  -  i  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  value.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  value.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	139	None	replace
15	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iFieldIndex,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int)	21	None	replace
16	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iFieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	21	None	replace
17	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues.length,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int,int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues.length,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues.length,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iFieldIndex,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int,int[])	21	None	replace
18	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[])	1	None	replace
19	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes);  [CE]  cannot  find  symbol  fieldTypes  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	1	None	replace
20	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes);  [CE]  cannot  find  symbol  fields  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fields	1	None	replace
21	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int)	30	None	replace
22	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newTypes,  value);  [CE]  cannot  find  symbol  fieldTypes  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    value);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	30	None	replace
23	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(value,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],Chronology)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(value,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(value,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],Chronology)	30	None	replace
24	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[])  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[])	30	None	replace
25	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  value);  [CE]  cannot  find  symbol  fieldTypes  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    value);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	30	None	replace
26	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	30	None	replace
27	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
28	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])	114	None	replace
29	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	114	None	replace
30	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	114	None	replace
31	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values[i],  newValues).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  values  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values[i],  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values[i],  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  values	114	None	replace
32	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getField(index),  iTypes,  newValues).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeField,DateTimeFieldType[],int[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getField(index),  iTypes,  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getField(index),  iTypes,  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeField,DateTimeFieldType[],int[])	114	None	replace
33	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  fieldTypes  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	114	None	replace
34	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataTypes,  newValues).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  dataTypes  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataTypes,  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  dataTypes,  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  dataTypes	114	None	replace
35	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues).set(this,  index,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues).set(this,  index,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newValues).set(this,  index,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])	114	None	replace
36	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	157	None	replace
37	[BUG]  [BUGGY]  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
38	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	157	None	replace
39	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[])	157	None	replace
40	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
41	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	157	None	replace
42	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  cannot  find  symbol  values  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  cannot  find  symbol  values	157	None	replace
43	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	157	None	replace
44	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	157	None	replace
45	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues[i],  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues[i],  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues[i],  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType)	161	None	replace
46	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes[i],  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes[i],  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes[i],  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType)	161	None	replace
47	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType)	161	None	replace
48	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes[i],  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes[i],  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes[i],  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType)	161	None	replace
49	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType[i],  newValues,  fieldType);  [CE]  cannot  find  symbol  iFieldType  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType[i],  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldType[i],  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  iFieldType	161	None	replace
50	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values[i],  newValues,  fieldType);  [CE]  cannot  find  symbol  values  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values[i],  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values[i],  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  values	161	None	replace
51	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes[i],  newValues,  fieldType);  [CE]  cannot  find  symbol  iFieldTypes  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes[i],  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes[i],  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	161	None	replace
52	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iKeys[i],  newValues,  fieldType);  [CE]  cannot  find  symbol  iKeys  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iKeys[i],  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iKeys[i],  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  iKeys	161	None	replace
53	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,Chronology,int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  fieldType,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(newValues,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,Chronology,int[])	20	None	replace
54	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  newChronology);  [CE]  cannot  find  symbol  newChronology  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  newChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  fieldType,  newChronology);	  Partial    newPartial    =    new    Partial(newValues,    fieldType,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newChronology	20	None	replace
55	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,DateTimeFieldType)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iChronology,  fieldType);	  Partial    newPartial    =    new    Partial(newValues,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,DateTimeFieldType)	20	None	replace
56	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iChronology,  value);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,Chronology,int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iChronology,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  fieldType,  iChronology,  value);	  Partial    newPartial    =    new    Partial(newValues,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,Chronology,int)	20	None	replace
57	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iChronology,  values);  [CE]  cannot  find  symbol  values  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iChronology,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  fieldType,  iChronology,  values);	  Partial    newPartial    =    new    Partial(newValues,    fieldType,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  values	20	None	replace
58	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldType,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(<null>,DateTimeFieldType,Chronology)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldType,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  fieldType,  iChronology);	  Partial    newPartial    =    new    Partial(newValues,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,DateTimeFieldType,Chronology)	20	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  2);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  2);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  2);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	123	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i;  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i;  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i;	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  ')'  expected	123	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	123	None	replace
62	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  newPartial  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  cannot  find  symbol  newPartial	65	None	replace
63	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])	65	None	replace
64	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  i);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	65	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  i);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newTypes,  0,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  cannot  find  symbol  newPartial	65	None	replace
66	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iTypes.toArray(newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	65	None	replace
67	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(i);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iTypes.get(i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iTypes.get(i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	65	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  0,  newTypes,  0,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  cannot  find  symbol  newPartial	65	None	replace
69	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
70	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  parseAndReturn(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  parseAndReturn(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  parseAndReturn(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	134	None	replace
71	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	134	None	replace
72	[BUG]  [BUGGY]  parseAndReturn(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parseAndReturn(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parseAndReturn(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
73	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parseAndReturn(iChronology,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parseAndReturn(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parseAndReturn(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	134	None	replace
74	[BUG]  [BUGGY]  parseAndReturn(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parseAndReturn(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parseAndReturn(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
75	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  parseAndReturn(iChronology,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  parseAndReturn(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  parseAndReturn(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	134	None	replace
76	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])	134	None	replace
77	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(i,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[])	103	None	replace
78	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology.withUTC(),  newTypes,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology.withUTC(),  newTypes,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology.withUTC(),  newTypes,  newTypes);	  Partial    newPartial    =    new    Partial(i,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	103	None	replace
79	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iTypes,  fieldType,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,DateTimeFieldType[])  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iTypes,  fieldType,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iTypes,  fieldType,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,DateTimeFieldType[])	102	None	replace
80	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iValues,  fieldType,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,DateTimeFieldType[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iValues,  fieldType,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iValues,  fieldType,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,DateTimeFieldType[])	102	None	replace
81	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues,  value);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[],int)	102	None	replace
82	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[],int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues,  iValues);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[],int[])	102	None	replace
83	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  fieldType,  newValues);  [CE]  cannot  find  symbol  fields  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields[i],  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iValues);    	non-compiled	[CE]  cannot  find  symbol  fields	102	None	replace
84	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iTypes,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iTypes,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iTypes,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[])	102	None	replace
85	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[])	102	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  fieldType.length  -  i  -  1);  [CE]  cannot  find  symbol  length  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  fieldType.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  fieldType.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	16	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i);  [CE]  cannot  find  symbol  newPartial  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	16	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  value.length  -  i  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  value.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  value.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  iChronology.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  iChronology.length  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  iChronology.length  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	16	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  fields.length  -  i  -  1);  [CE]  cannot  find  symbol  fields  [FE]                                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  fields.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  fields.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  fields	16	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i  *  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i  *  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i  *  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	16	None	replace
92	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int)	40	None	replace
93	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	40	None	replace
94	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newValues,  i);  [CE]  cannot  find  symbol  iFieldTypes  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	40	None	replace
95	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  i);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	40	None	replace
96	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  i);  [CE]  cannot  find  symbol  values  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  values	40	None	replace
97	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  i);  [CE]  cannot  find  symbol  iClass  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  iClass	40	None	replace
98	[BUG]  [BUGGY]  iChronology  =  new  Partial(iChronology,  newTypes,  i);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  =  new  Partial(iChronology,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  =  new  Partial(iChronology,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	124	None	replace
99	[BUG]  [BUGGY]  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	124	None	replace
100	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology  =  new  Partial(iChronology,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology  =  new  Partial(iChronology,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology  =  new  Partial(iChronology,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	124	None	replace
101	[BUG]  [BUGGY]  iChronology  =  new  Partial(iChronology,  newTypes,  value);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  =  new  Partial(iChronology,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  =  new  Partial(iChronology,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	124	None	replace
102	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  iChronology  =  new  Partial(iChronology,  newTypes,  values);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  iChronology  =  new  Partial(iChronology,  newTypes,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  iChronology  =  new  Partial(iChronology,  newTypes,  values);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  values	124	None	replace
103	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	124	None	replace
104	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)	32	None	replace
105	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int)	32	None	replace
106	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newTypes,  i);  [CE]  cannot  find  symbol  iFieldTypes  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	32	None	replace
107	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  i);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	32	None	replace
108	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newTypes,  i);  [CE]  cannot  find  symbol  values  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  values	32	None	replace
109	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  i);  [CE]  cannot  find  symbol  iClass  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  iClass	32	None	replace
110	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int[],Chronology)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iChronology);	  Partial    newPartial    =    new    Partial(fieldType,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],Chronology)	22	None	replace
111	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  value);	  Partial    newPartial    =    new    Partial(fieldType,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],int)	22	None	replace
112	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newType,  iChronology,  fieldType);  [CE]  cannot  find  symbol  newType  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newType,  iChronology,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newType,  iChronology,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newType	22	None	replace
113	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,Chronology,int[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,Chronology,int[])	22	None	replace
114	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this.iChronology,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	22	None	replace
115	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology.validate(newPartial,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	154	None	replace
116	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  values  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	154	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  final  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	final  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	154	13	replace
118	[BUG]  [BUGGY]  final  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  final  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	final  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	154	13	replace
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	154	1	replace
120	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	154	1	replace
121	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes);  [CE]  cannot  find  symbol  newPartial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newPartial,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newPartial,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	154	None	replace
122	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  iPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newTypes,  value);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	154	None	replace
123	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])	50	None	replace
124	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(i,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,int[],Chronology)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(i,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(i,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,int[],Chronology)	50	None	replace
125	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  dataArea,  i);  [CE]  cannot  find  symbol  dataArea  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  dataArea,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  dataArea,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  dataArea	50	None	replace
126	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  this);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],Partial)  [FE]    AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  this);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  this);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],Partial)	44	None	replace
127	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],<null>,int)  [FE]      AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],<null>,int)	44	None	replace
128	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  null);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],<null>)  [FE]        AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],<null>)	44	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    	compilable	  [FE]  AssertionFailedError  	44	13	replace
130	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  null);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    	compilable	  [FE]  AssertionFailedError  	44	13	replace
131	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  incompatible  types	111	None	replace
132	[BUG]  [BUGGY]  int  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  incompatible  types	111	None	replace
133	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	111	None	replace
134	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  iValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])	111	None	replace
135	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	111	None	replace
136	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	111	None	replace
137	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)	119	None	replace
138	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[])	119	None	replace
139	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int)	119	None	replace
140	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	119	None	replace
141	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int)	119	None	replace
142	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(value,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,int[],Chronology)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(value,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(value,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,int[],Chronology)	119	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	110	None	replace
144	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int)	110	None	replace
145	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  values  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  values	110	None	replace
146	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int,int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int,int)	110	None	replace
147	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int,int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int,int)	110	None	replace
148	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  iClass  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  iClass	110	None	replace
149	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int[],int,int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int[],int,int)	110	None	replace
150	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values[i],  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  values  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values[i],  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values[i],  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  values	110	None	replace
151	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int,int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int,int)	110	None	replace
152	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,Chronology,int[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,Chronology,int[])	3	None	replace
153	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[],Chronology)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[],Chronology)	3	None	replace
154	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newChronology);  [CE]  cannot  find  symbol  newChronology  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newChronology	3	None	replace
155	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType)	3	None	replace
156	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  iChronology,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,Chronology,int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  iChronology,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  iChronology,  value);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,Chronology,int)	3	None	replace
157	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  iFieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	47	None	replace
158	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int)	47	None	replace
159	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  value,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int,DateTimeFieldType)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  value,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  value,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int,DateTimeFieldType)	47	None	replace
160	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  value,  values);  [CE]  cannot  find  symbol  values  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  value,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  value,  values);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  values	47	None	replace
161	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],DateTimeFieldType)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],DateTimeFieldType)	99	None	replace
162	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  fieldType);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	99	None	replace
163	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newValues,  fieldType);  [CE]  cannot  find  symbol  iFieldType  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  iFieldType	99	None	replace
164	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  fieldType);  [CE]  cannot  find  symbol  values  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  values	99	None	replace
165	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType[])	135	None	replace
166	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType[])	135	None	replace
167	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iFieldIndex);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	135	None	replace
168	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType[])	135	None	replace
169	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  value);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
170	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  values);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
171	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newTypes);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
172	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  index);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  index);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
173	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  dataArea);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  dataArea);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  dataArea);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
174	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  values);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  values);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
175	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  getFieldIndex(),  iChronology);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  getFieldIndex(),  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  getFieldIndex(),  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
176	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int[],int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int[],int[])	107	None	replace
177	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],int[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],int[],int)	107	None	replace
178	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],int[],int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],int[],int[])	107	None	replace
179	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,DateTimeFieldType[],int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,DateTimeFieldType[],int[])	107	None	replace
180	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newValues);  [CE]  cannot  find  symbol  iFieldTypes  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	68	None	replace
181	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  value);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int[],int)	2	None	replace
182	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,DateTimeFieldType[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,DateTimeFieldType[])	2	None	replace
183	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,DateTimeFieldType[],int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newTypes,  value);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,DateTimeFieldType[],int)	2	None	replace
184	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fields,  iChronology,  newValues);  [CE]  cannot  find  symbol  fields  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fields,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fields,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fields	2	None	replace
185	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  values);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	2	None	replace
186	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,DateTimeFieldType,int[])  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,DateTimeFieldType,int[])	2	None	replace
187	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType,int)  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType,int)	83	None	replace
188	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType[])  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType[])	83	None	replace
189	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(value,  iTypes,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],Chronology)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(value,  iTypes,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(value,  iTypes,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],Chronology)	83	None	replace
190	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,DateTimeFieldType)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,DateTimeFieldType)	83	None	replace
191	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues,  value);  [CE]  cannot  find  symbol  fieldTypes  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	83	None	replace
192	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)	83	None	replace
193	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  value);  [CE]  cannot  find  symbol  newPartial  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	127	None	replace
194	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  iPartial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	127	None	replace
195	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  [CE]  cannot  find  symbol  newPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	127	None	replace
196	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(<null>,Chronology,DateTimeFieldType[])  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(null,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,Chronology,DateTimeFieldType[])	8	None	replace
197	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldType,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(<null>,DateTimeFieldType,DateTimeFieldType[],Chronology)  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldType,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  fieldType,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(null,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,DateTimeFieldType,DateTimeFieldType[],Chronology)	8	None	replace
198	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldTypes,  newTypes,  iChronology);  [CE]  cannot  find  symbol  fieldTypes  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldTypes,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  fieldTypes,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(null,    newTypes,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	8	None	replace
199	[BUG]  [BUGGY]  partial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  partial  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  partial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	partial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    partial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  partial	67	None	replace
200	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int[])	92	None	replace
201	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],Chronology)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],Chronology)	92	None	replace
202	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType[])	92	None	replace
203	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,int[],Chronology)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,int[],Chronology)	92	None	replace
204	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],Chronology,int[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  newTypes,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],Chronology,int[])	92	None	replace
205	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  index);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  index);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],int)	92	None	replace
206	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[])  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[])	92	None	replace
207	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int)	92	None	replace
208	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  indexTypes,  newValues,  newValues);  [CE]  cannot  find  symbol  indexTypes  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  indexTypes,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  indexTypes,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  indexTypes	92	None	replace
209	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],DateTimeFieldType)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(this,    iChronology,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],DateTimeFieldType)	24	None	replace
210	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],DateTimeFieldType)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(this,    iChronology,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],DateTimeFieldType)	24	None	replace
211	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType,int[],int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  value);	  Partial    newPartial    =    new    Partial(this,    iChronology,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType,int[],int)	24	None	replace
212	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  values);	  Partial    newPartial    =    new    Partial(this,    iChronology,    fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	24	None	replace
213	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newFieldType,  newValues);  [CE]  cannot  find  symbol  newFieldType  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newFieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newFieldType,  newValues);	  Partial    newPartial    =    new    Partial(this,    iChronology,    fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newFieldType	24	None	replace
214	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  iTypes,  iValues);  [CE]  cannot  find  symbol  fields  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  iTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  iTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  fields	62	None	replace
215	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  iValues);  [CE]  cannot  find  symbol  fields  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  fields	62	None	replace
216	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])	84	None	replace
217	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newTypes);  [CE]  cannot  find  symbol  fieldTypes  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	33	None	replace
218	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology)	6	None	replace
219	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,DateTimeFieldType[])  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,DateTimeFieldType[])	6	None	replace
220	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(field,  iChronology,  newTypes);  [CE]  cannot  find  symbol  field  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(field,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(field,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  field	6	None	replace
221	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  iChronology.validate(newPartial,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	132	None	replace
222	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  iChronology.validate(newPartial,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	132	None	replace
223	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  fieldTypes  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	132	None	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  final  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	final  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	132	12	replace
225	[BUG]  [BUGGY]  final  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  final  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	final  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	132	12	replace
226	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	132	None	replace
227	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  values  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values);  iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	132	None	replace
228	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldType,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType,int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldType,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldType,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType,int)	48	None	replace
229	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)	48	None	replace
230	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	112	None	replace
231	[BUG]  [BUGGY]  parse(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parse(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parse(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
232	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]    IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	90	None	add
233	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  this.iChronology.validate(newPartial,  newValues);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]      IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  this.iChronology.validate(newPartial,  newValues);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	90	None	add
234	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  }  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  }	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
235	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]          IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	90	None	add
236	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]            IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	90	None	add
237	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  partial  =  new  Partial(newTypes,  null,  iChronology);  [CE]  cannot  find  symbol  partial  [FE]              IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  partial  =  new  Partial(newTypes,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    partial  =  new  Partial(newTypes,  null,  iChronology);	  	non-compiled	[CE]  cannot  find  symbol  partial	90	None	add
238	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  return  newPartial;  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  return  newPartial;  }	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
239	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  System.arraycopy(iValues,  0,  newValu  [CE]  ')'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  System.arraycopy(iValues,  0,  newValu  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  System.arraycopy(iValues,  0,  newValu	  	non-compiled	[CE]  ')'  expected	90	None	add
240	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology).set(this,  index,  newValues,  value);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                    IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology).set(this,  index,  newValues,  value);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	90	None	add
241	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  System.arraycopy(iValues,  0,  newValues  [CE]  ')'  expected  [FE]                      IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  System.arraycopy(iValues,  0,  newValues  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  }  else  if(iChronology!=  null)  {  iChronology.validate(newPartial,  newValues);  System.arraycopy(iValues,  0,  newValues	  	non-compiled	[CE]  ')'  expected	90	None	add
242	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  fieldType,  null);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType,<null>)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  fieldType,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  fieldType,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType,<null>)	93	None	replace
243	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  null);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],<null>)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],<null>)	93	None	replace
244	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  null);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],<null>)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],<null>)	93	None	replace
245	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  null);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int[],<null>)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int[],<null>)	93	None	replace
246	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex,  newValues,  null);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex,  newValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex,  newValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	93	None	replace
247	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  newValues,  null);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,int[],<null>)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  newValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  newValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,int[],<null>)	93	None	replace
248	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues,  null);  [CE]  cannot  find  symbol  fieldTypes  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	93	None	replace
249	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,int[])	98	None	replace
250	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,Chronology)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  iChronology);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,Chronology)	98	None	replace
251	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fields,  fieldType);  [CE]  cannot  find  symbol  fields  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fields,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fields,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  fields	98	None	replace
252	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes,  fieldType,  iChronology);  [CE]  cannot  find  symbol  newChronology  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes,  fieldType,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newChronology,  newTypes,  fieldType,  iChronology);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newChronology	98	None	replace
253	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],int[])	98	None	replace
254	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(i,  newTypes,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(i,  newTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(i,  newTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],int)	106	None	replace
255	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],int)	106	None	replace
256	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[],int)	106	None	replace
257	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  i,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],int,int[],int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  i,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  i,  newValues,  value);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],int,int[],int)	106	None	replace
258	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(i,  fieldType,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(i,  fieldType,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(i,  fieldType,  newValues,  i);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],int)	106	None	replace
259	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  value);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int)	117	None	replace
260	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[])	117	None	replace
261	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  values);  [CE]  cannot  find  symbol  values  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  values);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  values	117	None	replace
262	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fields);  [CE]  cannot  find  symbol  fields  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fields);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fields	117	None	replace
263	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,int[],Chronology)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,int[],Chronology)	117	None	replace
264	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  value);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],int)	117	None	replace
265	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iClassIndex,  newValues);  [CE]  cannot  find  symbol  iClassIndex  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iClassIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iClassIndex,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iClassIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iClassIndex	148	None	replace
266	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iClassIndex,  newValues);  [CE]  cannot  find  symbol  partial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iClassIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(partial,  iClassIndex,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iClassIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  partial	148	None	replace
267	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  iClassIndex,  newValues);  [CE]  cannot  find  symbol  iClassIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iClassIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  iClassIndex,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iClassIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iClassIndex	148	None	replace
268	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  value.length);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  value.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  value.length);	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	14	None	replace
269	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  values.length);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  values.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  values.length);	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	14	None	replace
270	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  value);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  value);	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	14	None	replace
271	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i.length);  [CE]  int  cannot  be  dereferenced  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i.length);	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
272	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  oldValues.length);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  oldValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  oldValues.length);	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	14	None	replace
273	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iChronology,  newValues);  [CE]  cannot  find  symbol  partial  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(partial,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(period,    iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  partial	152	None	replace
274	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(period,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[])	152	None	replace
275	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues);	  Partial    newPartial    =    new    Partial(period,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])	152	None	replace
276	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  partial,  newValues);  [CE]  cannot  find  symbol  partial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  partial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  partial,  newValues);	  Partial    newPartial    =    new    Partial(period,    iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  partial	152	None	replace
277	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(<null>,Chronology,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(period,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,Chronology,int[])	152	None	replace
278	[BUG]  [BUGGY]  iChronology.validate(newPartial,  fieldType);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newPartial,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newPartial,  fieldType);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	140	None	replace
279	[BUG]  [BUGGY]  iChronology.validate(newPartial,  fieldType,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newPartial,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newPartial,  fieldType,  newValues);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	140	None	replace
280	[BUG]  [BUGGY]  iChronology.validate(null,  fieldType,  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(null,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(null,  fieldType,  newValues);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	140	None	replace
281	[BUG]  [BUGGY]  iChronology.validate(newValues,  fieldType);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newValues,  fieldType);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	140	None	replace
282	[BUG]  [BUGGY]  iChronology.validate(this,  fieldType,  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(this,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(this,  fieldType,  newValues);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	140	None	replace
283	[BUG]  [BUGGY]  iChronology.validate(newPartial,  fields);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newPartial,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newPartial,  fields);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	140	None	replace
284	[BUG]  [BUGGY]  iChronology.validate(fieldType,  newValues,  value);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(fieldType,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(fieldType,  newValues,  value);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	140	None	replace
285	[BUG]  [BUGGY]  iChronology.validate(newType,  fieldType);  [CE]  cannot  find  symbol  newType  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newType,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newType,  fieldType);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newType	140	None	replace
286	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iTypes,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],DateTimeFieldType[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iTypes,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iTypes,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],DateTimeFieldType[])	28	None	replace
287	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[])	28	None	replace
288	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType)	28	None	replace
289	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  values);  [CE]  cannot  find  symbol  values  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  values);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  values	28	None	replace
290	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	28	None	replace
291	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  iTypes,  newTypes);  [CE]  cannot  find  symbol  fields  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  iTypes,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  iTypes,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fields	28	None	replace
292	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	101	None	replace
293	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[])  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[])	101	None	replace
294	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newTypes,  iValues);  [CE]  cannot  find  symbol  iFieldTypes  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	101	None	replace
295	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newTypes,  iValues);  [CE]  cannot  find  symbol  values  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  values	101	None	replace
296	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldCount,  newTypes,  iValues);  [CE]  cannot  find  symbol  iFieldCount  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldCount,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldCount,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldCount	101	None	replace
297	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  iValues);  [CE]  cannot  find  symbol  iClass  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iClass	101	None	replace
298	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[])  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int[])	151	None	replace
299	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])	151	None	replace
300	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newValues,  iFieldIndex);	  Partial    newPartial    =    new    Partial(fieldType,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	151	None	replace
301	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value);  [CE]  cannot  find  symbol  newPartial  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  value);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	121	None	replace
302	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i  +  1);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i  +  1);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	121	None	replace
303	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newValues,  0,  i);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  0,  newValues,  0,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  0,  newValues,  0,  i);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	121	None	replace
304	[BUG]  [BUGGY]  System.arraycopy(iPartial,  0,  newValues,  0,  i);  [CE]  cannot  find  symbol  iPartial  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iPartial,  0,  newValues,  0,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iPartial,  0,  newValues,  0,  i);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  iPartial	121	None	replace
305	[BUG]  [BUGGY]  System.arraycopy(iChronology,  0,  newValues,  0,  i);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iChronology,  0,  newValues,  0,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iChronology,  0,  newValues,  0,  i);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	121	None	replace
306	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  values.length);  [CE]  cannot  find  symbol  values  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  values.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  values.length);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  values	121	None	replace
307	[BUG]  [BUGGY]  System.arraycopy(iFieldIndex,  0,  newValues,  0,  i);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iFieldIndex,  0,  newValues,  0,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iFieldIndex,  0,  newValues,  0,  i);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	121	None	replace
308	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  index);  [CE]  cannot  find  symbol  newPartial  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  index);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	121	None	replace
309	[BUG]  [BUGGY]  parse(iChronology,  newTypes,  iChronology);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parse(iChronology,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parse(iChronology,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
310	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parse(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parse(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parse(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
311	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parse(iChronology,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parse(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parse(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	115	None	replace
312	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parse(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parse(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parse(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	115	None	replace
313	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parse(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parse(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues);  parse(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	115	None	replace
314	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  parse(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  parse(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  parse(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	115	None	replace
315	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,<null>,DateTimeFieldType[])  [FE]    IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  null,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,<null>,DateTimeFieldType[])	91	None	replace
316	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,int[])  [FE]      IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  null,  newValues);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,int[])	91	None	replace
317	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,int[],Chronology)  [FE]        IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  null,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,int[],Chronology)	91	None	replace
318	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,Chronology,int[])  [FE]          IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,Chronology,int[])	91	None	replace
319	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]            IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology,  iFieldIndex);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	91	None	replace
320	[BUG]  [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	64	None	replace
321	[BUG]  [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  if(value  ==  getValue(index))  {  return  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  if(value  ==  getValue(index))  {  return  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  if(value  ==  getValue(index))  {  return	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
322	[BUG]  [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  if(value  ==  getValue(index))  {  return  this;  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  if(value  ==  getValue(index))  {  return  this;  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  if(value  ==  getValue(index))  {  return  this;  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	64	None	replace
323	[BUG]  [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  if(value  ==  getValue(index)  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  if(value  ==  getValue(index)  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  if(value  ==  getValue(index)	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  ')'  expected	64	None	replace
324	[BUG]  [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	64	None	replace
325	[BUG]  [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  cannot  find  symbol  newPartial	64	None	replace
326	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],DateTimeFieldType)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],DateTimeFieldType)	144	None	replace
327	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  fieldType,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[],DateTimeFieldType,DateTimeFieldType[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  fieldType,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  fieldType,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[],DateTimeFieldType,DateTimeFieldType[])	144	None	replace
328	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldType,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType,DateTimeFieldType[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldType,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldType,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType,DateTimeFieldType[],int)	144	None	replace
329	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
330	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues));	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
331	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value));	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
332	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  iTypes,  newValues));	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
333	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues));	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
334	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues));	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
335	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iChronology,  newTypes,  fieldType);  [CE]  cannot  find  symbol  partial  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(partial,  iChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  partial	31	None	replace
336	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iPartial,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iPartial  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iPartial,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iPartial,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	82	None	replace
337	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newPartial,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newPartial,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newPartial,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	82	None	replace
338	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iPosition,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iPosition  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iPosition,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iPosition,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPosition	82	None	replace
339	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology.partial,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  partial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology.partial,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology.partial,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  partial	82	None	replace
340	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iFieldIndex,  newValues,  value);  [CE]  cannot  find  symbol  partial  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iFieldIndex,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(partial,  iFieldIndex,  newValues,  value);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  partial	82	None	replace
341	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iPartialIndex,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iPartialIndex  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iPartialIndex,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iPartialIndex,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartialIndex	82	None	replace
342	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],Chronology)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],Chronology)	55	None	replace
343	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType,int[],int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType,int[],int[])	55	None	replace
344	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],int)	55	None	replace
345	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  fieldType,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],DateTimeFieldType,int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  fieldType,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  fieldType,  value);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],DateTimeFieldType,int)	55	None	replace
346	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])	55	None	replace
347	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],DateTimeFieldType,int[])  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],DateTimeFieldType,int[])	55	None	replace
348	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],Chronology,int[])  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],Chronology,int[])	55	None	replace
349	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType)	18	None	replace
350	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int,int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int,int)	18	None	replace
351	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value,  values);  [CE]  cannot  find  symbol  values  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value,  values);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  values	18	None	replace
352	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value,  iFieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	18	None	replace
353	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(value,  fieldType,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],Chronology)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(value,  fieldType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(value,  fieldType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],Chronology)	18	None	replace
354	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iTypes,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(this,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[],int)	153	None	replace
355	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(this,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[])	153	None	replace
356	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,DateTimeFieldType[],int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  this,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(this,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,DateTimeFieldType[],int[])	153	None	replace
357	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iTypes,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],DateTimeFieldType[],int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iTypes,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iTypes,  newTypes,  value);	  Partial    newPartial    =    new    Partial(this,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],DateTimeFieldType[],int)	153	None	replace
358	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[])	76	None	replace
359	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(value,  newTypes,  iValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],Chronology)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(value,  newTypes,  iValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(value,  newTypes,  iValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],Chronology)	76	None	replace
360	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(value,  iValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,int[],Chronology)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(value,  iValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(value,  iValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,int[],Chronology)	76	None	replace
361	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  incompatible  types	126	None	replace
362	[BUG]  [BUGGY]  int  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  incompatible  types	126	None	replace
363	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	126	None	replace
364	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[])	126	None	replace
365	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  values);  [CE]  cannot  find  symbol  values  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  newTypes,  values);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  values	126	None	replace
366	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int[])	35	None	replace
367	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],Chronology)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],Chronology)	35	None	replace
368	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  values);  [CE]  cannot  find  symbol  values  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  values);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  values	41	None	replace
369	[BUG]  [BUGGY]  int  index  =  indexOf(fieldType,  value);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(fieldType,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(fieldType,  value);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
370	[BUG]  [BUGGY]  int  index  =  indexOfSupported(fieldType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOfSupported(fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOfSupported(fieldType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
371	[BUG]  [BUGGY]  int  index  =  iFieldIndexOf(fieldType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  iFieldIndexOf(fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  iFieldIndexOf(fieldType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
372	[BUG]  [BUGGY]  int  index  =  iChronology.indexOf(fieldType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  iChronology.indexOf(fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  iChronology.indexOf(fieldType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
373	[BUG]  [BUGGY]  int  index  =  indexOf(iChronology,  fieldType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(iChronology,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(iChronology,  fieldType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
374	[BUG]  [BUGGY]  int  index  =  iIndexOf(fieldType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  iIndexOf(fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  iIndexOf(fieldType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
375	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf(fieldType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  iTypes.indexOf(fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  iTypes.indexOf(fieldType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
376	[BUG]  [BUGGY]  int  index  =  indexOf(newTypes,  fieldType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(newTypes,  fieldType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
377	[BUG]  [BUGGY]  int  index  =  indexOf(newTypes[i],  fieldType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(newTypes[i],  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(newTypes[i],  fieldType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
378	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  0,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int[])  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  0,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  0,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int[])	58	None	replace
379	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	143	None	replace
380	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i  +  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i  +  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	143	None	replace
381	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  2);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  2);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  2);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	143	None	replace
382	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  value.length  -  i);  [CE]  int  cannot  be  dereferenced  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  value.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  value.length  -  i);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  int  cannot  be  dereferenced	143	None	replace
383	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i;  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i;  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i;	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  ')'  expected	143	None	replace
384	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  data);  [CE]  cannot  find  symbol  data  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  data);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  data);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  data	94	None	replace
385	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  fieldIndex);  [CE]  cannot  find  symbol  fieldIndex  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  fieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  fieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	29	None	replace
386	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  dataArea,  i);  [CE]  cannot  find  symbol  dataArea  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  dataArea,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  dataArea,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  dataArea	29	None	replace
387	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  fields,  i);  [CE]  cannot  find  symbol  fields  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  fields,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  fields,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  fields	29	None	replace
388	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,DateTimeFieldType[],DateTimeFieldType)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,DateTimeFieldType[],DateTimeFieldType)	29	None	replace
389	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  name);  [CE]  cannot  find  symbol  name  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  name);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  name);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  name	29	None	replace
390	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],DateTimeFieldType[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],DateTimeFieldType[])	54	None	replace
391	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(<null>,Chronology,int[],DateTimeFieldType)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  iChronology,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,Chronology,int[],DateTimeFieldType)	54	None	replace
392	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  value,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(<null>,int,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  value,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  value,  newValues);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,int,int[])	80	None	replace
393	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  index,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(<null>,int,int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  index,  newValues);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,int,int[])	80	None	replace
394	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology.iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology.iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  iChronology.iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	80	None	replace
395	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldIndex,  newValues);  [CE]  cannot  find  symbol  fieldIndex  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  fieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	80	None	replace
396	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  iValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(<null>,int[],int[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  iValues,  newValues);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,int[],int[])	80	None	replace
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(null,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	compilable	  [FE]  AssertionFailedError  	80	13	replace
398	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  iTypes,  newValues);  [FE]  AssertionFailedError  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	compilable	  [FE]  AssertionFailedError  	80	13	replace
399	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  iValues);	  Partial    newPartial    =    new    Partial(newValues,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])	95	None	replace
400	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(newValues,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])	95	None	replace
401	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,int[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  fieldType,  iValues);	  Partial    newPartial    =    new    Partial(newValues,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,int[])	95	None	replace
402	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int[],int[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iValues,  newValues);	  Partial    newPartial    =    new    Partial(newValues,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],int[])	95	None	replace
403	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(iTypes,  newValues);	  Partial    newPartial    =    new    Partial(newValues,    iValues);    	compilable	  [FE]  IllegalArgumentException  	95	12	replace
404	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iTypes,  newValues);  [FE]  IllegalArgumentException  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iTypes,  newValues);	  Partial    newPartial    =    new    Partial(newValues,    iValues);    	compilable	  [FE]  IllegalArgumentException  	95	12	replace
405	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iFieldIndex,  iChronology);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iFieldIndex,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iFieldIndex,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fields,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	4	None	replace
406	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(newTypes,  iValues,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fields,    iChronology);    	compilable	  [FE]  IllegalArgumentException  	4	12	replace
407	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iValues,  iChronology);  [FE]  IllegalArgumentException  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iValues,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fields,    iChronology);    	compilable	  [FE]  IllegalArgumentException  	4	12	replace
408	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  values,  iChronology);  [CE]  cannot  find  symbol  values  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  values,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  values,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fields,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  values	4	None	replace
409	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],Chronology)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],Chronology)	96	None	replace
410	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iCase);  [CE]  cannot  find  symbol  iCase  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iCase);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iCase);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  iCase	96	None	replace
411	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iTypes,  iChronology,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],Chronology,DateTimeFieldType)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iTypes,  iChronology,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iTypes,  iChronology,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],Chronology,DateTimeFieldType)	96	None	replace
412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    iValues);    	compilable	  [FE]  AssertionFailedError  	75	12	replace
413	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    iValues);    	compilable	  [FE]  AssertionFailedError  	75	12	replace
414	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  iValues);  [CE]  cannot  find  symbol  iFieldTypes  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	75	None	replace
415	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	75	None	replace
416	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  iValues);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  values	75	None	replace
417	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType)	52	None	replace
418	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int[],int)	23	None	replace
419	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	23	None	replace
420	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,int[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,int[])	23	None	replace
421	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,DateTimeFieldType[],int[])  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,DateTimeFieldType[],int[])	146	None	replace
422	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iTypes,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iTypes,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iTypes,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType)	146	None	replace
423	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],int[])	146	None	replace
424	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int[])	146	None	replace
425	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  iValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],int[])	146	None	replace
426	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes,  fieldType);  [CE]  cannot  find  symbol  fields  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	145	None	replace
427	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],int)	38	None	replace
428	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  fieldType,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],DateTimeFieldType,int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  fieldType,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  fieldType,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],DateTimeFieldType,int[],int)	38	None	replace
429	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  fieldType,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],DateTimeFieldType,int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  fieldType,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  fieldType,  i);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],DateTimeFieldType,int)	38	None	replace
430	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int[],int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int[],int)	38	None	replace
431	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  fields,  newValues,  i);  [CE]  cannot  find  symbol  fields  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  fields,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  fields,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  fields	38	None	replace
432	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],DateTimeFieldType)	38	None	replace
433	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  values[i]);  [CE]  cannot  find  symbol  values  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  values[i]);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  values[i]);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  values	38	None	replace
434	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  in,  newTypes,  newValues,  i);  [CE]  cannot  find  symbol  in  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  in,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  in,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  in	38	None	replace
435	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
436	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
437	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values).set(this,  index,  newValues);  [CE]  cannot  find  symbol  values  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	131	None	replace
438	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  dataArea,  iValues).set(this,  index,  newValues);  [CE]  cannot  find  symbol  dataArea  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  dataArea,  iValues).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  dataArea,  iValues).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol  dataArea	131	None	replace
439	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value).set(this,  index,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	131	None	replace
440	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes).set(this,  index,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	131	None	replace
441	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  index).set(this,  index,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  index).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  index).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	131	None	replace
442	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null).set(this,  index,  newValues);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
443	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues[i],  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues[i],  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues[i],  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])	25	None	replace
444	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])	25	None	replace
445	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes[i],  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes[i],  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes[i],  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	25	None	replace
446	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  fields);  [CE]  cannot  find  symbol  fields  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  fields);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  cannot  find  symbol  fields	25	None	replace
447	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,Chronology)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,Chronology)	25	None	replace
448	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  data);  [CE]  cannot  find  symbol  data  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  data);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  data);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  cannot  find  symbol  data	25	None	replace
449	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  values);  [CE]  cannot  find  symbol  values  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  values);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	25	None	replace
450	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int)  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  value);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int)	25	None	replace
451	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  newPartial  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newValues.length  -  i);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	12	None	replace
452	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	12	None	replace
453	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  values.length  -  i  -  1);  [CE]  cannot  find  symbol  values  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  values.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  values.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  values	12	None	replace
454	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  newValues,  value);  [CE]  cannot  find  symbol  iClass  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iClass,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  iClass	39	None	replace
455	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newTypes,  newValues,  i);  [CE]  cannot  find  symbol  iFieldType  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iClass,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  iFieldType	39	None	replace
456	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iClass,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int)	39	None	replace
457	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  newValues,  i);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iClass,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	39	None	replace
458	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iClass,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],int)	39	None	replace
459	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iGenerator,  newTypes,  newValues,  i);  [CE]  cannot  find  symbol  iGenerator  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iGenerator,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iGenerator,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iClass,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  iGenerator	39	None	replace
460	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iClass,  iChronology,  newTypes,  newValues,  i);  [CE]  cannot  find  symbol  iClass  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iClass,  iChronology,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iClass,  iChronology,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iClass,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  iClass	39	None	replace
461	[BUG]  [BUGGY]  Paratial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Paratial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Paratial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Paratial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
462	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[])  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes);	  Partial    newPartial    =    new    Partial(newValues,    iTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[])	150	None	replace
463	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,DateTimeFieldType[])  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  fieldType,  iTypes);	  Partial    newPartial    =    new    Partial(newValues,    iTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,DateTimeFieldType[])	150	None	replace
464	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[],int)	36	None	replace
465	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  i,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int[],int,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  i,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  i,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],int,int[])	36	None	replace
466	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	36	None	replace
467	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],int)	36	None	replace
468	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  newValues);  [CE]  cannot  find  symbol  iClass  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iClass	36	None	replace
469	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[],DateTimeFieldType)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[],DateTimeFieldType)	51	None	replace
470	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iFieldIndex,  newValues,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iFieldIndex,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iFieldIndex,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	51	None	replace
471	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,int[])	51	None	replace
472	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this.iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this.iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  this.iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	79	None	replace
473	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(iChronology),  newValues);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(iChronology),  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(iChronology),  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
474	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataArea,  newValues);  [CE]  cannot  find  symbol  dataArea  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataArea,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  dataArea,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  dataArea	79	None	replace
475	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  oldValues);  [CE]  cannot  find  symbol  oldValues  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  oldValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  oldValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    oldValues);    	non-compiled	[CE]  cannot  find  symbol  oldValues	100	None	replace
476	[BUG]  [BUGGY]  Partial  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValues);  [CE]  type  Partial  does  not  take  parameters  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  type  Partial  does  not  take  parameters	59	None	replace
477	[BUG]  [BUGGY]  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  newPartial  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	59	None	replace
478	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	78	None	replace
479	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int,Chronology,int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    index,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,Chronology,int[])	78	None	replace
480	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  index,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,int,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    index,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,int,int[])	78	None	replace
481	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    index,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType)	78	None	replace
482	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  iChronology);  [CE]  cannot  find  symbol  dataArea  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  dataArea	56	None	replace
483	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,Chronology,int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,Chronology,int[])	56	None	replace
484	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fields,  iChronology);  [CE]  cannot  find  symbol  fields  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fields,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fields,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  fields	158	None	replace
485	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],Chronology)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],Chronology)	158	None	replace
486	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  dataArea,  iChronology);  [CE]  cannot  find  symbol  dataArea  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  dataArea,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  dataArea,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  dataArea	158	None	replace
487	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  data);  [CE]  cannot  find  symbol  data  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  data);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  data);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  data	88	None	replace
488	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  null);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],<null>)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    values);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],<null>)	88	None	replace
489	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  dataArea);  [CE]  cannot  find  symbol  dataArea  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  dataArea);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  dataArea);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  dataArea	88	None	replace
490	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iKeys,  newValues,  value);  [CE]  cannot  find  symbol  iKeys  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iKeys,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iKeys,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  iKeys	88	None	replace
491	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataType,  newValues);  [CE]  cannot  find  symbol  dataType  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  dataType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  dataType	149	None	replace
492	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	74	None	replace
493	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  fieldType,  iValues);  [CE]  cannot  find  symbol  fields  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  fieldType,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields[i],  fieldType,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues);    	non-compiled	[CE]  cannot  find  symbol  fields	74	None	replace
494	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[])	74	None	replace
495	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType)	74	None	replace
496	[BUG]  [BUGGY]  partial  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  partial  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  partial  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	partial  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    partial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  partial	61	None	replace
497	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[],int,int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[],int,int)	128	None	replace
498	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int,int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int,int)	128	None	replace
499	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int[],int,int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int[],int,int)	128	None	replace
500	[BUG]  [BUGGY]  System.arraycopy(iValues,  iTypes,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  iTypes,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  iTypes,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	128	None	replace
501	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  fieldType,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType,int[],int,int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  fieldType,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  fieldType,  iValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType,int[],int,int)	128	None	replace
502	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  iClass  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  iClass	128	None	replace
503	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  values,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  values  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  values,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  values,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  values	128	None	replace
504	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  value,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int,int,int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  value,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  value,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int,int,int)	128	None	replace
505	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  i  +  1,  newTypes.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int,int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  i  +  1,  newTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues,  i  +  1,  newTypes.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int,int)	128	None	replace
506	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    value,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	77	None	replace
507	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(value,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int,Chronology,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(value,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(value,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    value,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,Chronology,int[])	77	None	replace
508	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  data);  [CE]  cannot  find  symbol  data  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  data);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  data);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    data);    	non-compiled	[CE]  cannot  find  symbol  data	163	None	replace
509	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  data);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  data);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  data);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    data);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	163	None	replace
510	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fieldType,  i);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],DateTimeFieldType,int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fieldType,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fieldType,  i);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],DateTimeFieldType,int)	159	None	replace
511	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  values,  i);  [CE]  cannot  find  symbol  values  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  values,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  values,  i);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  values	159	None	replace
512	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  dataArea,  i);  [CE]  cannot  find  symbol  dataArea  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  dataArea,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  dataArea,  i);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  dataArea	159	None	replace
513	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,DateTimeFieldType[],int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  this,  newTypes,  i);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,DateTimeFieldType[],int)	159	None	replace
514	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fields,  i);  [CE]  cannot  find  symbol  fields  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fields,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  fields,  i);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  fields	159	None	replace
515	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  i);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],int)	159	None	replace
516	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  i);  [CE]  cannot  find  symbol  dataArea  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  dataArea	34	None	replace
517	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  fieldIndex);  [CE]  cannot  find  symbol  fieldIndex  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  fieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  fieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	34	None	replace
518	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  path);  [CE]  cannot  find  symbol  path  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  path);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  path);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  path	34	None	replace
519	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  name);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  name);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  name	34	None	replace
520	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],int)	34	None	replace
521	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  iPartial  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	133	None	replace
522	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues);  [CE]  cannot  find  symbol  iPartial  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	133	None	replace
523	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  iPartial  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	133	None	replace
524	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues,  value);  [CE]  cannot  find  symbol  iPartial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	133	None	replace
525	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues,  i);  [CE]  cannot  find  symbol  iPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	133	None	replace
526	[BUG]  [BUGGY]  parse(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
527	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parse(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	130	None	replace
528	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  parse(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  values  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  values	130	None	replace
529	[BUG]  [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  parse(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])	130	None	replace
530	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  parse(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[])	130	None	replace
531	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  parse(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	130	None	replace
532	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  parse(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	130	None	replace
533	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  parse(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	130	None	replace
534	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newTypes.length);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newTypes.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newTypes.length);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int)	138	None	replace
535	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fieldTypes);  [CE]  cannot  find  symbol  fieldTypes  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fieldTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fieldTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	138	None	replace
536	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fields,  newTypes);  [CE]  cannot  find  symbol  fields  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fields,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fields,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fields	138	None	replace
537	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fields,  iChronology,  newTypes);  [CE]  cannot  find  symbol  fields  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fields,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fields,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fields	138	None	replace
538	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    values);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)	147	None	replace
539	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iType,  newValues);  [CE]  cannot  find  symbol  iType  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iType	104	None	replace
540	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(iChronology,  null,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldType,    newValues);    	compilable	  [FE]  NullPointerException  	104	13	replace
541	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newValues);  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  null,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldType,    newValues);    	compilable	  [FE]  NullPointerException  	104	13	replace
542	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  type,  newValues);  [CE]  cannot  find  symbol  type  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  type,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  type,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  type	104	None	replace
543	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  data);  [CE]  cannot  find  symbol  data  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  data);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  data);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  data	19	None	replace
544	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  values  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  values	125	None	replace
545	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])	125	None	replace
546	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	125	None	replace
547	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],DateTimeFieldType,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],DateTimeFieldType,int[])	125	None	replace
548	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	125	None	replace
549	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	125	None	replace
550	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	125	None	replace
551	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  values);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	125	None	replace
552	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],DateTimeFieldType,int[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],DateTimeFieldType,int[])	125	None	replace
553	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int)	116	None	replace
554	[BUG]  [BUGGY]  System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	116	None	replace
555	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  values  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  values	116	None	replace
556	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int,int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int,int)	116	None	replace
557	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	116	None	replace
558	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  iClass  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  iClass	116	None	replace
559	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values[i],  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  values  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values[i],  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values[i],  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  values	116	None	replace
560	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int[],int,int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newValues,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int[],int,int)	116	None	replace
561	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  i  +  1,  newValues.length  -  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int,int)  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int,int)	116	None	replace
562	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newType,  fieldType,  newValues,  iChronology);  [CE]  cannot  find  symbol  newType  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newType,  fieldType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newType,  fieldType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(fieldType,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newType	53	None	replace
563	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newValues,  fieldType);  [CE]  cannot  find  symbol  newChronology  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newChronology,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newChronology	53	None	replace
564	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  fieldType,  newValues);  [CE]  cannot  find  symbol  newChronology  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newChronology,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newChronology	53	None	replace
565	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iGeneratorIndex,  newValues);  [CE]  cannot  find  symbol  iGeneratorIndex  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iGeneratorIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iGeneratorIndex,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iGeneratorIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iGeneratorIndex	108	None	replace
566	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iGeneratorIndex,  newValues);  [CE]  cannot  find  symbol  partial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iGeneratorIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(partial,  iGeneratorIndex,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iGeneratorIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  partial	108	None	replace
567	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  iGeneratorIndex,  newValues);  [CE]  cannot  find  symbol  iGeneratorIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iGeneratorIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  iGeneratorIndex,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iGeneratorIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iGeneratorIndex	108	None	replace
568	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i  *  1);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i  *  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i  *  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	141	None	replace
569	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  2  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  2  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  2  -  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	141	None	replace
570	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  value.length  -  i  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  value.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  value.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	141	None	replace
571	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  1,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	141	None	replace
572	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],DateTimeFieldType[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],DateTimeFieldType[])	118	None	replace
573	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  iFieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	118	None	replace
574	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  value,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType[])	118	None	replace
575	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iGeneratorIndex,  newValues,  newTypes);  [CE]  cannot  find  symbol  iGeneratorIndex  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iGeneratorIndex,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iGeneratorIndex,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  iGeneratorIndex	118	None	replace
576	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldIndex,  newValues,  newTypes);  [CE]  cannot  find  symbol  fieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldIndex,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldIndex,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	118	None	replace
577	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  newValues,  fieldType);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(partial,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	57	None	replace
578	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],DateTimeFieldType)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(partial,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],DateTimeFieldType)	57	None	replace
579	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newTypes,  newValues,  fieldType);  [CE]  cannot  find  symbol  iFieldType  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newTypes,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newTypes,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(partial,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  iFieldType	57	None	replace
580	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  value);	  Partial    newPartial    =    new    Partial(this,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,int[],int)	136	None	replace
581	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  values);	  Partial    newPartial    =    new    Partial(this,    fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	136	None	replace
582	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,DateTimeFieldType,int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  this,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(this,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,DateTimeFieldType,int[])	136	None	replace
583	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  fieldType);	  Partial    newPartial    =    new    Partial(this,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType)	136	None	replace
584	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Partial,int[],DateTimeFieldType)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(this,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,int[],DateTimeFieldType)	136	None	replace
585	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  index);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newValues,  index);	  Partial    newPartial    =    new    Partial(this,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,int[],int)	136	None	replace
586	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  *  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  *  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  *  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	15	None	replace
587	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  value.length  -  i  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  value.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  value.length  -  i  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
588	[BUG]  [BUGGY]  System.arraycopy(iValues,  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	15	None	replace
589	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	13	None	replace
590	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  fieldType.length  -  i  -  1);  [CE]  cannot  find  symbol  length  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  fieldType.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  fieldType.length  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	13	None	replace
591	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  0,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	13	None	replace
592	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  iChronology.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  iChronology.length  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  iChronology.length  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	13	None	replace
593	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  *  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  *  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  *  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	13	None	replace
594	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i;  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i;  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i;	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  ')'  expected	13	None	replace
595	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  oldTypes.length  -  i  -  1);  [CE]  cannot  find  symbol  oldTypes  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  oldTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  oldTypes.length  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  oldTypes	13	None	replace
596	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	156	None	replace
597	[BUG]  [BUGGY]  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
598	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  values	156	None	replace
599	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	156	None	replace
600	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[])	156	None	replace
601	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	156	None	replace
602	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	156	None	replace
603	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	156	None	replace
604	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	63	13	replace
605	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	63	13	replace
606	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	63	None	replace
607	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  this.iChronology.validate(newPartial,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  this.iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	63	None	replace
608	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  this.iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  values  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values);  this.iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	63	None	replace
609	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	63	13	replace
610	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	63	13	replace
611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  this.iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	63	1	replace
612	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  this.iChronology.validate(newPartial,  newValues);  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  this.iChronology.validate(newPartial,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	63	1	replace
613	[BUG]  [BUGGY]  iChronology.validate(iPartial,  newValues);  [CE]  cannot  find  symbol  iPartial  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(iPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(iPartial,  newValues);	  iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	9	None	replace
614	[BUG]  [BUGGY]  iChronology.validate(newPartial,  values);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newPartial,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newPartial,  values);	  iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	9	None	replace
615	[BUG]  [BUGGY]  iChronology.validate(null,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(null,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(null,  newValues);	  iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	9	None	replace
616	[BUG]  [BUGGY]  iChronology.validate(this.iPartial,  newValues);  [CE]  cannot  find  symbol  iPartial  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(this.iPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(this.iPartial,  newValues);	  iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	9	None	replace
617	[BUG]  [BUGGY]  iChronology.validate(newPartial,  value);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newPartial,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newPartial,  value);	  iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	9	None	replace
618	[BUG]  [BUGGY]  iChronology.validate(partial,  newValues);  [CE]  cannot  find  symbol  partial  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(partial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(partial,  newValues);	  iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  partial	9	None	replace
619	[BUG]  [BUGGY]  iChronology.validate(value,  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(value,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(value,  newValues);	  iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	9	None	replace
620	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  [CE]  cannot  find  symbol  newKeys  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  newKeys	72	None	replace
621	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newKeys);  [CE]  cannot  find  symbol  newKeys  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newKeys);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newKeys);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  newKeys	72	None	replace
622	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newKeys);  [CE]  cannot  find  symbol  newKeys  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newKeys);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newKeys);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  newKeys	72	None	replace
623	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iKeys,  newValues);  [CE]  cannot  find  symbol  iKeys  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iKeys,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iKeys,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  iKeys	72	None	replace
624	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newKeys);  [CE]  cannot  find  symbol  fieldTypes  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newKeys);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newKeys);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	72	None	replace
625	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newKeys,  iTypes);  [CE]  cannot  find  symbol  newKeys  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newKeys,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newKeys,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  newKeys	72	None	replace
626	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  i);  [CE]  cannot  find  symbol  iPartial  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	155	None	replace
627	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  value);  [CE]  cannot  find  symbol  iPartial  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	155	None	replace
628	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  null);  [CE]  cannot  find  symbol  iPartial  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newTypes,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	155	None	replace
629	[BUG]  [BUGGY]  Partial  iPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  newPartial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iPartial  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	155	None	replace
630	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  depth);  [CE]  cannot  find  symbol  depth  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  depth);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  depth);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    dataArea);    	non-compiled	[CE]  cannot  find  symbol  depth	137	None	replace
631	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,Chronology)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    chronology,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,Chronology)	5	None	replace
632	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  chronology);  [CE]  cannot  find  symbol  chronology  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  chronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  chronology);	  Partial    newPartial    =    new    Partial(newTypes,    chronology,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  chronology	5	None	replace
633	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  chronology);  [CE]  cannot  find  symbol  chronology  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  chronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  chronology);	  Partial    newPartial    =    new    Partial(newTypes,    chronology,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  chronology	5	None	replace
634	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  chronology);  [CE]  cannot  find  symbol  chronology  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  chronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  chronology);	  Partial    newPartial    =    new    Partial(newTypes,    chronology,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  chronology	5	None	replace
635	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  chronology,  newTypes);  [CE]  cannot  find  symbol  chronology  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  chronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  chronology,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    chronology,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  chronology	5	None	replace
636	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]    AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
637	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]      AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
638	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iFieldIndex,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]        AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iFieldIndex,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iFieldIndex,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
639	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]          AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
640	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  this.iChronology.validate(newPartial,  newValues);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]            AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  this.iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  this.iChronology.validate(newPartial,  newValues);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
641	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  0,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]              AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  0,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  0,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
642	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iFieldIndex,  newValues,  0,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iFieldIndex,  newValues,  0,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iFieldIndex,  newValues,  0,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
643	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iFieldIndex,  newValues,  i  +  1,  newValues.length  *  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                  AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iFieldIndex,  newValues,  i  +  1,  newValues.length  *  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iTypes,  iFieldIndex,  newValues,  i  +  1,  newValues.length  *  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
644	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  i,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],int,int[],Chronology)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  i,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  i,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],int,int[],Chronology)	37	None	replace
645	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  i,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],int,int[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  i,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  i,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],int,int[],int)	37	None	replace
646	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  newTypes);  [CE]  cannot  find  symbol  iClass  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  iClass	37	None	replace
647	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],int)	37	None	replace
648	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],Chronology)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],Chronology)	26	None	replace
649	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],int)	26	None	replace
650	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  index);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType,int[],int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  fieldType,  newValues,  index);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType,int[],int)	26	None	replace
651	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[])  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[])	26	None	replace
652	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(dataset,  iChronology,  fieldType,  newValues,  index);  [CE]  cannot  find  symbol  dataset  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(dataset,  iChronology,  fieldType,  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(dataset,  iChronology,  fieldType,  newValues,  index);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  dataset	26	None	replace
653	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  indexType,  newValues,  fieldType);  [CE]  cannot  find  symbol  indexType  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  indexType,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  indexType,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  indexType	26	None	replace
654	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	160	None	replace
655	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,int)	160	None	replace
656	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  newValues.length);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	160	None	replace
657	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)	160	None	replace
658	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  newValues.length);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	160	None	replace
659	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues.length,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues.length,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues.length,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int)	160	None	replace
660	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues.length  -  1,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues.length  -  1,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues.length  -  1,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int)	160	None	replace
661	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	70	None	replace
662	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  oldPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  oldPartial	70	None	replace
663	[BUG]  [BUGGY]  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	70	None	replace
664	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataType,  newValues,  values);  [CE]  cannot  find  symbol  dataType  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataType,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  dataType,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  dataType	89	None	replace
665	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues(iFieldIndex);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues(iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues(iFieldIndex);	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
666	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesInYear();  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValuesInYear();  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValuesInYear();	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
667	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getNewValues();  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getNewValues();  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getNewValues();	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
668	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesArray();  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValuesArray();  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValuesArray();	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
669	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getFieldValues();  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getFieldValues();  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getFieldValues();	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
670	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesInArray();  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValuesInArray();  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValuesInArray();	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
671	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues(iTypes);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues(iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues(iTypes);	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
672	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	17	None	replace
673	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i.length  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i.length  -  1);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
674	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i.length  -  i);  [CE]  int  cannot  be  dereferenced  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i.length  -  i);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
675	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  +  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  +  1);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	17	None	replace
676	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  2);  [CE]  cannot  find  symbol  newPartial  [FE]                                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  2);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  2);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	17	None	replace
677	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value.length  -  i);  [CE]  int  cannot  be  dereferenced  [FE]                                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  value.length  -  i);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
678	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1,  i);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1,  i);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	replace
679	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  dataArea);  [CE]  cannot  find  symbol  dataArea  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  dataArea);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  dataArea);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    dataArea);    	non-compiled	[CE]  cannot  find  symbol  dataArea	162	None	replace
680	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  fields);  [CE]  cannot  find  symbol  fields  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  fields);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    dataArea);    	non-compiled	[CE]  cannot  find  symbol  fields	162	None	replace
681	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  depth);  [CE]  cannot  find  symbol  depth  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  depth);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  depth);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    dataArea);    	non-compiled	[CE]  cannot  find  symbol  depth	162	None	replace
682	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	129	None	replace
683	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  values  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  values).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  values	129	None	replace
684	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  iValues).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  iValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  iValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[])	129	None	replace
685	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  index).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  index).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  index).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	129	None	replace
686	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	113	None	replace
687	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	113	None	replace
688	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	113	None	replace
689	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  fields  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fields	113	None	replace
690	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  values  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  values);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	113	None	replace
691	[BUG]  [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType,int[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType,int[])	113	None	replace
692	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	113	None	replace
693	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  type);  [CE]  cannot  find  symbol  type  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  type);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  type);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  type	85	None	replace
694	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  index);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  index);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    values);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	85	None	replace
695	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value.length);  [CE]  int  cannot  be  dereferenced  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  value.length);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
696	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  oldValues.length);  [CE]  cannot  find  symbol  oldValues  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  oldValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  oldValues.length);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  cannot  find  symbol  oldValues	122	None	replace
697	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  data.length);  [CE]  cannot  find  symbol  data  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  data.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  data.length);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  cannot  find  symbol  data	122	None	replace
698	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i).length);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i).length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i).length);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  not  a  statement	122	None	replace
699	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(value,  iChronology,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(int,Chronology,DateTimeFieldType[])  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(value,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(value,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,Chronology,DateTimeFieldType[])	7	None	replace
700	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  value,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],int,Chronology)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  value,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  value,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],int,Chronology)	7	None	replace
701	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fieldType,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,DateTimeFieldType,int)  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fieldType,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  fieldType,  value);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,DateTimeFieldType,int)	7	None	replace
702	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType[])	120	None	replace
703	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newTypes);    	compilable	  [FE]  IllegalArgumentException  	120	12	replace
704	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iValues);  [FE]  IllegalArgumentException  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newTypes);    	compilable	  [FE]  IllegalArgumentException  	120	12	replace
705	[BUG]  [BUGGY]  iChronology  =  new  Partial(iChronology,  newValues);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  =  new  Partial(iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  =  new  Partial(iChronology,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	109	None	replace
706	[BUG]  [BUGGY]  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  =  new  Partial(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	109	None	replace
707	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues);  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues);  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues);  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])	109	None	replace
708	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues);  iChronology  =  new  Partial(iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues);  iChronology  =  new  Partial(iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues);  iChronology  =  new  Partial(iChronology,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])	109	None	replace
709	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues);  iChronology  =  new  Partial(iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues);  iChronology  =  new  Partial(iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues);  iChronology  =  new  Partial(iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[])	109	None	replace
710	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,int[])	105	None	replace
711	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iChronology,  newValues,  fieldType);  [CE]  cannot  find  symbol  partial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iChronology,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(partial,  iChronology,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  partial	105	None	replace
712	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newType,  iChronology,  newValues);  [CE]  cannot  find  symbol  newType  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newType,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newType,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  newType	105	None	replace
713	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType)	97	None	replace
714	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  fieldType,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  fieldType,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this.iChronology,  fieldType,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])	97	None	replace
715	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  newTypes);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[])	97	None	replace
716	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType[])	49	None	replace
717	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newValues,  iTypes);  [CE]  cannot  find  symbol  fields  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iTypes);    	non-compiled	[CE]  cannot  find  symbol  fields	49	None	replace
718	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldType,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType,DateTimeFieldType[])  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldType,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldType,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType,DateTimeFieldType[])	49	None	replace
719	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldIndex);  [CE]  cannot  find  symbol  fieldIndex  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iFieldIndex);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	42	None	replace
720	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iFieldIndex);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	42	None	replace
721	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  itemIndex);  [CE]  cannot  find  symbol  itemIndex  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  itemIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  itemIndex);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iFieldIndex);    	non-compiled	[CE]  cannot  find  symbol  itemIndex	42	None	replace
722	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getField(index),  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeField,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getField(index),  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getField(index),  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    index,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeField,int[])	78	None	replace
723	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  newTypes,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	119	None	replace
724	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newTypes,  fieldType,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],DateTimeFieldType,int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newTypes,  fieldType,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  newTypes,  fieldType,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],DateTimeFieldType,int)	119	None	replace
725	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)	27	None	replace
726	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)	27	None	replace
727	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  iTypes);  [CE]  cannot  find  symbol  values  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iTypes);    	non-compiled	[CE]  cannot  find  symbol  values	49	None	replace
728	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newValues,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,<null>,int[],DateTimeFieldType[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  null,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,<null>,int[],DateTimeFieldType[])	49	None	replace
729	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  null,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,<null>,Chronology)  [FE]    IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  null,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,<null>,Chronology)	91	None	replace
730	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  this,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Partial,Chronology)  [FE]      IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  this,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  this,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Partial,Chronology)	91	None	replace
731	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,int[],Chronology)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  fieldType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  fieldType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(newValues,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType,int[],Chronology)	20	None	replace
732	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  newPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  newPartial	129	None	replace
733	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  iFieldTypes  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	129	None	replace
734	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  0,  newValues.length).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  0,  newValues.length).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  0,  newValues.length).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int,int)	129	None	replace
735	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value).set(this,  index,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value).set(this,  index,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value).set(this,  index,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	129	None	replace
736	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
737	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[])  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  iValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[])	129	None	replace
738	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,DateTimeFieldType[],DateTimeFieldType)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],Chronology,DateTimeFieldType[],DateTimeFieldType)	138	None	replace
739	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  iChronology,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,Chronology,DateTimeFieldType[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,Chronology,DateTimeFieldType[])	138	None	replace
740	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  2);  [CE]  cannot  find  symbol  newPartial  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  2);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  2);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	139	None	replace
741	[BUG]  [BUGGY]  System.arraycopy(newValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(newValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(newValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	139	None	replace
742	[BUG]  [BUGGY]  System.arraycopy(iChronology,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iChronology,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iChronology,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	139	None	replace
743	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],int)	159	None	replace
744	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  0,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int,int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  0,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  0,  newValues.length);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int,int)	159	None	replace
745	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  null);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],<null>)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  null);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],<null>)	159	None	replace
746	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
747	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
748	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
749	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
750	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType));	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
751	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	154	None	replace
752	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	154	None	replace
753	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	154	None	replace
754	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	154	None	replace
755	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology.validate(newPartial,  newValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	154	None	replace
756	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology.validate(newPartial,  newValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	154	None	replace
757	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	154	None	replace
758	[BUG]  [BUGGY]  System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	15	None	replace
759	[BUG]  [BUGGY]  System.arraycopy(iChronology,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iChronology,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iChronology,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	15	None	replace
760	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int[])  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int[])	101	None	replace
761	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  fields);  [CE]  cannot  find  symbol  fields  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  fields);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  fields	101	None	replace
762	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology.iChronology,  newValues);  [CE]  cannot  find  symbol  iChronology  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  iChronology.iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  iChronology.iChronology,  newValues);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iChronology	80	None	replace
763	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iFieldIndex);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	80	None	replace
764	[BUG]  [BUGGY]  System.arraycopy(iValues,  iChronology,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  iChronology,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  iChronology,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	12	None	replace
765	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	12	None	replace
766	[BUG]  [BUGGY]  System.arraycopy(iChronology,  i,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iChronology,  i,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iChronology,  i,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	12	None	replace
767	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType)	34	None	replace
768	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],int[])	35	None	replace
769	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fields);  [CE]  cannot  find  symbol  fields  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fields);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fields	35	None	replace
770	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	111	None	replace
771	[BUG]  [BUGGY]  int  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  incompatible  types	111	None	replace
772	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	141	None	replace
773	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	126	None	replace
774	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes);  [CE]  cannot  find  symbol  iFieldTypes  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	126	None	replace
775	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	126	None	replace
776	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iPartial  =  new  Partial(iPartial,  iTypes,  newValues);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iPartial  =  new  Partial(iPartial,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iPartial  =  new  Partial(iPartial,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  incompatible  types	133	None	replace
777	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	133	None	replace
778	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  fieldType,  newValues);  [CE]  cannot  find  symbol  iPartial  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	133	None	replace
779	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  FieldUtils.safeMultiply(iChronology,  fieldType,  newValues));  [CE]  no  suitable  method  found  for  safeMultiply(Chronology,DateTimeFieldType,int[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  FieldUtils.safeMultiply(iChronology,  fieldType,  newValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  FieldUtils.safeMultiply(iChronology,  fieldType,  newValues));	  Partial    newPartial    =    new    Partial(this,    iChronology,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(Chronology,DateTimeFieldType,int[])	24	None	replace
780	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  new  TypedFieldType(fieldType,  newValues));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  new  TypedFieldType(fieldType,  newValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  new  TypedFieldType(fieldType,  newValues));	  Partial    newPartial    =    new    Partial(this,    iChronology,    fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
781	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  FieldUtils.safeMultiply(fieldType,  iChronology,  newValues));  [CE]  no  suitable  method  found  for  safeMultiply(DateTimeFieldType,Chronology,int[])  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  FieldUtils.safeMultiply(fieldType,  iChronology,  newValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  FieldUtils.safeMultiply(fieldType,  iChronology,  newValues));	  Partial    newPartial    =    new    Partial(this,    iChronology,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(DateTimeFieldType,Chronology,int[])	24	None	replace
782	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataTypes,  newValues,  i);  [CE]  cannot  find  symbol  dataTypes  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  dataTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  dataTypes	106	None	replace
783	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[],int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[],int)	76	None	replace
784	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int)	76	None	replace
785	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  index,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],int[],int)	76	None	replace
786	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newKeys[i],  newValues);  [CE]  cannot  find  symbol  newKeys  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newKeys[i],  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newKeys[i],  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  cannot  find  symbol  newKeys	25	None	replace
787	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values[i],  newValues);  [CE]  cannot  find  symbol  values  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values[i],  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values[i],  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	25	None	replace
788	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  dataNode);  [CE]  cannot  find  symbol  dataNode  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  dataNode);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  dataNode);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  dataNode	85	None	replace
789	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  newTypes,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[],Chronology)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  newTypes,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  newTypes,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[],Chronology)	117	None	replace
790	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Partial,int[],Chronology)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,int[],Chronology)	117	None	replace
791	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])	117	None	replace
792	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  fields);  [CE]  cannot  find  symbol  fields  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  fields);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fields	117	None	replace
793	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  index);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  index);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],int)	26	None	replace
794	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  index);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldIndex,  newValues,  index);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	26	None	replace
795	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  fieldType,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],int)	26	None	replace
796	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Type[iTypes.size()  ]);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Type[iTypes.size()  ]);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iTypes.toArray(new  Type[iTypes.size()  ]);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	65	None	replace
797	[BUG]  [BUGGY]  int[]  newValues  =  getValues();  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  getValues();  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  getValues();	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	65	None	replace
798	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  fields,  fieldType);  [CE]  cannot  find  symbol  fields  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  fields,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues[i],  fields,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	161	None	replace
799	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newValues,  value);  [CE]  cannot  find  symbol  fields  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	161	None	replace
800	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	16	None	replace
801	[BUG]  [BUGGY]  System.arraycopy(iFieldIndex,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iFieldIndex,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iFieldIndex,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	16	None	replace
802	[BUG]  [BUGGY]  System.arraycopy(newTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(newTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(newTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	16	None	replace
803	[BUG]  [BUGGY]  System.arraycopy(iKeys,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [CE]  cannot  find  symbol  iKeys  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iKeys,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iKeys,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  iKeys	16	None	replace
804	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,DateTimeFieldType[],int[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,DateTimeFieldType[],int[])	97	None	replace
805	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],DateTimeFieldType)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],DateTimeFieldType)	97	None	replace
806	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],int[])	97	None	replace
807	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,int[],DateTimeFieldType[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,int[],DateTimeFieldType[])	97	None	replace
808	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)	18	None	replace
809	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  getChronology(),  fieldType,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType,int[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  getChronology(),  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  getChronology(),  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(this,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType,int[])	136	None	replace
810	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],int)	92	None	replace
811	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],Chronology)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  newTypes,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],Chronology)	92	None	replace
812	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(index,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(index,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[])	92	None	replace
813	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newValues,  newTypes);  [CE]  cannot  find  symbol  iFieldType  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  iFieldType	41	None	replace
814	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(newPartial,  iTypes,  newValues);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(newPartial,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(newPartial,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
815	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iTypes,  newTypes,  value);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iTypes,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iTypes,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
816	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	134	None	replace
817	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iTypes,  fieldType,  newValues);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iTypes,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iTypes,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
818	[BUG]  [BUGGY]  iChronology  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Paratial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
819	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataNode);  [CE]  cannot  find  symbol  dataNode  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataNode);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataNode);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  dataNode	19	None	replace
820	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataLength);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataLength);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  dataLength	19	None	replace
821	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	157	None	replace
822	[BUG]  [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iChronology  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int)	157	None	replace
823	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldType(iChronology),  newValues);  [CE]  no  suitable  method  found  for  getFieldType(Chronology)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldType(iChronology),  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldType(iChronology),  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Bytial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  method  found  for  getFieldType(Chronology)	71	None	replace
824	[BUG]  [BUGGY]  Bytial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Bytial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Bytial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Bytial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
825	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  FieldUtils.safeMultiply(newValues,  fieldType));  [CE]  no  suitable  method  found  for  safeMultiply(int[],DateTimeFieldType)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  FieldUtils.safeMultiply(newValues,  fieldType));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  FieldUtils.safeMultiply(newValues,  fieldType));	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(int[],DateTimeFieldType)	105	None	replace
826	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  index);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  index);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    values);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int)	88	None	replace
827	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  dataNode);  [CE]  cannot  find  symbol  dataNode  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  dataNode);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  dataNode);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  dataNode	88	None	replace
828	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldIndex);  [CE]  cannot  find  symbol  fieldIndex  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	88	None	replace
829	[BUG]  [BUGGY]  iChronology.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
830	[BUG]  [BUGGY]  System.arraycopy(iChronology,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iChronology,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iChronology,  iTypes,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	110	None	replace
831	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iTypes,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iTypes,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iTypes,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(this,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[],DateTimeFieldType)	153	None	replace
832	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  newValues,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(Partial,int[],DateTimeFieldType[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(this,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,int[],DateTimeFieldType[])	153	None	replace
833	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  newTypes,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],DateTimeFieldType[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  newTypes,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  newTypes,  iTypes);	  Partial    newPartial    =    new    Partial(this,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],DateTimeFieldType[])	153	None	replace
834	[BUG]  [BUGGY]  iChronology.validate(iValues,  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(iValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(iValues,  newValues);	  iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	9	None	replace
835	[BUG]  [BUGGY]  iChronology.validate(this,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(this,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(this,  newValues);	  iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	9	None	replace
836	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(period,  iChronology,  newTypes,  fieldType);  [CE]  cannot  find  symbol  period  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(period,  iChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(period,  iChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  period	31	None	replace
837	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(methodType,  iChronology,  newTypes);  [CE]  cannot  find  symbol  methodType  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(methodType,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(methodType,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  methodType	6	None	replace
838	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes,  newValues,  fieldType);  [CE]  cannot  find  symbol  newChronology  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newChronology,  newTypes,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newChronology	98	None	replace
839	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  newTypes,  fieldType,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType,Chronology)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  newTypes,  fieldType,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  newTypes,  fieldType,  iChronology);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType,Chronology)	98	None	replace
840	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(period,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,int[])	152	None	replace
841	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(parent,  iChronology,  newValues);  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(parent,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(parent,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(period,    iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  parent	152	None	replace
842	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(path,  iChronology,  newValues);  [CE]  cannot  find  symbol  path  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(path,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(path,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(period,    iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  path	152	None	replace
843	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],DateTimeFieldType)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,Chronology,int[],DateTimeFieldType)	54	None	replace
844	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  newPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  newPartial	114	None	replace
845	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  values  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  values	114	None	replace
846	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getField(index),  newValues).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeField,int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getField(index),  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getField(index),  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeField,int[])	114	None	replace
847	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  newPartial  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  iTypes,  newTypes).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  newPartial	114	None	replace
848	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iFieldIndex,  newValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iFieldIndex,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  iFieldIndex,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	47	None	replace
849	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  value);  [CE]  cannot  find  symbol  values  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  values	47	None	replace
850	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldType,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],DateTimeFieldType,int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldType,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldType,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],DateTimeFieldType,int)	47	None	replace
851	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],int)	96	None	replace
852	[BUG]  [BUGGY]  if(iChronology!=  null)  {  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	14	None	replace
853	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  +  1);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  +  1);	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	14	None	replace
854	[BUG]  [BUGGY]  if(iChronology!=  null)  {  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arra	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  ';'  expected	14	None	replace
855	[BUG]  [BUGGY]  Integer  newPartial  =  new  Integer(iChronology.getInstance());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Integer(iChronology.getInstance());  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Integer(iChronology.getInstance());	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
856	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  i);  [CE]  cannot  find  symbol  newPartial  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	155	None	replace
857	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(getChronology(),  fieldType,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(getChronology(),  fieldType,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(getChronology(),  fieldType,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],int[])	146	None	replace
858	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,int[],DateTimeFieldType[])  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iValues,  newTypes);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,int[],DateTimeFieldType[])	146	None	replace
859	[BUG]  [BUGGY]  iChronology.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
860	[BUG]  [BUGGY]  iChronology.arraycopy(newValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.arraycopy(newValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.arraycopy(newValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
861	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	124	None	replace
862	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  incompatible  types	124	None	replace
863	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	124	None	replace
864	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	124	None	replace
865	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fieldType,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType,int)	30	None	replace
866	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes,  value);  [CE]  cannot  find  symbol  fields  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    value);    	non-compiled	[CE]  cannot  find  symbol  fields	30	None	replace
867	[BUG]  [BUGGY]  System.arraycopy(newValues,  0,  newValues,  0,  newValues.length  -  i);  [CE]  cannot  find  symbol  newPartial  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(newValues,  0,  newValues,  0,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(newValues,  0,  newValues,  0,  newValues.length  -  i);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	17	None	replace
868	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	127	None	replace
869	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	127	None	replace
870	[BUG]  [BUGGY]  if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	127	None	replace
871	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	127	None	replace
872	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	127	None	replace
873	[BUG]  [BUGGY]  if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	127	None	replace
874	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes);  [CE]  cannot  find  symbol  iFieldTypes  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    fields);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	45	None	replace
875	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int,int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  value,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int,int[])	48	None	replace
876	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int)	48	None	replace
877	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  fieldType,  newValues);  [CE]  cannot  find  symbol  fields  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iValues);    	non-compiled	[CE]  cannot  find  symbol  fields	102	None	replace
878	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iTypes,  fieldType);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],DateTimeFieldType)	102	None	replace
879	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
880	[BUG]  [BUGGY]  if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
881	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
882	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
883	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
884	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
885	[BUG]  [BUGGY]  if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newPartial!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
886	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
887	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i  -  1);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	121	None	replace
888	[BUG]  [BUGGY]  iChronology.arraycopy(iValues,  iTypes,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.arraycopy(iValues,  iTypes,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.arraycopy(iValues,  iTypes,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
889	[BUG]  [BUGGY]  System.arraycopy(iValues,  iTypes,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  iTypes,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  iTypes,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	128	None	replace
890	[BUG]  [BUGGY]  System.arraycopy(iTypes,  iTypes,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  iTypes,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  iTypes,  newTypes,  iValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	128	None	replace
891	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType[],int,int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  iValues,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType[],int,int)	128	None	replace
892	[BUG]  [BUGGY]  System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	123	None	replace
893	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],DateTimeFieldType)	99	None	replace
894	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldType(index),  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldType(index),  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldType(index),  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldIndex,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	79	None	replace
895	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataNode,  newValues);  [CE]  cannot  find  symbol  dataNode  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  dataNode,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  dataNode,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  dataNode	79	None	replace
896	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	70	None	replace
897	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ';'  expected	70	None	replace
898	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ')'  expected	70	None	replace
899	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ')'  expected	70	None	replace
900	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ')'  expected	70	None	replace
901	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	131	None	replace
902	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes).set(this,  index,  newValues);  [CE]  cannot  find  symbol  iFieldTypes  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldTypes).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	131	None	replace
903	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues.length);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
904	[BUG]  [BUGGY]  parse(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parse(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parse(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
905	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues);  parse(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  values  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues);  parse(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  newValues);  parse(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	115	None	replace
906	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parse(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parse(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues);  parse(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	115	None	replace
907	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  parse(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  fieldTypes  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  parse(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  parse(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	115	None	replace
908	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  parse(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  fieldTypes  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  parse(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  parse(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	115	None	replace
909	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[],int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,int[],int[])	36	None	replace
910	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],int[])	36	None	replace
911	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],int)	32	None	replace
912	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  buffer);  [CE]  cannot  find  symbol  buffer  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  buffer);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  buffer);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    dataArea);    	non-compiled	[CE]  cannot  find  symbol  buffer	137	None	replace
913	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],int[],Chronology)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  newTypes,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,DateTimeFieldType[],int[],Chronology)	55	None	replace
914	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  fieldType,  dataArea);  [CE]  cannot  find  symbol  dataArea  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  fieldType,  dataArea);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  fieldType,  dataArea);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  dataArea	55	None	replace
915	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  parse(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	130	None	replace
916	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parse(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
917	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldType(),  newValues);  [CE]  no  suitable  method  found  for  getFieldType()  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldType(),  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldType(),  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  no  suitable  method  found  for  getFieldType()	81	None	replace
918	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getValues(),  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getValues(),  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getValues(),  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[])	81	None	replace
919	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  fieldType);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getFieldIndex(),  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
920	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldType,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],DateTimeFieldType,DateTimeFieldType[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldType,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  fieldType,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],DateTimeFieldType,DateTimeFieldType[])	144	None	replace
921	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newValues,  newValues);  [CE]  cannot  find  symbol  iFieldType  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldType,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldType	51	None	replace
922	[BUG]  [BUGGY]  iChronology.validate(newPartial,  fields,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newPartial,  fields,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newPartial,  fields,  newValues);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	140	None	replace
923	[BUG]  [BUGGY]  iChronology.validate(newType,  newValues);  [CE]  cannot  find  symbol  newType  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.validate(newType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.validate(newType,  newValues);	  iChronology.validate(fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newType	140	None	replace
924	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes,  newValues,  iChronology);  [CE]  cannot  find  symbol  newChronology  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newChronology,  newTypes,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newChronology	135	None	replace
925	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newKeys,  newValues,  newTypes);  [CE]  cannot  find  symbol  newKeys  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newKeys,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newKeys,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newKeys	135	None	replace
926	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.setValues(newValues);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.setValues(newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.setValues(newValues);	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
927	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	64	None	replace
928	[BUG]  [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
929	[BUG]  [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
930	[BUG]  [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  ==  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  ')'  expected	64	None	replace
931	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	64	None	replace
932	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)	160	None	replace
933	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  fieldType.length);  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  fieldType.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  fieldType.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  cannot  find  symbol  length	160	None	replace
934	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  values.length);  [CE]  cannot  find  symbol  values  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  values.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  values.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  cannot  find  symbol  values	160	None	replace
935	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],int[])	107	None	replace
936	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int[])	107	None	replace
937	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],Chronology)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],Chronology)	107	None	replace
938	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	112	None	replace
939	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	112	None	replace
940	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	112	None	replace
941	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ';'  expected	112	None	replace
942	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ';'  expected	112	None	replace
943	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ';'  expected	112	None	replace
944	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iChronology,  newTypes,  newValues,  value);  [CE]  cannot  find  symbol  partial  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(partial,  iChronology,  newTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(partial,  iChronology,  newTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(partial,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  partial	57	None	replace
945	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newPartial,  iChronology,  newTypes,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newPartial,  iChronology,  newTypes,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newPartial,  iChronology,  newTypes,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(partial,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],DateTimeFieldType)	57	None	replace
946	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newTypes,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,<null>,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newTypes,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  null,  newTypes,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(partial,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,<null>,DateTimeFieldType[],int[],DateTimeFieldType)	57	None	replace
947	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int[])  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int[])	83	None	replace
948	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]    AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
949	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  iFieldIndex,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]      AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  iFieldIndex,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  iFieldIndex,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
950	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  i  +  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]        AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  i  +  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  i  +  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
951	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i	  	non-compiled	[CE]  ')'  expected	43	None	add
952	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]            AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
953	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology  =  new  Partial(iChronology,  newTypes,  null);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]              AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology  =  new  Partial(iChronology,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    iChronology  =  new  Partial(iChronology,  newTypes,  null);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	43	None	add
954	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  null);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],<null>)  [FE]                AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  null);	  	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],<null>)	43	None	add
955	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  data);  [CE]  cannot  find  symbol  data  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  data);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  data);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iFieldIndex);    	non-compiled	[CE]  cannot  find  symbol  data	42	None	replace
956	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  FieldUtils.safeMultiply(fieldType,  iValues));  [CE]  no  suitable  method  found  for  safeMultiply(DateTimeFieldType,int[])  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  FieldUtils.safeMultiply(fieldType,  iValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  FieldUtils.safeMultiply(fieldType,  iValues));	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(DateTimeFieldType,int[])	74	None	replace
957	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType)	74	None	replace
958	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  FieldUtils.safeMultiply(fieldType,  newValues));  [CE]  no  suitable  method  found  for  safeMultiply(DateTimeFieldType,int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  FieldUtils.safeMultiply(fieldType,  newValues));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  FieldUtils.safeMultiply(fieldType,  newValues));	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iValues);    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(DateTimeFieldType,int[])	74	None	replace
959	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    values);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)	94	None	replace
960	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  newTypes.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  newTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  0,  newTypes,  0,  newTypes.length  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	13	None	replace
961	[BUG]  [BUGGY]  System.arraycopy(iTypes,  iChronology,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  iChronology,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  iChronology,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	13	None	replace
962	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  2);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  2);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  2);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	13	None	replace
963	[BUG]  [BUGGY]  int  index  =  indexOf(fieldType,  iFieldIndex);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(fieldType,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(fieldType,  iFieldIndex);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
964	[BUG]  [BUGGY]  int  index  =  indexOf(fieldType,  iChronology);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(fieldType,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(fieldType,  iChronology);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
965	[BUG]  [BUGGY]  int  index  =  indexOf(fieldType,  values);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(fieldType,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(fieldType,  values);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
966	[BUG]  [BUGGY]  int  index  =  indexOf(fieldType,  newValues);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(fieldType,  newValues);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
967	[BUG]  [BUGGY]  int  index  =  indexOf(fieldType,  iValues);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(fieldType,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(fieldType,  iValues);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
968	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	109	None	replace
969	[BUG]  [BUGGY]  iChronology  =  new  Partial(iChronology,  newValues,  i);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  =  new  Partial(iChronology,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  =  new  Partial(iChronology,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	109	None	replace
970	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology  =  new  Partial(iChronology,  iTypes,  newValues);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology  =  new  Partial(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology  =  new  Partial(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	109	None	replace
971	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  +  1);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  +  1);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  cannot  find  symbol  newPartial	122	None	replace
972	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iGeneratorIndex,  newValues,  values);  [CE]  cannot  find  symbol  iGeneratorIndex  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iGeneratorIndex,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iGeneratorIndex,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  iGeneratorIndex	89	None	replace
973	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iIndex,  newValues,  values);  [CE]  cannot  find  symbol  iIndex  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iIndex,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iIndex,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  iIndex	89	None	replace
974	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iNull,  newValues,  values);  [CE]  cannot  find  symbol  iNull  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iNull,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iNull,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  iNull	89	None	replace
975	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newTypes,  newValues,  i);  [CE]  cannot  find  symbol  iFieldTypes  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newTypes,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iFieldTypes,  newTypes,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    iClass,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  iFieldTypes	39	None	replace
976	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology  =  new  Partial(newTypes,  null,  iChronology);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]    IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology  =  new  Partial(newTypes,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    iChronology  =  new  Partial(newTypes,  null,  iChronology);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	90	None	add
977	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  IllegalArgumentException  iChronology  =  new  Partial(newTypes,  null,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,IllegalArgumentException)  [FE]      IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  IllegalArgumentException  iChronology  =  new  Partial(newTypes,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    IllegalArgumentException  iChronology  =  new  Partial(newTypes,  null,  iChronology);	  	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,IllegalArgumentException)	90	None	add
978	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology.validate(newTypes,  null,  iChronology);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology.validate(newTypes,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    iChronology.validate(newTypes,  null,  iChronology);	  	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	90	None	add
979	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  newPartial  =  new  Partial(newTypes,  null,  iChronology);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]          IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  newPartial  =  new  Partial(newTypes,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    newPartial  =  new  Partial(newTypes,  null,  iChronology);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	90	None	add
980	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Node  newPartial  =  new  Partial(newTypes,  null,  iChronology);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Node  newPartial  =  new  Partial(newTypes,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Node  newPartial  =  new  Partial(newTypes,  null,  iChronology);	  	non-compiled	[CE]  cannot  find  symbol	90	None	add
981	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology.validate(newPartial,  newValues);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]              IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    iChronology.validate(newPartial,  newValues);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	90	None	add
982	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  this.validate(newPartial,  newValues);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  this.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  this.validate(newPartial,  newValues);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	90	None	add
983	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  System.arraycopy(iTypes,  0,  newTypes,  0,  iChronology.length);  [CE]  cannot  find  symbol  length  [FE]                  IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  System.arraycopy(iTypes,  0,  newTypes,  0,  iChronology.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    System.arraycopy(iTypes,  0,  newTypes,  0,  iChronology.length);	  	non-compiled	[CE]  cannot  find  symbol  length	90	None	add
984	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	82	None	replace
985	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this.iChronology,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	82	None	replace
986	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	82	None	replace
987	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(parent,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  parent  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(parent,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(parent,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  parent	82	None	replace
988	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iFieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iFieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(partial,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	82	None	replace
989	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],Chronology)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fields,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],Chronology)	4	None	replace
990	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i  -  2);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i  -  2);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  i  -  2);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	143	None	replace
991	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes,  newValues);  [CE]  cannot  find  symbol  fields  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	145	None	replace
992	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newTypes,  fieldType);  [CE]  cannot  find  symbol  fields  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	145	None	replace
993	[BUG]  [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[])	113	None	replace
994	[BUG]  [BUGGY]  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	113	None	replace
995	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  values  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  values,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  values,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	113	None	replace
996	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  iTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)	113	None	replace
997	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	62	None	replace
998	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	62	None	replace
999	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    iValues);    	non-compiled	[CE]  ';'  expected	62	None	replace
1000	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  fieldType,  iValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  fieldType,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  fieldType,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[])	62	None	replace
1001	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],DateTimeFieldType)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,DateTimeFieldType[],DateTimeFieldType)	29	None	replace
1002	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  null);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],<null>)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  null);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,DateTimeFieldType[],<null>)	29	None	replace
1003	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  fields);  [CE]  cannot  find  symbol  fields  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  fields);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  fields	29	None	replace
1004	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this.iClassIndex,  newValues);  [CE]  cannot  find  symbol  iClassIndex  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this.iClassIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  this.iClassIndex,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iClassIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iClassIndex	148	None	replace
1005	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClassIndex,  newValues,  newTypes);  [CE]  cannot  find  symbol  iClassIndex  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClassIndex,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClassIndex,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  iClassIndex	118	None	replace
1006	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iIndex,  newValues,  newTypes);  [CE]  cannot  find  symbol  iIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iIndex,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iIndex,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  iIndex	118	None	replace
1007	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iVarIndex,  newValues,  newTypes);  [CE]  cannot  find  symbol  iVarIndex  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iVarIndex,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iVarIndex,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  iVarIndex	118	None	replace
1008	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  0,  newTypes,  0,  newValues.length  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	11	None	replace
1009	[BUG]  [BUGGY]  System.arraycopy(iTypes,  iChronology,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  iChronology,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  iChronology,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	11	None	replace
1010	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFactory);  [CE]  cannot  find  symbol  iFactory  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFactory);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFactory);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    partial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iFactory	61	None	replace
1011	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iNoValues);  [CE]  cannot  find  symbol  iNoValues  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iNoValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iNoValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    partial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iNoValues	61	None	replace
1012	[BUG]  [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  [CE]  cannot  find  symbol  newPartial  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  newPartial	72	None	replace
1013	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newKeys);  [CE]  cannot  find  symbol  fields  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields,  newKeys);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields,  newKeys);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  fields	72	None	replace
1014	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],int)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(fieldType,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],int)	151	None	replace
1015	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes);  [CE]  cannot  find  symbol  newChronology  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newChronology,  newTypes);	  Partial    newPartial    =    new    Partial(i,    newTypes,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newChronology	103	None	replace
1016	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(int,  newTypes,  iChronology);  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(int,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(int,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(i,    newTypes,    iChronology);    	non-compiled	[CE]  '.class'  expected	103	None	replace
1017	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  null);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],<null>)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newTypes,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],<null>)	93	None	replace
1018	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  null);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],<null>)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],int[],<null>)	93	None	replace
1019	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  null,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],<null>,int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  null,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  null,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],<null>,int)	93	None	replace
1020	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newValues,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,<null>,int[],DateTimeFieldType[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  newValues,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  null,  newValues,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,<null>,int[],DateTimeFieldType[])	93	None	replace
1021	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  values	38	None	replace
1022	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[],int)	38	None	replace
1023	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  dataArea,  i);  [CE]  cannot  find  symbol  dataArea  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  dataArea,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newTypes,  newValues,  dataArea,  i);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  cannot  find  symbol  dataArea	38	None	replace
1024	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1025	[BUG]  [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])	156	None	replace
1026	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    values);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	147	None	replace
1027	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],<null>,int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    values);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],<null>,int[])	147	None	replace
1028	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	132	None	replace
1029	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	132	None	replace
1030	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	132	None	replace
1031	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	132	None	replace
1032	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	132	None	replace
1033	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	132	None	replace
1034	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],Chronology)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(null,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],Chronology)	8	None	replace
1035	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  null,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Partial,<null>,DateTimeFieldType[],Chronology)  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  null,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  null,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(null,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,<null>,DateTimeFieldType[],Chronology)	8	None	replace
1036	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(i,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(int,int[],int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(i,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(i,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,int[],int)	50	None	replace
1037	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes,  fieldType);  [CE]  cannot  find  symbol  newChronology  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  newChronology	52	None	replace
1038	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],Chronology,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],Chronology,int[])	52	None	replace
1039	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(period,  fieldType,  newTypes,  iChronology);  [CE]  cannot  find  symbol  period  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(period,  fieldType,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(period,  fieldType,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  period	52	None	replace
1040	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  not  a  statement	63	None	replace
1041	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPar  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPar  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPar	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	63	None	replace
1042	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  new  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  new  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  new	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	63	None	replace
1043	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1044	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	63	13	replace
1045	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this.iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	compilable	  [FE]  AssertionFailedError  	63	13	replace
1046	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	63	None	replace
1047	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  new  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  new  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  new	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	63	None	replace
1048	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	63	None	replace
1049	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	63	None	replace
1050	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValu  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValu  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValu	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ')'  expected	66	None	replace
1051	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ')'  expected	66	None	replace
1052	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ')'  expected	66	None	replace
1053	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ')'  expected	66	None	replace
1054	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	125	None	replace
1055	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],DateTimeFieldType)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],DateTimeFieldType)	125	None	replace
1056	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[])	125	None	replace
1057	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this.fieldIndex,  newValues);  [CE]  cannot  find  symbol  fieldIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this.fieldIndex,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  this.fieldIndex,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	79	None	replace
1058	[BUG]  [BUGGY]  iChronology.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
1059	[BUG]  [BUGGY]  System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i;  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  iTypes,  newValues,  i  +  1,  newValues.length  -  i;	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  ')'  expected	116	None	replace
1060	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldIndex,  value);  [CE]  cannot  find  symbol  fieldIndex  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldIndex,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  fieldIndex,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	48	None	replace
1061	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iFieldIndex,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iFieldIndex,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  iFieldIndex,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	48	None	replace
1062	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(i,  fieldType,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],Chronology)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(i,  fieldType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(i,  fieldType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType,int[],Chronology)	34	None	replace
1063	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues(fieldType);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues(fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues(fieldType);	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
1064	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValues(value);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValues(value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValues(value);	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
1065	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesInYear(iFieldIndex);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValuesInYear(iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValuesInYear(iFieldIndex);	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
1066	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesInDatabase(iFieldIndex);  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int[]  newValues  =  iChronology.getValuesInDatabase(iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int[]  newValues  =  iChronology.getValuesInDatabase(iFieldIndex);	  int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	10	None	replace
1067	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClassIndex,  newValues,  values);  [CE]  cannot  find  symbol  iClassIndex  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClassIndex,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClassIndex,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  iClassIndex	89	None	replace
1068	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this.iFieldIndex,  newValues,  values);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this.iFieldIndex,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  this.iFieldIndex,  newValues,  values);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldIndex,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	89	None	replace
1069	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  value  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  value  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  value  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	15	None	replace
1070	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  index  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  index  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  index  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	15	None	replace
1071	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  data.length  -  i  -  1);  [CE]  cannot  find  symbol  data  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  data.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  data.length  -  i  -  1);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  data	15	None	replace
1072	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  *  2);  [CE]  cannot  find  symbol  newPartial  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  *  2);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  *  2);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	15	None	replace
1073	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fields,  i);  [CE]  cannot  find  symbol  fields  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fields,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  fields,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  fields	32	None	replace
1074	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],Chronology)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],Chronology)	32	None	replace
1075	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldType);  [CE]  cannot  find  symbol  iFieldType  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iFieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    fields);    	non-compiled	[CE]  cannot  find  symbol  iFieldType	45	None	replace
1076	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newColumns);  [CE]  cannot  find  symbol  newColumns  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newColumns);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newColumns);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    fields);    	non-compiled	[CE]  cannot  find  symbol  newColumns	45	None	replace
1077	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  oldValues);  [CE]  cannot  find  symbol  oldValues  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  oldValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  oldValues);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  oldValues	94	None	replace
1078	[BUG]  [BUGGY]  parseAndReturn(iChronology,  newValues,  iTypes);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parseAndReturn(iChronology,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parseAndReturn(iChronology,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1079	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iTypes,  newValues,  value);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1080	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  fieldTypes  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	134	None	replace
1081	[BUG]  [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iChronology  =  new  Partial(iChronology,  iTypes,  newValues);  parseAndReturn(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parseAndReturn(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])	134	None	replace
1082	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    iValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	62	None	replace
1083	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    iValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	62	None	replace
1084	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    iValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	62	None	replace
1085	[BUG]  [BUGGY]  iChronology  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    partial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1086	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(methodType,  newValues,  iChronology);  [CE]  cannot  find  symbol  methodType  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(methodType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(methodType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  methodType	105	None	replace
1087	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(pathType,  newValues,  iChronology);  [CE]  cannot  find  symbol  pathType  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(pathType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(pathType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  pathType	105	None	replace
1088	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1089	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)	114	None	replace
1090	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  value).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  value).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newTypes,  value).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int)	114	None	replace
1091	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  }  else  {  System.arraycopy(iValues,  i,  newValues  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  }  else  {  System.arraycopy(iValues,  i,  newValues  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  }  else  {  System.arraycopy(iValues,  i,  newValues	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  ')'  expected	114	None	replace
1092	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1093	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(partial,  fieldType,  newTypes,  newValues,  iChronology);  [CE]  cannot  find  symbol  partial  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(partial,  fieldType,  newTypes,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(partial,  fieldType,  newTypes,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(partial,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  partial	57	None	replace
1094	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues);  [CE]  cannot  find  symbol  iClass  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iClass,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iClass	149	None	replace
1095	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  parseAndReturn(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  parseAndReturn(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    parseAndReturn(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
1096	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]      AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    iChronology.validate(newPartial,  newValues);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
1097	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  null);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]        AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Integer  newPartial  =  new  Partial(iChronology,  newTypes,  null);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
1098	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  partial  =  new  Partial(iChronology,  newTypes,  null);  [CE]  cannot  find  symbol  partial  [FE]          AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  partial  =  new  Partial(iChronology,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    partial  =  new  Partial(iChronology,  newTypes,  null);	  	non-compiled	[CE]  cannot  find  symbol  partial	43	None	add
1099	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  newPartial  =  new  Partial(iChronology,  newTypes,  null);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]            AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  newPartial  =  new  Partial(iChronology,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    newPartial  =  new  Partial(iChronology,  newTypes,  null);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
1100	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newTypes,  null);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  iChronology.validate(newPartial,  newTypes,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    iChronology.validate(newPartial,  newTypes,  null);	  	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	43	None	add
1101	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null).set(this,  index,  newValues,  value);  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                AssertionFailedError    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(iChronology,    newTypes,    null);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  null).set(this,  index,  newValues,  value);	  	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	43	None	add
1102	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  cannot  find  symbol  newPartial	65	None	replace
1103	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  return  newPartial;  }  [CE]  cannot  find  symbol  newPartial  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  return  newPartial;  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  return  newPartial;  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  cannot  find  symbol  newPartial	65	None	replace
1104	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  return  newPartial;  }  [CE]  cannot  find  symbol  newPartial  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  return  newPartial;  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  return  newPartial;  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  cannot  find  symbol  newPartial	65	None	replace
1105	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  return  newPartial;  }  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  return  newPartial;  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  return  newPartial;  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  cannot  find  symbol  newPartial	65	None	replace
1106	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  return  newPartial;  }  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  return  newPartial;  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  return  newPartial;  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  cannot  find  symbol  newPartial	65	None	replace
1107	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  return  newPartial;  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  return  newPartial;  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  return  newPartial;  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	65	None	replace
1108	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    return    newPartial;    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	65	None	replace
1109	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value  +  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  value  +  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	83	None	replace
1110	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType.value);  [CE]  cannot  find  symbol  value  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType.value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType.value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  value	83	None	replace
1111	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i  +  1,  values.length);  [CE]  cannot  find  symbol  values  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i  +  1,  values.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i  +  1,  values.length);	  System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  cannot  find  symbol  values	121	None	replace
1112	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],DateTimeFieldType[])  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newTypes);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,DateTimeFieldType[],DateTimeFieldType[])	159	None	replace
1113	[BUG]  [BUGGY]  if(iChronology!=  chronology)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  chronology  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  chronology)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  chronology)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  chronology	60	None	replace
1114	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  iChr  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  iChr  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  iChr	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ';'  expected	60	None	replace
1115	[BUG]  [BUGGY]  if(iChronology!=  chronology)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  iChronology.validate(newPartial,  new  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  chronology)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  iChronology.validate(newPartial,  new  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  chronology)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  iChronology.validate(newPartial,  new	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	60	None	replace
1116	[BUG]  [BUGGY]  if(iChronology!=  chronology)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  iChron  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  chronology)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  iChron  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  chronology)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  iChron	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    {    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ';'  expected	60	None	replace
1117	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],Chronology)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],Chronology)	158	None	replace
1118	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],Chronology)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],Chronology)	50	None	replace
1119	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  i);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],int)	50	None	replace
1120	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  null);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],<null>)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    values);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],<null>)	147	None	replace
1121	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  fields);  [CE]  cannot  find  symbol  fields  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  fields);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues,    values);    	non-compiled	[CE]  cannot  find  symbol  fields	147	None	replace
1122	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  oldTypes,  newTypes,  i);  [CE]  cannot  find  symbol  oldTypes  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  oldTypes,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  oldTypes,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  oldTypes	27	None	replace
1123	[BUG]  [BUGGY]  int  index  =  iValues.indexOf(fieldType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  iValues.indexOf(fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  iValues.indexOf(fieldType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
1124	[BUG]  [BUGGY]  int  index  =  indexOf(loopType);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  int  index  =  indexOf(loopType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	int  index  =  indexOf(loopType);	  int    index    =    indexOf(fieldType);    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	142	None	replace
1125	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  parseAndReturn(newTypes,  null,  iChronology);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  parseAndReturn(newTypes,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    parseAndReturn(newTypes,  null,  iChronology);	  	non-compiled	[CE]  cannot  find  symbol	90	None	add
1126	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology.validate(newPartial,  null,  iChronology);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology.validate(newPartial,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    iChronology.validate(newPartial,  null,  iChronology);	  	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	90	None	add
1127	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology.validate(newPartial,  newTypes);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  iChronology.validate(newPartial,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    iChronology.validate(newPartial,  newTypes);	  	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	90	None	add
1128	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  parseAndReturn(newTypes,  null,  iChronology).set(this,  index,  newValues,  value);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology);  parseAndReturn(newTypes,  null,  iChronology).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    parseAndReturn(newTypes,  null,  iChronology).set(this,  index,  newValues,  value);	  	non-compiled	[CE]  cannot  find  symbol	90	None	add
1129	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fields,  iChronology,  value);  [CE]  cannot  find  symbol  fields  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fields,  iChronology,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fields,  iChronology,  value);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    value);    	non-compiled	[CE]  cannot  find  symbol  fields	7	None	replace
1130	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  value);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,int)	7	None	replace
1131	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  this.values.length);  [CE]  cannot  find  symbol  values  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  this.values.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  this.values.length);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  cannot  find  symbol  values	122	None	replace
1132	[BUG]  [BUGGY]  System.arraycopy(newValues,  0,  newValues,  0,  i);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(newValues,  0,  newValues,  0,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(newValues,  0,  newValues,  0,  i);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  cannot  find  symbol  newPartial	122	None	replace
1133	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(methodType,  newTypes,  iChronology);  [CE]  cannot  find  symbol  methodType  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(methodType,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(methodType,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  methodType	31	None	replace
1134	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newTypes);  [CE]  cannot  find  symbol  fields  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	31	None	replace
1135	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getBase(),  newValues);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getBase(),  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getBase(),  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1136	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getValue(index),  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  getValue(index),  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  getValue(index),  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    getFieldIndex(),    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[])	81	None	replace
1137	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  newValues);  [CE]  cannot  find  symbol  dataArea  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol  dataArea	51	None	replace
1138	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  index,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int,int)  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  index,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  index,  value);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int,int)	26	None	replace
1139	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  index  +  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  index  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  index  +  1);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)	26	None	replace
1140	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  index);  [CE]  cannot  find  symbol  dataArea  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  dataArea,  index);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  dataArea	26	None	replace
1141	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fields[iChronology],  fieldType,  newValues);  [CE]  cannot  find  symbol  fields  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fields[iChronology],  fieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fields[iChronology],  fieldType,  newValues);	  Partial    newPartial    =    new    Partial(this,    iChronology,    fieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fields	24	None	replace
1142	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes,  fieldType,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],DateTimeFieldType,Chronology)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes,  fieldType,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  newTypes,  fieldType,  iChronology);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],DateTimeFieldType,Chronology)	98	None	replace
1143	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,DateTimeFieldType[],Chronology)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,DateTimeFieldType[],Chronology)	3	None	replace
1144	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldType,  newValues,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(<null>,DateTimeFieldType,int[],Chronology)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldType,  newValues,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  fieldType,  newValues,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fieldType,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,DateTimeFieldType,int[],Chronology)	3	None	replace
1145	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iTypes,  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],DateTimeFieldType)	96	None	replace
1146	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iClass);  [CE]  cannot  find  symbol  iClass  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iClass);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  iClass);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  iClass	96	None	replace
1147	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	126	None	replace
1148	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
1149	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ';'  expected	126	None	replace
1150	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	126	None	replace
1151	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Integer    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
1152	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Chronology,DateTimeFieldType[],int[])	37	None	replace
1153	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  range);  [CE]  cannot  find  symbol  range  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  range);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  range);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  range	85	None	replace
1154	[BUG]  [BUGGY]  parse(iChronology,  newValues,  iTypes);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  parse(iChronology,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	parse(iChronology,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1155	[BUG]  [BUGGY]  Parse(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Parse(iChronology,  iTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Parse(iChronology,  iTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1156	[BUG]  [BUGGY]  Parse(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Parse(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Parse(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1157	[BUG]  [BUGGY]  Parse(iChronology,  newValues,  iTypes);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Parse(iChronology,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Parse(iChronology,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    parse(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1158	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)	68	None	replace
1159	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)	68	None	replace
1160	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  Partial  newPartial  =  new  Partial(iChronology,  newValues,  value);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int)	68	None	replace
1161	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  values);  newPartial  =  new  Partial(iChronology,  newValues,  values);  }  [CE]  cannot  find  symbol  values  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  values);  newPartial  =  new  Partial(iChronology,  newValues,  values);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues,  values);  newPartial  =  new  Partial(iChronology,  newValues,  values);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	68	None	replace
1162	[BUG]  [BUGGY]  Parse(iChronology,  newTypes,  iValues);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Parse(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Parse(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1163	[BUG]  [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parse(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])	130	None	replace
1164	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	66	None	replace
1165	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	66	None	replace
1166	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	66	None	replace
1167	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int)	160	None	replace
1168	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  i  +  1,  newValues.length);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  i  +  1,  newValues.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  i  +  1,  newValues.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int,int)	160	None	replace
1169	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes.length);  [CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues.length);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,int)	160	None	replace
1170	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newValues,  newTypes,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  i,  newValues,  newTypes,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  i,  newValues,  newTypes,  value);	  Partial    newPartial    =    new    Partial(iChronology,    i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int,int[],DateTimeFieldType[],int)	38	None	replace
1171	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  values);  [CE]  cannot  find  symbol  values  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  iChronology,  newValues,  values);	  Partial    newPartial    =    new    Partial(fieldType,    iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	22	None	replace
1172	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldType,  iChronology,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(<null>,DateTimeFieldType,Chronology,int[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  fieldType,  iChronology,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  fieldType,  iChronology,  newValues);	  Partial    newPartial    =    new    Partial(fieldType,    iChronology,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(<null>,DateTimeFieldType,Chronology,int[])	22	None	replace
1173	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value  +  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  value  +  1);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],int)	18	None	replace
1174	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fields,  newValues);  [CE]  cannot  find  symbol  fields  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fields,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fields,  newValues);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fields	2	None	replace
1175	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  oldTypes,  newValues);  [CE]  cannot  find  symbol  oldTypes  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  oldTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  oldTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  oldTypes	84	None	replace
1176	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  i  -  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	141	None	replace
1177	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  value  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  value  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  value  -  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	141	None	replace
1178	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  index  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  index  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  index  -  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	141	None	replace
1179	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  values.length  -  i  -  1);  [CE]  cannot  find  symbol  values  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  values.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  values.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  values	141	None	replace
1180	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  value  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  value  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  value  -  1);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	141	None	replace
1181	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newTypes,  newValues,  value);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],int[],int)	97	None	replace
1182	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  index  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  index  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  index  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	11	None	replace
1183	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	11	None	replace
1184	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i;  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i;  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i;	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  ')'  expected	11	None	replace
1185	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fields);  [CE]  cannot  find  symbol  fields  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  fields);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fields	86	None	replace
1186	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  value  +  1);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  value  +  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  value  +  1);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],int[],int)	47	None	replace
1187	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(value,  newValues,  newTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int,int[],DateTimeFieldType[],Chronology)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(value,  newValues,  newTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(value,  newValues,  newTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,int[],DateTimeFieldType[],Chronology)	119	None	replace
1188	[BUG]  [BUGGY]  iChronology.arraycopy(iValues,  i,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.arraycopy(iValues,  i,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.arraycopy(iValues,  i,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1189	[BUG]  [BUGGY]  iChronology.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1190	[BUG]  [BUGGY]  System.arraycopy(iValues,  iTypes,  newTypes,  iChronology,  newValues.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  iTypes,  newTypes,  iChronology,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  iTypes,  newTypes,  iChronology,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    System.arraycopy(iValues,    iTypes,    newTypes,    iValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	128	None	replace
1191	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  null,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],<null>,DateTimeFieldType)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  null,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  null,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],<null>,DateTimeFieldType)	93	None	replace
1192	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes,  iChronology,  null);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],Chronology,<null>)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  newTypes,  iChronology,  null);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  newTypes,  iChronology,  null);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],Chronology,<null>)	93	None	replace
1193	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  range);  [CE]  cannot  find  symbol  range  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  range);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  range);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    dataArea);    	non-compiled	[CE]  cannot  find  symbol  range	162	None	replace
1194	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iFieldType,  newValues);  [CE]  cannot  find  symbol  iFieldType  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iFieldType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iFieldType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldType	104	None	replace
1195	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  pathType,  newValues);  [CE]  cannot  find  symbol  pathType  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  pathType,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  pathType,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iFieldType,    newValues);    	non-compiled	[CE]  cannot  find  symbol  pathType	104	None	replace
1196	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues,  iTypes);  [CE]  cannot  find  symbol  iPartial  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	133	None	replace
1197	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues,  iFieldIndex);  [CE]  cannot  find  symbol  iPartial  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newValues,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newValues,  iFieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	133	None	replace
1198	[BUG]  [BUGGY]  Partial  iPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [CE]  cannot  find  symbol  newPartial  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iPartial  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iPartial  =  new  Partial(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	133	None	replace
1199	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,DateTimeFieldType[],int[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  this,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(this,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,DateTimeFieldType[],int[])	153	None	replace
1200	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  this,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  this,  newValues);	  Partial    newPartial    =    new    Partial(this,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,Partial,int[])	153	None	replace
1201	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  range);  [CE]  cannot  find  symbol  range  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  range);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iValues,  newValues,  range);	  Partial    newPartial    =    new    Partial(iChronology,    iValues,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  range	88	None	replace
1202	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],DateTimeFieldType)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iTypes,  fieldType);	  Partial    newPartial    =    new    Partial(fieldType,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],DateTimeFieldType[],DateTimeFieldType)	151	None	replace
1203	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  iTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,int[],DateTimeFieldType[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(fieldType,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,int[],DateTimeFieldType[])	151	None	replace
1204	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iFieldIndex);	  Partial    newPartial    =    new    Partial(fieldType,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	151	None	replace
1205	[BUG]  [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  [CE]  cannot  find  symbol  iPartial  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iPartial  =  new  Partial(iChronology,  newTypes,  iFieldIndex);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  iPartial	155	None	replace
1206	[BUG]  [BUGGY]  Partial  iPartial  =  new  Partial(iChronology,  newTypes,  i);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iPartial  =  new  Partial(iChronology,  newTypes,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iPartial  =  new  Partial(iChronology,  newTypes,  i);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	155	None	replace
1207	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues,  fieldType);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)	113	None	replace
1208	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1209	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues).set(this,  index,  newValues);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues).set(this,  index,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues).set(this,  index,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1210	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  }  else  {  System.arraycopy(iValues,  i,  newValues  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  }  else  {  System.arraycopy(iValues,  i,  newValues  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  }  else  {  System.arraycopy(iValues,  i,  newValues	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  ')'  expected	131	None	replace
1211	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues);    	non-compiled	[CE]  ')'  expected	131	None	replace
1212	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[])  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],DateTimeFieldType[],int[])	101	None	replace
1213	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int[])  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fields,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],int[])	101	None	replace
1214	[BUG]  [BUGGY]  if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	58	None	replace
1215	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ';'  expected	58	None	replace
1216	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  partial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  cannot  find  symbol  partial  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  partial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  partial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  partial	58	None	replace
1217	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arraycopy(newTypes  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arraycopy(newTypes  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arraycopy(newTypes	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	58	None	replace
1218	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	58	None	replace
1219	[BUG]  [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Integer  newPartial  =  new  Partial(iChronology,  newTypes,  i);  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology    =    new    Partial(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	124	None	replace
1220	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  parseAndReturn(newTypes,  iValues);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  parseAndReturn(newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  parseAndReturn(newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1221	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	111	None	replace
1222	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	111	None	replace
1223	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arra	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ';'  expected	111	None	replace
1224	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1225	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Integer  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Integer    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	111	None	replace
1226	[BUG]  [BUGGY]  iChronology  =  new  Partial(iChronology,  newValues,  iTypes);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  =  new  Partial(iChronology,  newValues,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  =  new  Partial(iChronology,  newValues,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	109	None	replace
1227	[BUG]  [BUGGY]  iChronology  =  new  Partial(iChronology,  newValues,  value);  [CE]  cannot  assign  a  value  to  final  variable  iChronology  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology  =  new  Partial(iChronology,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology  =  new  Partial(iChronology,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  iChronology	109	None	replace
1228	[BUG]  [BUGGY]  if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	154	None	replace
1229	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	154	None	replace
1230	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	154	None	replace
1231	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	154	None	replace
1232	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [CE]  cannot  find  symbol  newKeys  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  newKeys	72	None	replace
1233	[BUG]  [BUGGY]  if(newKeys!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [CE]  cannot  find  symbol  newKeys  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newKeys!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newKeys!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  newKeys	72	None	replace
1234	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	72	None	replace
1235	[BUG]  [BUGGY]  if(newKeys!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [CE]  cannot  find  symbol  newKeys  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newKeys!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newKeys!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  newKeys	72	None	replace
1236	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [CE]  cannot  find  symbol  newKeys  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newKeys);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newKeys);    	non-compiled	[CE]  cannot  find  symbol  newKeys	72	None	replace
1237	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  value,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(int[],int,Chronology)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  value,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  value,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    value,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],int,Chronology)	77	None	replace
1238	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  range);  [CE]  cannot  find  symbol  range  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  range);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  range);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    dataArea);    	non-compiled	[CE]  cannot  find  symbol  range	137	None	replace
1239	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(null,  values,  newValues);  [CE]  cannot  find  symbol  values  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(null,  values,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(null,  values,  newValues);	  Partial    newPartial    =    new    Partial(null,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	80	None	replace
1240	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  value  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  value  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  value  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	12	None	replace
1241	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  data.length  -  i  -  1);  [CE]  cannot  find  symbol  data  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  data.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  data.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  data	12	None	replace
1242	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],Chronology,Chronology)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  iChronology);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],Chronology,Chronology)	52	None	replace
1243	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],Chronology,int[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  iValues);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType,DateTimeFieldType[],Chronology,int[])	52	None	replace
1244	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newTypes,  iChronology,  iFieldIndex);	  Partial    newPartial    =    new    Partial(fieldType,    newTypes,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	52	None	replace
1245	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  oldTypes,  iValues);  [CE]  cannot  find  symbol  oldTypes  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  oldTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  oldTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    iValues);    	non-compiled	[CE]  cannot  find  symbol  oldTypes	75	None	replace
1246	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(iChronology,  null,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    iValues);    	compilable	  [FE]  NullPointerException  	75	13	replace
1247	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  iValues);  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  null,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  null,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldTypes,    iValues);    	compilable	  [FE]  NullPointerException  	75	13	replace
1248	[BUG]  [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iChronology  =  new  Partial(iChronology,  newTypes,  iValues);  parseAndReturn(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])	157	None	replace
1249	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iTypes,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iTypes,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  value);  parseAndReturn(iTypes,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    parseAndReturn(iChronology,    newTypes,    iValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	157	None	replace
1250	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  fieldType,  values);  [CE]  cannot  find  symbol  values  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  fieldType,  values);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newTypes,  newValues,  fieldType,  values);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newTypes,    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  values	55	None	replace
1251	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  path);  [CE]  cannot  find  symbol  path  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  path);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newTypes,  path);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newTypes,    i);    	non-compiled	[CE]  cannot  find  symbol  path	29	None	replace
1252	[BUG]  [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[],int)  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[],int)	125	None	replace
1253	[BUG]  [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[])  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[])	125	None	replace
1254	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[],int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[],int)	125	None	replace
1255	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  fieldType);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[],DateTimeFieldType)	125	None	replace
1256	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[],int)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  iValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],int[],int)	125	None	replace
1257	[BUG]  [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],DateTimeFieldType,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	IllegalArgumentException  iChronology  =  new  IllegalArgumentException(iChronology,  newTypes,  fieldType,  iValues);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    IllegalArgumentException    iChronology    =    new    IllegalArgumentException(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(IllegalArgumentException,DateTimeFieldType[],DateTimeFieldType,int[])	125	None	replace
1258	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  oldValues[i],  newValues,  fieldType);  [CE]  cannot  find  symbol  oldValues  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  oldValues[i],  newValues,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  oldValues[i],  newValues,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    fields[i],    newValues,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  oldValues	161	None	replace
1259	[BUG]  [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  iChronology  =  new  Partial(iChronology,  newTypes,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Bytial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType[],int[])	71	None	replace
1260	[BUG]  [BUGGY]  if(value  <  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  <  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  <  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  variable  newPartial  is  already  defined  in  method  with(DateTimeFieldType,int)	64	None	replace
1261	[BUG]  [BUGGY]  if(value  <  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(value  <  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(value  <  getValue(index))  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  i);  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    }    else    if(value    ==    getValue(index))    {    return    this;    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	64	None	replace
1262	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  oldTypes,  newValues);  }  [CE]  cannot  find  symbol  oldTypes  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  oldTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  oldTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  oldTypes	70	None	replace
1263	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  newTypes,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  newTypes,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  oldPartial  =  new  Partial(iChronology,  newTypes,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    oldPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	70	None	replace
1264	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iTypes,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],Chronology)  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iTypes,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iTypes,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType[],Chronology)	28	None	replace
1265	[BUG]  [BUGGY]  if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	63	None	replace
1266	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	63	None	replace
1267	[BUG]  [BUGGY]  if(newTypes  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newTypes  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newTypes  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	63	None	replace
1268	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	63	None	replace
1269	[BUG]  [BUGGY]  if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newTypes!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	63	None	replace
1270	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValu  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValu  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  this.iChronology.validate(newPartial,  newValu	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    this.iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	63	None	replace
1271	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues));  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
1272	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues);  Partial  newPartial  =  new  Partial(iTypes,  newValues));  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues);  Partial  newPartial  =  new  Partial(iTypes,  newValues));  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newValues);  Partial  newPartial  =  new  Partial(iTypes,  newValues));  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues));    	non-compiled	[CE]  ';'  expected	73	None	replace
1273	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  data.length);  [CE]  cannot  find  symbol  data  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  data.length);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  data.length);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    data);    	non-compiled	[CE]  cannot  find  symbol  data	163	None	replace
1274	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  dataLocation);  [CE]  cannot  find  symbol  dataLocation  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  dataLocation);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  dataLocation);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    data);    	non-compiled	[CE]  cannot  find  symbol  dataLocation	163	None	replace
1275	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  dataLength);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues,  dataLength);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    newValues,    data);    	non-compiled	[CE]  cannot  find  symbol  dataLength	163	None	replace
1276	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  newValues,  iChronology,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Partial,int[],Chronology,DateTimeFieldType[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  newValues,  iChronology,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  newValues,  iChronology,  newTypes);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,int[],Chronology,DateTimeFieldType[])	117	None	replace
1277	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  fieldType,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],DateTimeFieldType,DateTimeFieldType[])  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  fieldType,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  fieldType,  newTypes);	  Partial    newPartial    =    new    Partial(this,    iChronology,    newValues,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],DateTimeFieldType,DateTimeFieldType[])	117	None	replace
1278	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  index);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  index);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  index);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iFieldIndex);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int)	42	None	replace
1279	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  dataArea);  [CE]  cannot  find  symbol  dataArea  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  dataArea);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  dataArea);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iFieldIndex);    	non-compiled	[CE]  cannot  find  symbol  dataArea	46	None	replace
1280	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  dataArea,  iChronology);  [CE]  cannot  find  symbol  dataArea  [FE]                AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  dataArea,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newValues,  dataArea,  iChronology);	  Partial    newPartial    =    new    Partial(fieldType,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  dataArea	53	None	replace
1281	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  iChronology,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(fieldType,  newValues,  iChronology,  iFieldIndex);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(fieldType,  newValues,  iChronology,  iFieldIndex);	  Partial    newPartial    =    new    Partial(fieldType,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	53	None	replace
1282	[BUG]  [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	132	None	replace
1283	[BUG]  [BUGGY]  if(iChronology.isFunctionDeclaration(newPartial))  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  newPartial  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology.isFunctionDeclaration(newPartial))  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology.isFunctionDeclaration(newPartial))  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  newPartial	132	None	replace
1284	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValu  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValu  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValu	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	132	None	replace
1285	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  }	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
1286	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  fieldType).set(this,  index,  newValues,  value);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  fieldType).set(this,  index,  newValues,  value);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues,  fieldType).set(this,  index,  newValues,  value);	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType[],int[],DateTimeFieldType)	129	None	replace
1287	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  }  else  {  System.arraycopy(iValues,  i,  newValues  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  }  else  {  System.arraycopy(iValues,  i,  newValues  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  }  else  {  System.arraycopy(iValues,  i,  newValues	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  ')'  expected	129	None	replace
1288	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  }  else  {  System.arraycopy(iValues,  i  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  }  else  {  System.arraycopy(iValues,  i  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues).set(this,  index,  newValues,  value);  }  else  {  System.arraycopy(iValues,  i	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues).set(this,    index,    newValues,    value);    	non-compiled	[CE]  ')'  expected	129	None	replace
1289	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,DateTimeFieldType[],DateTimeFieldType)  [FE]                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newValues,  iChronology,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newValues,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int[],Chronology,DateTimeFieldType[],DateTimeFieldType)	54	None	replace
1290	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(i,  newTypes,  newValues,  fieldType,  i);  [CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],DateTimeFieldType,int)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(i,  newTypes,  newValues,  fieldType,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(i,  newTypes,  newValues,  fieldType,  i);	  Partial    newPartial    =    new    Partial(i,    newTypes,    newValues,    i);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(int,DateTimeFieldType[],int[],DateTimeFieldType,int)	106	None	replace
1291	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  3);  [CE]  cannot  find  symbol  newPartial  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  3);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  3);	  System.arraycopy(iValues,    0,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	17	None	replace
1292	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iFieldType,  iChronology);  [CE]  cannot  find  symbol  iFieldType  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  iFieldType,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  iFieldType,  iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    fields,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  iFieldType	4	None	replace
1293	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  null,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,<null>,int[])  [FE]                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  null,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  null,  newValues);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    iFieldIndex,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,<null>,int[])	21	None	replace
1294	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  2  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  2  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  2  -  1);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	139	None	replace
1295	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  *  2);  [CE]  cannot  find  symbol  newPartial  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  *  2);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  *  2);	  System.arraycopy(iValues,    i,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	139	None	replace
1296	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,DateTimeFieldType[])  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  fieldType,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],DateTimeFieldType,DateTimeFieldType[])	138	None	replace
1297	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  FieldUtils.safeMultiply(iChronology,  fieldType,  newTypes));  [CE]  no  suitable  method  found  for  safeMultiply(Chronology,DateTimeFieldType,DateTimeFieldType[])  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  FieldUtils.safeMultiply(iChronology,  fieldType,  newTypes));  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  FieldUtils.safeMultiply(iChronology,  fieldType,  newTypes));	  Partial    newPartial    =    new    Partial(newTypes,    iChronology,    newTypes);    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(Chronology,DateTimeFieldType,DateTimeFieldType[])	138	None	replace
1298	[BUG]  [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValu  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValu  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newValues!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  newPartial  =  new  Partial(iChronology,  iTypes,  newValues);  }  else  {  System.arraycopy(iValu	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    	non-compiled	[CE]  ')'  expected	112	None	replace
1299	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  i);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length  -  1,  i);	  System.arraycopy(iValues,    i,    newValues,    0,    newValues.length    -    i);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	143	None	replace
1300	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  iValues,  newValues);  [CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,int[],int[])  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  fieldType,  iValues,  newValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  fieldType,  iValues,  newValues);	  Partial    newPartial    =    new    Partial(this,    fieldType,    newValues);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,DateTimeFieldType,int[],int[])	136	None	replace
1301	[BUG]  [BUGGY]  iChronology.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  iChronology.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	iChronology.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1302	[BUG]  [BUGGY]  System.arraycopy(iValues,  iClass,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  cannot  find  symbol  iClass  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  iClass,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  iClass,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  iClass	110	None	replace
1303	[BUG]  [BUGGY]  System.arraycopy(iValues,  iChronology,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  iChronology,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  iChronology,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  Partial    newPartial    =    new    Partial(iChronology,    iTypes,    newValues);    System.arraycopy(iValues,    iTypes,    newValues,    i    +    1,    newValues.length    -    i    -    1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	110	None	replace
1304	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newValues,  fieldType,  newTypes);  [CE]  cannot  find  symbol  fields  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newValues,  fieldType,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fields[i],  newValues,  fieldType,  newTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    fieldType,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  fields	144	None	replace
1305	[BUG]  [BUGGY]  if(iChronology!=  null)  {  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  i);  }  [CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  i);  }  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  int[]  newValues  =  iChronology.getValues();  System.arraycopy(iValues,  0,  newValues,  0,  i);  }	  int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  variable  newValues  is  already  defined  in  method  with(DateTimeFieldType,int)	14	None	replace
1306	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newTypes.length  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newTypes.length  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newTypes.length  -  i  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	16	None	replace
1307	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  value  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  value  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  value  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	16	None	replace
1308	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  index  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  index  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  index  -  1);	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	16	None	replace
1309	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i;  [CE]  ')'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i;  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iValues,  i,  newTypes,  i  +  1,  newTypes.length  -  i;	  System.arraycopy(iValues,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  ')'  expected	16	None	replace
1310	[BUG]  [BUGGY]  System.arraycopy(iChronology,  0,  newValues,  i  +  1,  newValues.length  -  i);  [CE]  cannot  find  symbol  newPartial  [FE]                              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iChronology,  0,  newValues,  i  +  1,  newValues.length  -  i);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iChronology,  0,  newValues,  i  +  1,  newValues.length  -  i);	  System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i);    	non-compiled	[CE]  cannot  find  symbol  newPartial	123	None	replace
1311	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology,  iValues);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,Chronology,int[])  [FE]    IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology,  iValues);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  null,  iChronology,  iValues);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,Chronology,int[])	91	None	replace
1312	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  newTypes);  [CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,DateTimeFieldType[])  [FE]      IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  newTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  null,  newTypes);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(DateTimeFieldType[],<null>,DateTimeFieldType[])	91	None	replace
1313	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  this.iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	add	Partial  newPartial  =  new  Partial(newTypes,  null,  this.iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	compilable	  [FE]  IllegalArgumentException  	91	12	replace
1314	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  this.iChronology);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(newTypes,  null,  this.iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(newTypes,  null,  this.iChronology);	  Partial    newPartial    =    new    Partial(newTypes,    null,    iChronology);    	compilable	  [FE]  IllegalArgumentException  	91	12	replace
1315	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValu  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValu  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(newPartial  ==  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValu	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
1316	[BUG]  [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValu  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValu  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	if(iChronology!=  null)  {  Partial  newPartial  =  new  Partial(iChronology,  newTypes,  iValues);  Comparable  <  DateTimeFieldType>  newPartial  =  new  Comparable  <  DateTimeFieldType>(iChronology,  newTypes,  iValu	  Partial    newPartial    =    new    Partial(iChronology,    newTypes,    iValues);    Comparable    <    DateTimeFieldType>    newPartial    =    new    Comparable    <    DateTimeFieldType>(iChronology,    newTypes,    iValues);    	non-compiled	[CE]  ')'  expected	59	None	replace
1317	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fields,  iTypes);  [CE]  cannot  find  symbol  fields  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  fields,  iTypes);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  fields,  iTypes);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iTypes);    	non-compiled	[CE]  cannot  find  symbol  fields	49	None	replace
1318	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],DateTimeFieldType)  [FE]                            AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  newValues,  iTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  newValues,  iTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    iTypes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,int[],DateTimeFieldType[],DateTimeFieldType)	49	None	replace
1319	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  fields);  [CE]  cannot  find  symbol  fields  [FE]                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  fields);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  fields);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  fields	56	None	replace
1320	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  null,  iChronology);  [CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],<null>,Chronology)  [FE]                        AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  null,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  null,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    iChronology);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Chronology,DateTimeFieldType,int[],<null>,Chronology)	56	None	replace
1321	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  rangeField,  iChronology);  [CE]  cannot  find  symbol  rangeField  [FE]                          AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  rangeField,  iChronology);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(iChronology,  fieldType,  newValues,  rangeField,  iChronology);	  Partial    newPartial    =    new    Partial(iChronology,    fieldType,    newValues,    iChronology);    	non-compiled	[CE]  cannot  find  symbol  rangeField	56	None	replace
1322	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  value  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  value  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  value  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	13	None	replace
1323	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  index  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  index  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  index  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	13	None	replace
1324	[BUG]  [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  value  -  i  -  1);  [CE]  cannot  find  symbol  newPartial  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  value  -  i  -  1);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  value  -  i  -  1);	  System.arraycopy(iTypes,    i,    newTypes,    i    +    1,    newTypes.length    -    i    -    1);    	non-compiled	[CE]  cannot  find  symbol  newPartial	13	None	replace
1325	[BUG]  [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  newTypes,  fieldType);  [CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],DateTimeFieldType[],DateTimeFieldType)  [FE]              AssertionFailedError      [CONTEXT]      }  }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);        [BUGGY]  Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  newTypes,  fieldType);  [BUGGY]      iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	464	464	1	replace	Partial  newPartial  =  new  Partial(this,  iChronology,  newValues,  newTypes,  fieldType);	  Partial    newPartial    =    new    Partial(iChronology,    newValues,    newTypes,    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  Partial(Partial,Chronology,int[],DateTimeFieldType[],DateTimeFieldType)	145	None	replace
