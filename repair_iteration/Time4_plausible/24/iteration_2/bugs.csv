bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  newPartial.addChronology(iChronology,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.addChronology(iChronology,  iFieldIndex,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.addChronology(iChronology,  iFieldIndex,  newValues);	      	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	2	None	replace
2	[BUG]  [BUGGY]  newPartial.setChronology(iChronology);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setChronology(iChronology);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setChronology(iChronology);	      	non-compiled	[CE]  cannot  find  symbol	2	None	replace
3	[BUG]  [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  values[i]);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  values[i]);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iFieldIndex,  newValues,  values[i]);	      	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	2	None	replace
4	[BUG]  [BUGGY]  newPartial.addChronology(iChronology,  iFieldIndex,  newValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.addChronology(iChronology,  iFieldIndex,  newValues,  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.addChronology(iChronology,  iFieldIndex,  newValues,  value);	      	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	2	None	replace
5	[BUG]  [BUGGY]  newPartial.setChronology(getChronology());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setChronology(getChronology());  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setChronology(getChronology());	      	non-compiled	[CE]  cannot  find  symbol	2	None	replace
6	[BUG]  [BUGGY]  newPartial.setFieldIndex(iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setFieldIndex(iFieldIndex);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setFieldIndex(iFieldIndex);	      	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	2	None	replace
7	[BUG]  [BUGGY]  newPartial.setValue(iFieldIndex,  newValues[i]);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iFieldIndex,  newValues[i]);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iFieldIndex,  newValues[i]);	      	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	2	None	replace
8	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  false);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  false);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value,  false);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
9	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  this);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  this);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value,  this);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
10	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  true);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  true);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value,  true);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
11	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  data);  [CE]  cannot  find  symbol  data  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  data);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value,  data);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  data	1	None	replace
12	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  values);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  values);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value,  values);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  values	1	None	replace
13	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value,  newValues);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
14	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  null);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  null);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value,  null);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
15	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  index);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value,  index);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
17	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	11	add
19	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	11	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
21	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  value);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
23	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  value);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
25	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
26	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,	  	non-compiled	[CE]  ')'  expected	29	None	add
27	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  	non-compiled	[CE]  ';'  expected	29	None	add
28	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,	  	non-compiled	[CE]  ')'  expected	29	None	add
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	13	replace
30	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	13	replace
31	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  ')'  expected  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  ')'  expected  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  ')'  expected	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	20	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >=  ')'  expected  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >=  ')'  expected  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >=  ')'  expected	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	20	None	replace
33	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(i  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(i  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(i	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	20	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  ')'  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  ')'  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  ')'	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	20	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i!=  ')'  expected  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i!=  ')'  expected  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i!=  ')'  expected	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	20	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
37	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	13	add
39	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	13	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
41	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
43	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  1,  newValues.length);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
44	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  	non-compiled	[CE]  ';'  expected	25	None	add
45	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length	  	non-compiled	[CE]  ')'  expected	25	None	add
46	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	13	add
47	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	13	add
48	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValu  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValu	  	non-compiled	[CE]  ')'  expected	25	None	add
49	[BUG]  [BUGGY]  newPartial.validate(newPartial,  iValues);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  iValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  iValues);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
50	[BUG]  [BUGGY]  newPartial.validate(newPartial,  value);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  value);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
51	[BUG]  [BUGGY]  newPartial.validate(newPartial,  getValues());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  getValues());  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  getValues());	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
52	[BUG]  [BUGGY]  newPartial.validate(newPartial,  values,  value);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  values,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  values,  value);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
53	[BUG]  [BUGGY]  newPartial.validate(iChronology,  values);  [CE]  cannot  find  symbol  values  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  values);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  values);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
54	[BUG]  [BUGGY]  newPartial.validate(newPartial,  values,  newValues);  [CE]  cannot  find  symbol  values  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  values,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  values,  newValues);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
55	[BUG]  [BUGGY]  newPartial.validate(newPartial,  this);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  this);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  this);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
56	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	13	replace
57	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	13	replace
58	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  new  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  new  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  new	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  <identifier>  expected	17	None	replace
59	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	17	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology.get  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology.get  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology.get	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	17	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  0,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  0,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
64	[BUG]  [BUGGY]  newPartial.setValue(iChronology.getFieldType(iChronology.getChronology()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iChronology.getFieldType(iChronology.getChronology()));  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iChronology.getFieldType(iChronology.getChronology()));	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
65	[BUG]  [BUGGY]  newPartial.setValue(iChronology.validate(newPartial),  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iChronology.validate(newPartial),  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iChronology.validate(newPartial),  newValues);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	23	None	replace
66	[BUG]  [BUGGY]  newPartial.set(iChronology,  i,  newValues,  0,  newValues.length);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  i,  newValues,  0,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  i,  newValues,  0,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
67	[BUG]  [BUGGY]  newPartial.setValue(iChronology.getDateTimeFieldType(iChronology.getChronology()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iChronology.getDateTimeFieldType(iChronology.getChronology()));  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iChronology.getDateTimeFieldType(iChronology.getChronology()));	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
68	[BUG]  [BUGGY]  newPartial.setValues(iChronology.validate(newPartial),  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValues(iChronology.validate(newPartial),  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValues(iChronology.validate(newPartial),  newValues);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	23	None	replace
69	[BUG]  [BUGGY]  newPartial.setValues(iChronology.getFieldType(iChronology.getChronology()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValues(iChronology.getFieldType(iChronology.getChronology()));  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValues(iChronology.getFieldType(iChronology.getChronology()));	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
70	[BUG]  [BUGGY]  newPartial.setValues(newValues);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValues(newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValues(newValues);	      newPartial.validate(newPartial);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
71	[BUG]  [BUGGY]  newPartial.setValue(newValues[i]);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(newValues[i]);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(newValues[i]);	      newPartial.validate(newPartial);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
72	[BUG]  [BUGGY]  newPartial.validate(newPartial,  iChronology);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  iChronology);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  iChronology);	      newPartial.validate(newPartial);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
73	[BUG]  [BUGGY]  newPartial.setValue(newValues);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(newValues);	      newPartial.validate(newPartial);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
74	[BUG]  [BUGGY]  newPartial.setValues(iTypes);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValues(iTypes);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValues(iTypes);	      newPartial.validate(newPartial);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
75	[BUG]  [BUGGY]  newPartial.addValue(newValues);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.addValue(newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.addValue(newValues);	      newPartial.validate(newPartial);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
76	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  0,  value);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	11	replace
77	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  value);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	11	replace
78	[BUG]  [BUGGY]  newPartial.add(iChronology.validate(newPartial),  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.add(iChronology.validate(newPartial),  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.add(iChronology.validate(newPartial),  newValues);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	30	None	replace
79	[BUG]  [BUGGY]  newPartial.setValue(iChronology.getField(iChronology.getChronology()));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iChronology.getField(iChronology.getChronology()));  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iChronology.getField(iChronology.getChronology()));	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
80	[BUG]  [BUGGY]  newPartial.validate(iChronology,  newValues,  value);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  newValues,  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  newValues,  value);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
81	[BUG]  [BUGGY]  newPartial.validate(iChronology,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  iFieldIndex,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  iFieldIndex,  newValues);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	12	None	replace
82	[BUG]  [BUGGY]  newPartial.validate(iChronology,  iValues);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  iValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  iValues);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
83	[BUG]  [BUGGY]  newPartial.validate(iChronology,  dataArea,  newValues);  [CE]  cannot  find  symbol  dataArea  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  dataArea,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  dataArea,  newValues);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol  dataArea	12	None	replace
84	[BUG]  [BUGGY]  newPartial.validate(iChronology,  fieldType,  newValues);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  fieldType,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  fieldType,  newValues);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
85	[BUG]  [BUGGY]  newPartial.validate(iChronology,  newTypes);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  newTypes);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  newTypes);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
86	[BUG]  [BUGGY]  newPartial.validate(iChronology,  null,  newValues);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  null,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  null,  newValues);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	2	replace
88	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	2	replace
89	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	non-compiled	[CE]  ')'  expected	15	None	replace
90	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	non-compiled	[CE]  <identifier>  expected	15	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	2	replace
92	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	2	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	1	replace
94	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	1	replace
95	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	non-compiled	[CE]  unreachable  statement	28	None	replace
96	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  iChronology.validate(newPartial,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  iChronology.validate(newPartial,  newValues);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	13	replace
97	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  iChronology.validate(newPartial,  newValues);  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  iChronology.validate(newPartial,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  iChronology.validate(newPartial,  newValues);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	13	replace
98	[BUG]  [BUGGY]  newPartial.setValue(iChronology.getValue(i),  i,  newValues,  0,  newValues.length);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iChronology.getValue(i),  i,  newValues,  0,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iChronology.getValue(i),  i,  newValues,  0,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
99	[BUG]  [BUGGY]  newPartial.validate(newPartial,  newValues,  value);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  newValues,  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  newValues,  value);	  newPartial.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
100	[BUG]  [BUGGY]  newPartial.validate(newValues,  newValues);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newValues,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newValues,  newValues);	  newPartial.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
101	[BUG]  [BUGGY]  newPartial.setValue(iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iFieldIndex,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iFieldIndex,  newValues);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	5	None	replace
102	[BUG]  [BUGGY]  newPartial.setValue(iFieldIndex,  value  -  1);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iFieldIndex,  value  -  1);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iFieldIndex,  value  -  1);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	5	None	replace
103	[BUG]  [BUGGY]  newPartial.setValue(iFieldIndex,  newValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iFieldIndex,  newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iFieldIndex,  newValues,  value);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	5	None	replace
104	[BUG]  [BUGGY]  newPartial.setValue(iChronology,  value);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iChronology,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iChronology,  value);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
105	[BUG]  [BUGGY]  newPartial.setValue(value,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(value,  iFieldIndex);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(value,  iFieldIndex);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	5	None	replace
106	[BUG]  [BUGGY]  newPartial.setValue(iFieldIndex,  newValues[value]);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iFieldIndex,  newValues[value]);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iFieldIndex,  newValues[value]);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	5	None	replace
107	[BUG]  [BUGGY]  newPartial.setValue(iChronology,  iFieldIndex,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iChronology,  iFieldIndex,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iChronology,  iFieldIndex,  value);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	5	None	replace
108	[BUG]  [BUGGY]  newPartial.setValue(iFieldIndex,  iValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iFieldIndex,  iValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iFieldIndex,  iValues);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	5	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	24	None	replace
110	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(i  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(i  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(i	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  ')'  expected	24	None	replace
111	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  ')'  expected	24	None	replace
112	[BUG]  [BUGGY]  newPartial.setValue(iFieldIndex);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iFieldIndex);  iChronology.validate(newPartial,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iFieldIndex);  iChronology.validate(newPartial,  newValues);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	9	None	replace
113	[BUG]  [BUGGY]  newPartial.setValue(iFieldIndex,  value);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iFieldIndex,  value);  iChronology.validate(newPartial,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iFieldIndex,  value);  iChronology.validate(newPartial,  newValues);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	9	None	replace
114	[BUG]  [BUGGY]  newPartial.setValue(i);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(i);  iChronology.validate(newPartial,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(i);  iChronology.validate(newPartial,  newValues);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
115	[BUG]  [BUGGY]  newPartial.setValue(getValue(index),  value);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(getValue(index),  value);  iChronology.validate(newPartial,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(getValue(index),  value);  iChronology.validate(newPartial,  newValues);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
116	[BUG]  [BUGGY]  newPartial.setValue(iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iFieldIndex);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iFieldIndex);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	9	None	replace
117	[BUG]  [BUGGY]  newPartial.setValues(iFieldIndex);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValues(iFieldIndex);  iChronology.validate(newPartial,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValues(iFieldIndex);  iChronology.validate(newPartial,  newValues);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	9	None	replace
118	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  value);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newTypes,  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newTypes,  value);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	10	None	replace
119	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  values);  [CE]  cannot  find  symbol  values  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newTypes,  values);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newTypes,  values);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  values	10	None	replace
120	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  newTypes);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  newTypes);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  newTypes);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	10	None	replace
121	[BUG]  [BUGGY]  iChronology.validate(newPartial,  getFieldType(iChronology),  newTypes);  [CE]  no  suitable  method  found  for  getFieldType(Chronology)  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  getFieldType(iChronology),  newTypes);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  getFieldType(iChronology),  newTypes);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  no  suitable  method  found  for  getFieldType(Chronology)	10	None	replace
122	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  fieldType);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newTypes,  fieldType);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newTypes,  fieldType);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	10	None	replace
123	[BUG]  [BUGGY]  iChronology.validate(newPartial,  null,  newTypes);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  null,  newTypes);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  null,  newTypes);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	10	None	replace
124	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  dataArea);  [CE]  cannot  find  symbol  dataArea  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newTypes,  dataArea);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newTypes,  dataArea);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  dataArea	10	None	replace
125	[BUG]  [BUGGY]  newPartial.setValue(newValue);  [CE]  cannot  find  symbol  newValue  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(newValue);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(newValue);	      newPartial.setValue(value);    	non-compiled	[CE]  cannot  find  symbol  newValue	8	None	replace
126	[BUG]  [BUGGY]  newPartial.setValue(getValue(index));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(getValue(index));  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(getValue(index));	      newPartial.setValue(value);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
127	[BUG]  [BUGGY]  newPartial.setValue(getValue(index),  value);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(getValue(index),  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(getValue(index),  value);	      newPartial.setValue(value);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
128	[BUG]  [BUGGY]  newPartial.setValue(value,  newValues);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(value,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(value,  newValues);	      newPartial.setValue(value);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
130	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
131	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	13	add
132	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	13	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
134	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
136	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
138	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
139	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  	non-compiled	[CE]  ';'  expected	22	None	add
140	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,	  	non-compiled	[CE]  ')'  expected	22	None	add
141	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValu  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValu	  	non-compiled	[CE]  ')'  expected	22	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
143	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
144	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	13	add
145	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	13	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
147	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
149	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  return  newPartial;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  1,  newValues,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
150	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
151	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    If(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  	non-compiled	[CE]  ';'  expected	27	None	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newTypes,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newTypes,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
153	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newTypes,  0,  newValues.length);  return  newPartial;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newTypes,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newTypes,  0,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
155	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  return  newPartial;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
156	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
157	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
158	[BUG]  [BUGGY]  newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	non-compiled	[CE]  not  a  statement	19	None	replace
159	[BUG]  [BUGGY]  newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	non-compiled	[CE]  not  a  statement	19	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length);  System.arraycopy(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
161	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  ==  ')'  expected  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  ==  ')'  expected  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  ==  ')'  expected	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	16	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >=  ')'  expected  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >=  ')'  expected  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >=  ')'  expected	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	16	None	replace
163	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	16	None	replace
164	[BUG]  [BUGGY]  newPartial.set(iChronology,  index,  newValues,  value);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  index,  newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  index,  newValues,  value);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
165	[BUG]  [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  value  +  1);  [CE]  cannot  find  symbol  iFieldIndex  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  value  +  1);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iFieldIndex,  newValues,  value  +  1);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	3	None	replace
166	[BUG]  [BUGGY]  newPartial.set(iChronology,  value,  newValues,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  value,  newValues,  iFieldIndex);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  value,  newValues,  iFieldIndex);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	3	None	replace
167	[BUG]  [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  values);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  values);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iFieldIndex,  newValues,  values);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	3	None	replace
168	[BUG]  [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  value  *  2);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  value  *  2);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iFieldIndex,  newValues,  value  *  2);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	3	None	replace
169	[BUG]  [BUGGY]  newPartial.setValues(iChronology,  iFieldIndex,  newValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValues(iChronology,  iFieldIndex,  newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValues(iChronology,  iFieldIndex,  newValues,  value);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	3	None	replace
170	[BUG]  [BUGGY]  newPartial.set(iChronology,  iValues,  newValues,  value);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iValues,  newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iValues,  newValues,  value);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
171	[BUG]  [BUGGY]  newPartial.add(iChronology,  iFieldIndex,  newValues,  value);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.add(iChronology,  iFieldIndex,  newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.add(iChronology,  iFieldIndex,  newValues,  value);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	3	None	replace
172	[BUG]  [BUGGY]  iChronology.validate(newPartial,  index,  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  index,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  index,  newValues);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
173	[BUG]  [BUGGY]  iChronology.validate(iChronology,  newPartial,  newValues,  index);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(iChronology,  newPartial,  newValues,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(iChronology,  newPartial,  newValues,  index);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
174	[BUG]  [BUGGY]  iChronology.validate(iChronology,  index,  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(iChronology,  index,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(iChronology,  index,  newValues);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
175	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  index,  value);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  index,  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  index,  value);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
176	[BUG]  [BUGGY]  iChronology.validate(iPartial,  newValues,  index);  [CE]  cannot  find  symbol  iPartial  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(iPartial,  newValues,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(iPartial,  newValues,  index);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  iPartial	13	None	replace
177	[BUG]  [BUGGY]  iChronology.validate(index,  newValues,  newPartial);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(index,  newValues,  newPartial);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(index,  newValues,  newPartial);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
178	[BUG]  [BUGGY]  iChronology.validate(null,  newPartial,  index);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(null,  newPartial,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(null,  newPartial,  index);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
179	[BUG]  [BUGGY]  iChronology.validate(initial,  newValues,  index);  [CE]  cannot  find  symbol  initial  [FE]                            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(initial,  newValues,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(initial,  newValues,  index);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  initial	13	None	replace
180	[BUG]  [BUGGY]  iChronology.validate(iChronology,  newPartial,  index);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(iChronology,  newPartial,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(iChronology,  newPartial,  index);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
181	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  data);  [CE]  cannot  find  symbol  data  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  data);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  data);	  iChronology.validate(newPartial,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  data	11	None	replace
182	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  fieldType);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  fieldType);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  fieldType);	  iChronology.validate(newPartial,    newValues,    values);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	11	None	replace
183	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  null);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  null);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  null);	  iChronology.validate(newPartial,    newValues,    values);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	11	None	replace
184	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  this);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  this);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  this);	  iChronology.validate(newPartial,    newValues,    values);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	11	None	replace
185	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  type);  [CE]  cannot  find  symbol  type  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  type);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  type);	  iChronology.validate(newPartial,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  type	11	None	replace
186	[BUG]  [BUGGY]  newPartial.setValue(iChronology.getDateTimeFieldType(iChronology.getChronology()),  newValues);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iChronology.getDateTimeFieldType(iChronology.getChronology()),  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iChronology.getDateTimeFieldType(iChronology.getChronology()),  newValues);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
187	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  new  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  new  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  new	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  <identifier>  expected	21	None	replace
188	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
189	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  0,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  0,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  0,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology.get  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology.get  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iChronology.get	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
192	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValuculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareaculoareas(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
193	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  ')'  expected	18	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	compilable	  [FE]  AssertionFailedError  	18	1	replace
195	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	compilable	  [FE]  AssertionFailedError  	18	1	replace
196	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  ')'  expected	18	None	replace
197	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  not  a  statement	18	None	replace
198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	compilable	  [FE]  AssertionFailedError  	18	1	replace
199	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	compilable	  [FE]  AssertionFailedError  	18	1	replace
200	[BUG]  [BUGGY]  newPartial.set(iChronology,  value,  newValues);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  value,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  value,  newValues);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
201	[BUG]  [BUGGY]  newPartial.set(iChronology,  values,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  values  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  values,  iFieldIndex,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  values,  iFieldIndex,  newValues);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	4	None	replace
202	[BUG]  [BUGGY]  newPartial.add(iChronology,  iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.add(iChronology,  iFieldIndex,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.add(iChronology,  iFieldIndex,  newValues);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	4	None	replace
203	[BUG]  [BUGGY]  newPartial.set(iChronology,  fieldIndex,  newValues);  [CE]  cannot  find  symbol  fieldIndex  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  fieldIndex,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  fieldIndex,  newValues);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	4	None	replace
204	[BUG]  [BUGGY]  newPartial.set(iChronology,  iTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iTypes,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iTypes,  newValues);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
205	[BUG]  [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newTypes);  [CE]  cannot  find  symbol  iFieldIndex  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newTypes);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iFieldIndex,  newTypes);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	4	None	replace
206	[BUG]  [BUGGY]  newPartial.validate(iValues,  newValues);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iValues,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iValues,  newValues);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
207	[BUG]  [BUGGY]  newPartial.set(iChronology,  fieldType,  newValues,  i  +  1,  newValues.length);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  fieldType,  newValues,  i  +  1,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  fieldType,  newValues,  i  +  1,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	compilable	  [FE]  AssertionFailedError  	28	7	replace
209	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	compilable	  [FE]  AssertionFailedError  	28	7	replace
210	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  ')'  expected	24	None	replace
211	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  ')'  expected	24	None	replace
212	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  ')'  expected	24	None	replace
213	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  ')'  expected	24	None	replace
214	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  ')'  expected	24	None	replace
215	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
216	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	13	replace
217	[BUG]  [BUGGY]  iChronology.validate(newPartial,  null,  newValues,  index);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  null,  newValues,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  null,  newValues,  index);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
218	[BUG]  [BUGGY]  iChronology.validate(newPartial,  values,  newValues,  index);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  values,  newValues,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  values,  newValues,  index);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  values	13	None	replace
219	[BUG]  [BUGGY]  iChronology.validate(newPartial,  getField(index),  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  getField(index),  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  getField(index),  newValues);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
220	[BUG]  [BUGGY]  iChronology.validate(newPartial,  data,  newValues,  index);  [CE]  cannot  find  symbol  data  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  data,  newValues,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  data,  newValues,  index);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  data	13	None	replace
221	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  index,  values);  [CE]  cannot  find  symbol  values  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  index,  values);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  index,  values);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  values	13	None	replace
222	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
223	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
224	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
225	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
226	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
227	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  not  a  statement	20	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i!=  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i!=  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i!=  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
229	[BUG]  [BUGGY]  newPartial.set(iChronology,  iValues,  newValues);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iValues,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iValues,  newValues);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
230	[BUG]  [BUGGY]  newPartial.set(iChronology,  index,  newValues);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  index,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  index,  newValues);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
231	[BUG]  [BUGGY]  newPartial.set(iChronology,  values,  newValues);  [CE]  cannot  find  symbol  values  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  values,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  values,  newValues);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	4	None	replace
232	[BUG]  [BUGGY]  newPartial.setFieldIndex(iFieldIndex);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setFieldIndex(iFieldIndex);  iChronology.validate(newPartial,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setFieldIndex(iFieldIndex);  iChronology.validate(newPartial,  newValues);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	9	None	replace
233	[BUG]  [BUGGY]  newPartial.setValues(value);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValues(value);  iChronology.validate(newPartial,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValues(value);  iChronology.validate(newPartial,  newValues);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
234	[BUG]  [BUGGY]  newPartial.setValues(values);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  values  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValues(values);  iChronology.validate(newPartial,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValues(values);  iChronology.validate(newPartial,  newValues);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	9	None	replace
235	[BUG]  [BUGGY]  newPartial.setFieldIndex(i);  iChronology.validate(newPartial,  newValues);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setFieldIndex(i);  iChronology.validate(newPartial,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setFieldIndex(i);  iChronology.validate(newPartial,  newValues);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
236	[BUG]  [BUGGY]  newPartial.addValue(value);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.addValue(value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.addValue(value);	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
237	[BUG]  [BUGGY]  newPartial.setValue(iValues,  value);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iValues,  value);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
238	[BUG]  [BUGGY]  newPartial.setValue(iTypes,  value);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(iTypes,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(iTypes,  value);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
239	[BUG]  [BUGGY]  newPartial.validate(newPartial,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  iFieldIndex);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  iFieldIndex);	      newPartial.validate(newPartial);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	6	None	replace
240	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
241	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	13	replace
242	[BUG]  [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  i,  newValues,  0,  newValues.length);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  i,  newValues,  0,  newValues.length);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	13	replace
243	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iTypes,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iTypes,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	13	replace
244	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iTypes,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iTypes,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iTypes,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	13	replace
245	[BUG]  [BUGGY]  System.arraycopy(newValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(newValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(newValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
246	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  index);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newTypes,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newTypes,  index);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	10	None	replace
247	[BUG]  [BUGGY]  iChronology.validate(newPartial,  fieldType,  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  fieldType,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  fieldType,  newValues);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	10	None	replace
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	compilable	  [FE]  AssertionFailedError  	23	6	replace
249	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	compilable	  [FE]  AssertionFailedError  	23	6	replace
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	compilable	  [FE]  AssertionFailedError  	26	8	replace
251	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	compilable	  [FE]  AssertionFailedError  	26	8	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  i);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	compilable	  [FE]  AssertionFailedError  	26	13	replace
253	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  i);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length  -  i);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	compilable	  [FE]  AssertionFailedError  	26	13	replace
254	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,	  	non-compiled	[CE]  ')'  expected	25	None	add
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
256	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  1,  newValues.length);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
257	[BUG]  [BUGGY]  newPartial.set(iChronology,  iTypes,  newValues,  value);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iTypes,  newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iTypes,  newValues,  value);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
258	[BUG]  [BUGGY]  newPartial.set(iChronology,  iIndex,  newValues,  value);  [CE]  cannot  find  symbol  iIndex  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iIndex,  newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iIndex,  newValues,  value);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iIndex	3	None	replace
259	[BUG]  [BUGGY]  newPartial.set(iChronology,  values[i],  newValues,  value);  [CE]  cannot  find  symbol  values  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  values[i],  newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  values[i],  newValues,  value);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  values	3	None	replace
260	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
261	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  ==  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
264	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >=  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
265	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i!=  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i!=  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i!=  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
267	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  ')'  expected	18	None	replace
268	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  ')'  expected	18	None	replace
269	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValu  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValu	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  ')'  expected	18	None	replace
270	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  ')'  expected	18	None	replace
271	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  ')'  expected	18	None	replace
272	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
273	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  >=  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  >=  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  >=  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu!=  ')'  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu!=  ')'  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu!=  ')'	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	17	None	replace
275	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	17	None	replace
276	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  ==  ')'  expected  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  ==  ')'  expected  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  ==  ')'  expected	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	17	None	replace
277	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
278	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu!=  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu!=  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu!=  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
280	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  newValues.length);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
281	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,	  	non-compiled	[CE]  ')'  expected	22	None	add
282	[BUG]  [BUGGY]  newPartial.setValue(value  -  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(value  -  1);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(value  -  1);	      newPartial.setValue(value);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
283	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	add
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
285	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i,  newValues,  0,  value);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  i,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
286	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  0,  value);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  0,  value);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	add
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
288	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  value);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  i,  newValues,  0,  value);  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
289	[BUG]  [BUGGY]  newPartial.validate(newValues,  iChronology);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newValues,  iChronology);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newValues,  iChronology);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
290	[BUG]  [BUGGY]  newPartial.validate(iChronology,  getField(index),  newValues);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  getField(index),  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  getField(index),  newValues);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
291	[BUG]  [BUGGY]  newPartial.validate(iChronology,  iValues,  newValues);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  iValues,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  iValues,  newValues);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
292	[BUG]  [BUGGY]  newPartial.validate(iChronology,  index,  newValues);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iChronology,  index,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iChronology,  index,  newValues);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iTypes,  0,  newTypes,  0,  i);	      	compilable	  [FE]  AssertionFailedError  	2	1	replace
294	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iTypes,  0,  newTypes,  0,  i);	      	compilable	  [FE]  AssertionFailedError  	2	1	replace
295	[BUG]  [BUGGY]  newPartial.addValue(iFieldIndex,  newValues);  [CE]  cannot  find  symbol  iFieldIndex  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.addValue(iFieldIndex,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.addValue(iFieldIndex,  newValues);	      	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	2	None	replace
296	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newTypes,  0,  i);	      	compilable	  [FE]  ArrayStoreException  	2	13	replace
297	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  i);  [FE]  ArrayStoreException  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newTypes,  0,  i);	      	compilable	  [FE]  ArrayStoreException  	2	13	replace
298	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	non-compiled	[CE]  not  a  statement	15	None	replace
299	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	non-compiled	[CE]  not  a  statement	15	None	replace
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	5	replace
301	[BUG]  [BUGGY]  System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(newValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	5	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	6	replace
303	[BUG]  [BUGGY]  System.arraycopy(iValues,  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  1,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	6	replace
304	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	27	None	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
306	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);  return  newPartial;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length  -  i  -  1);  return  newPartial;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
307	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,	  	non-compiled	[CE]  ')'  expected	27	None	add
308	[BUG]  [BUGGY]  newPartial.validate(newTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newTypes,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newTypes,  newValues);	  newPartial.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
309	[BUG]  [BUGGY]  newPartial.validate(iTypes,  newValues);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iTypes,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iTypes,  newValues);	  newPartial.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
310	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
311	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  >=  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  >=  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  >=  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
312	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
313	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu!=  return  newPartial;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu!=  return  newPartial;  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu!=  return  newPartial;	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
314	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu!=  ')'  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu!=  ')'  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu!=  ')'	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
315	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  ')'  expected  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  ')'  expected  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  ')'  expected	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
316	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  ')'  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  ')'  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  ==  ')'	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
317	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value  +  1);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value  +  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value  +  1);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
318	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value  -  1);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value  -  1);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
319	[BUG]  [BUGGY]  iChronology.validate(newPartial,  getValues(),  value);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  getValues(),  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  getValues(),  value);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
320	[BUG]  [BUGGY]  newPartial.set(iChronology,  fieldType,  newValues,  value);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  fieldType,  newValues,  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  fieldType,  newValues,  value);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
321	[BUG]  [BUGGY]  Integer  index  =  iChronology.getIntValue(iValues,  value);  [CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  Integer  index  =  iChronology.getIntValue(iValues,  value);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	Integer  index  =  iChronology.getIntValue(iValues,  value);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	non-compiled	[CE]  variable  index  is  already  defined  in  method  with(DateTimeFieldType,int)	30	None	replace
322	[BUG]  [BUGGY]  newPartial.setValues(i,  newValues);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValues(i,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValues(i,  newValues);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
323	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  fieldIndex);  [CE]  cannot  find  symbol  fieldIndex  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  fieldIndex);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  fieldIndex);	  iChronology.validate(newPartial,    newValues,    values);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	11	None	replace
324	[BUG]  [BUGGY]  iChronology.validate(newPartial,  null,  newValues);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  null,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  null,  newValues);	  iChronology.validate(newPartial,    newValues,    values);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	11	None	replace
325	[BUG]  [BUGGY]  newPartial.validate(iValues,  values);  [CE]  cannot  find  symbol  values  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(iValues,  values);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(iValues,  values);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
326	[BUG]  [BUGGY]  newPartial.validate(values,  newPartial);  [CE]  cannot  find  symbol  values  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(values,  newPartial);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(values,  newPartial);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
327	[BUG]  [BUGGY]  newPartial.validate(newPartial,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  null);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  null);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
328	[BUG]  [BUGGY]  newPartial.set(iChronology,  values[i],  newValues);  [CE]  cannot  find  symbol  values  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  values[i],  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  values[i],  newValues);	      newPartial.set(iChronology,    iFieldIndex,    newValues);    	non-compiled	[CE]  cannot  find  symbol  values	4	None	replace
329	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  0,  index);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  0,  index);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  0,  index);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	13	None	replace
330	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  fieldIndex,  newValues);  [CE]  cannot  find  symbol  fieldIndex  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  fieldIndex,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  fieldIndex,  newValues);	  iChronology.validate(newPartial,    newValues,    index);    	non-compiled	[CE]  cannot  find  symbol  fieldIndex	13	None	replace
331	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	13	replace
332	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	13	replace
333	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	13	replace
334	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	13	replace
335	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
336	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  System.arraycopy(iValues  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  System.arraycopy(iValues  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  System.arraycopy(iValues	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
337	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  System.arraycopy(iValu  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  System.arraycopy(iValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  System.arraycopy(iValu	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    	non-compiled	[CE]  ')'  expected	26	None	replace
338	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  +  1,  newValues.length  -  i  -  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  +  1,  newValues.length  -  i  -  1);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  +  1,  newValues.length  -  i  -  1);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	16	None	replace
339	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  }  return  newPartial;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  }  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  }  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	16	None	replace
340	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  [Delete]  return  newPartial;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  [Delete]  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  i  [Delete]  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	16	None	replace
341	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  0,  newValues.length);  return  newPartial;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  0,  newValues.length);  return  newPartial;  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	27	None	add
342	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  newValues,  0,  newValues.length);  return  newPartial;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  newValues,  0,  newValues.length);  return  newPartial;  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	27	None	add
343	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
344	[BUG]  [BUGGY]  if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
345	[BUG]  [BUGGY]  if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValu	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
346	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iVal  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iVal  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iVal	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
347	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iVal  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iVal  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iVal	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	21	None	replace
348	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  0,  newValues.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  0,  newValues.length);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	22	None	add
349	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  newValues,  0,  newValues.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  newValues,  0,  newValues.length);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	22	None	add
350	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  1,  newValues.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  1,  newValues.length);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	22	None	add
351	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	13	replace
352	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	13	replace
353	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
354	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	13	replace
355	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	13	replace
356	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  return  newPartial;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	28	None	replace
357	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    return    newPartial;    }    	non-compiled	[CE]  unreachable  statement	28	None	replace
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	compilable	  [FE]  AssertionFailedError  	18	2	replace
359	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	compilable	  [FE]  AssertionFailedError  	18	2	replace
360	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  ')'  expected	18	None	replace
361	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
362	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
363	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  0,  i);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	compilable	  [FE]  AssertionFailedError  	19	1	replace
365	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	compilable	  [FE]  AssertionFailedError  	19	1	replace
366	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  }  else  {  System.arraycopy(iValues,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  }  else  {  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  }  else  {  System.arraycopy(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
367	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  }  else  {  System.arraycopy(iValues,  i  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  }  else  {  System.arraycopy(iValues,  i  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  }  else  {  System.arraycopy(iValues,  i	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues,    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
368	[BUG]  [BUGGY]  newPartial.setValue(i,  value);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(i,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(i,  value);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
369	[BUG]  [BUGGY]  newPartial.addValue(value,  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.addValue(value,  iFieldIndex);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.addValue(value,  iFieldIndex);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	5	None	replace
370	[BUG]  [BUGGY]  newPartial.setValue(newValues,  value);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(newValues,  value);	      newPartial.setValue(iFieldIndex,    value);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
371	[BUG]  [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  value  -  1);  [CE]  cannot  find  symbol  iFieldIndex  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  value  -  1);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iFieldIndex,  newValues,  value  -  1);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	3	None	replace
372	[BUG]  [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  value  *  i);  [CE]  cannot  find  symbol  iFieldIndex  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.set(iChronology,  iFieldIndex,  newValues,  value  *  i);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.set(iChronology,  iFieldIndex,  newValues,  value  *  i);	      newPartial.set(iChronology,    iFieldIndex,    newValues,    value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	3	None	replace
373	[BUG]  [BUGGY]  if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	17	None	replace
374	[BUG]  [BUGGY]  if(iChronology!=  newPartial)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(iChronology!=  newPartial)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(iChronology!=  newPartial)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	17	None	replace
375	[BUG]  [BUGGY]  if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(iChronology!=  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	17	None	replace
376	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  +  1,  newValues.length);  }  [CE]  cannot  find  symbol  iValu  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  +  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  +  1,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  cannot  find  symbol  iValu	17	None	replace
377	[BUG]  [BUGGY]  if(iChronology!=  newPartial)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(iChronology!=  newPartial)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(iChronology!=  newPartial)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValu	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValu    	non-compiled	[CE]  ')'  expected	17	None	replace
378	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	13	replace
379	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	13	replace
380	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	13	replace
381	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	13	replace
382	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
383	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	13	replace
384	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	13	replace
385	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  System.arraycopy(iValues  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  System.arraycopy(iValues  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  for(int  i  =  0;  i  <  newValues.length;  ++i)  {  System.arraycopy(iValues	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
386	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	24	None	replace
387	[BUG]  [BUGGY]  if(newPartial  ==  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial  ==  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial  ==  null)  {  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
388	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues,  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues,	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
389	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValu  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValu  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValues.length);  System.arraycopy(iValues,  0,  newValu	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    newValues.length);    System.arraycopy(iValues    	non-compiled	[CE]  ')'  expected	24	None	replace
390	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  1,  newValues.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  1,  newValues.length);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	25	None	add
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  2,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  2,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
392	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  2,  newValues,  1,  newValues.length);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  2,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  2,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  10,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  10,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
394	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  10,  newValues,  1,  newValues.length);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  10,  newValues,  1,  newValues.length);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  10,  newValues,  1,  newValues.length);  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
395	[BUG]  [BUGGY]  newPartial.validate(fieldType,  newValues);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(fieldType,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(fieldType,  newValues);	      newPartial.validate(newPartial);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
396	[BUG]  [BUGGY]  newPartial.validate(newPartial,  fieldType);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newPartial,  fieldType);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newPartial,  fieldType);	      newPartial.validate(newPartial);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
397	[BUG]  [BUGGY]  newPartial.validate(values,  newValues);  [CE]  cannot  find  symbol  values  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(values,  newValues);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(values,  newValues);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
398	[BUG]  [BUGGY]  newPartial.validate(newValues,  value);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newValues,  value);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newValues,  value);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
399	[BUG]  [BUGGY]  newPartial.validate(newValues,  values);  [CE]  cannot  find  symbol  values  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(newValues,  values);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(newValues,  values);	      newPartial.validate(newPartial,    values);    	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
400	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  +  1,  newValues.length  -  i  -  1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  +  1,  newValues.length  -  i  -  1);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  +  1,  newValues.length  -  i  -  1);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	20	None	replace
401	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  >>  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
402	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  }  return  newPartial;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  }  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  newValues.length);  System.arraycopy(iValues,  i  }  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    1,    newValues.length);    System.arraycopy(iValues,    i    	non-compiled	[CE]  ')'  expected	20	None	replace
403	[BUG]  [BUGGY]  newPartial.validate(this,  iChronology,  newValues);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.validate(this,  iChronology,  newValues);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.validate(this,  iChronology,  newValues);	  newPartial.validate(iChronology,    newValues);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
404	[BUG]  [BUGGY]  iChronology.validate(newPartial,  fieldType,  newTypes);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  fieldType,  newTypes);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  fieldType,  newTypes);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	10	None	replace
405	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  null);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newTypes,  null);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newTypes,  null);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	10	None	replace
406	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newTypes,  type);  [CE]  cannot  find  symbol  type  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newTypes,  type);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newTypes,  type);	  iChronology.validate(newPartial,    newTypes);    	non-compiled	[CE]  cannot  find  symbol  type	10	None	replace
407	[BUG]  [BUGGY]  newPartial.setValue(value  *  iFieldIndex);  [CE]  cannot  find  symbol  iFieldIndex  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(value  *  iFieldIndex);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(value  *  iFieldIndex);	      newPartial.setValue(value);    	non-compiled	[CE]  cannot  find  symbol  iFieldIndex	8	None	replace
408	[BUG]  [BUGGY]  newPartial.setValue(value  <  <  1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(value  <  <  1);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(value  <  <  1);	      newPartial.setValue(value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
409	[BUG]  [BUGGY]  newPartial.setValue(fieldType);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.setValue(fieldType);  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.setValue(fieldType);	      newPartial.setValue(value);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
410	[BUG]  [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
411	[BUG]  [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  return  newPartial;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  return  newPartial;  }  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  return  newPartial;  }	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
412	[BUG]  [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
413	[BUG]  [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value  -  1);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value  -  1);  }  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value  -  1);  }	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
414	[BUG]  [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value  -  1);  return  newPartial;  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value  -  1);  return  newPartial;  }  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value  -  1);  return  newPartial;  }	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
415	[BUG]  [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value  +  1,  newValues  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value  +  1,  newValues  [BUGGY]    iChronology.validate(newPartial,  newValues);  return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  newPartial.setValue(value);  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  value  +  1,  newValues	      newPartial.setValue(value);    iChronology.validate(newPartial,    newValues);    	non-compiled	[CE]  ')'  expected	9	None	replace
416	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  fieldType);  [CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues,  value,  fieldType);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues,  value,  fieldType);	  iChronology.validate(newPartial,    newValues,    value);    	non-compiled	[CE]  method  validate  in  class  Chronology  cannot  be  applied  to  given  types;	1	None	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	2	replace
418	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	compilable	  [FE]  AssertionFailedError  	15	2	replace
419	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	non-compiled	[CE]  ')'  expected	15	None	replace
420	[BUG]  [BUGGY]  if(iChronology!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(iChronology!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(iChronology!=  null)  {  System.arraycopy(iValues,  0,  newValues,  i  +  1,  newValues.length  -  i  -  1);  System.arra	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    i    +    1,    newValues.length    -    i    -    1);    System.arra    	non-compiled	[CE]  not  a  statement	15	None	replace
421	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	11	replace
422	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	11	replace
423	[BUG]  [BUGGY]  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
424	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	11	replace
425	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	11	replace
426	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	10	replace
427	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  1,  value);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	10	replace
428	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	add	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	11	replace
429	[BUG]  [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  return  newPartial;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  return  newPartial;  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=  null)  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  return  newPartial;  }	  if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	11	replace
430	[BUG]  [BUGGY]  newPartial.addChronology(iChronology);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  newPartial.addChronology(iChronology);  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	newPartial.addChronology(iChronology);	      	non-compiled	[CE]  cannot  find  symbol	2	None	replace
431	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  newValues,  0,  value);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  newValues,  0,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iTypes,  newValues,  0,  value);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	add
432	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  1,  value);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  1,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  1,  value);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	add
433	[BUG]  [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  value);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);    [BUGGY]  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  0,  newValues,  0,  value);  }  if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  value);  }  [BUGGY]    return  newPartial;  }  if  (value  ==  getValue(index))  {  return  this;  }  int[]  newValues  =  getValues();  newValues  =  getField(index).set(this,  index,  newValues,  value);  return  new  Partial(this,  newValues);  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	465	465	1	replace	if(newPartial!=    null)    {    iChronology.validate(newPartial,    newValues);    }    else    {    System.arraycopy(iValues,    0,    newValues,    0,    value);    }    if(newPartial!=  null)  {  iChronology.validate(newPartial,  newValues);  }  else  {  System.arraycopy(iValues,  newValues,  value);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	add
