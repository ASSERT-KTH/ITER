bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  newTypes  =  iChronology.getValuesInYear();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }    [BUGGY]  int[]  newTypes  =  iChronology.getValuesInYear();  [BUGGY]    System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	456	456	1	replace	int[]  newTypes  =  iChronology.getValuesInYear();	      int[]    newTypes    =    iChronology.getValues();    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(iTypes,  0,  newValues,  0,  i);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }    [BUGGY]  System.arraycopy(iTypes,  0,  newValues,  0,  i);  [BUGGY]    System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	456	456	1	replace	System.arraycopy(iTypes,  0,  newValues,  0,  i);	      int[]    newValues    =    iChronology.getValues();    System.arraycopy(iTypes,    0,    newValues,    0,    i);    	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesInYear();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }    [BUGGY]  int[]  newValues  =  iChronology.getValuesInYear();  [BUGGY]    System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	456	456	1	replace	int[]  newValues  =  iChronology.getValuesInYear();	      int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }    [BUGGY]  System.arraycopy(iValues,  0,  newValues,  0,  i);  [BUGGY]    System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	456	456	1	replace	System.arraycopy(iValues,  0,  newValues,  0,  i);	      int[]    newValues    =    iChronology.getValues();    System.arraycopy(iValues,    0,    newValues,    0,    i);    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  int[]  newTypes  =  iChronology.getNewValues();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }    [BUGGY]  int[]  newTypes  =  iChronology.getNewValues();  [BUGGY]    System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	456	456	1	replace	int[]  newTypes  =  iChronology.getNewValues();	      int[]    newTypes    =    iChronology.getValues();    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  int[]  newValues  =  iChronology.getValuesArray();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }    [BUGGY]  int[]  newValues  =  iChronology.getValuesArray();  [BUGGY]    System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	456	456	1	replace	int[]  newValues  =  iChronology.getValuesArray();	      int[]    newValues    =    iChronology.getValues();    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  int[]  newTypes  =  iChronology.getNewTypes();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }    [BUGGY]  int[]  newTypes  =  iChronology.getNewTypes();  [BUGGY]    System.arraycopy(iTypes,  0,  newTypes,  0,  i);  System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	456	456	1	replace	int[]  newTypes  =  iChronology.getNewTypes();	      int[]    newTypes    =    iChronology.getValues();    	non-compiled	[CE]  	2	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  i);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  }  }    [BUGGY]  System.arraycopy(iValues,  0,  newTypes,  0,  i);  [BUGGY]    System.arraycopy(iValues,  0,  newValues,  0,  i);  newTypes[i]  =  fieldType;  newValues[i]  =  value;  System.arraycopy(iTypes,  i,  newTypes,  i  +  1,  newTypes.length  -  i  -  1);  System.arraycopy(iValues,  i,  newValues,  i  +  1,  newValues.length  -  i  -  1);    Partial  newPartial  =  new  Partial(iChronology,  newTypes,  newValues);  iChronology.validate(newPartial,  newValues);  return  newPartial;  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	456	456	1	replace	System.arraycopy(iValues,  0,  newTypes,  0,  i);	  System.arraycopy(iTypes,    0,    newTypes,    0,    value);    	non-compiled	[CE]  	4	None	replace
