bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes,  index);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];      [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes,  index);  [BUGGY]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	433	433	1	replace	int[]  newValues  =  iTypes.toArray(newTypes,  index);	  int[]    newValues    =    iTypes.toArray(newTypes,    value);    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes,  value  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];      [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes,  value  +  1);  [BUGGY]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	433	433	1	replace	int[]  newValues  =  iTypes.toArray(newTypes,  value  +  1);	  int[]    newValues    =    iTypes.toArray(newTypes,    value);    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  int[]  newTypes  =  fieldType.toArray(newTypes,  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];      [BUGGY]  int[]  newTypes  =  fieldType.toArray(newTypes,  value);  [BUGGY]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	433	433	1	replace	int[]  newTypes  =  fieldType.toArray(newTypes,  value);	  int[]    newTypes    =    fieldType.toArray(newTypes);    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Type[iTypes.length  +  1]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];      [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Type[iTypes.length  +  1]);  [BUGGY]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	433	433	1	replace	int[]  newValues  =  iTypes.toArray(new  Type[iTypes.length  +  1]);	  int[]    newValues    =    iTypes.toArray(new    Type[iTypes.length]);    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  int[]  newTypes  =  iTypes.toArray(newTypes,  index);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];      [BUGGY]  int[]  newTypes  =  iTypes.toArray(newTypes,  index);  [BUGGY]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	433	433	1	replace	int[]  newTypes  =  iTypes.toArray(newTypes,  index);	  int[]    newTypes    =    iTypes.toArray(newTypes,    value);    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Type[1]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];      [BUGGY]  int[]  newValues  =  iTypes.toArray(new  Type[1]);  [BUGGY]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	433	433	1	replace	int[]  newValues  =  iTypes.toArray(new  Type[1]);	  int[]    newValues    =    iTypes.toArray(new    Type[0]);    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  ArrayList  <  DateTimeFieldType>  newTypes  =  new  ArrayList  <  DateTimeFieldType>[iTypes.length];  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];      [BUGGY]  ArrayList  <  DateTimeFieldType>  newTypes  =  new  ArrayList  <  DateTimeFieldType>[iTypes.length];  [BUGGY]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	433	433	1	replace	ArrayList  <  DateTimeFieldType>  newTypes  =  new  ArrayList  <  DateTimeFieldType>[iTypes.length];	  DateTimeFieldType[]    newTypes    =    new    DateTimeFieldType[iTypes.length];    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  int[]  newValues  =  new  int[iValues.length  +  1];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];      [BUGGY]  int[]  newValues  =  new  int[iValues.length  +  1];  [BUGGY]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2773500981126146	433	433	1	replace	int[]  newValues  =  new  int[iValues.length  +  1];	  int[]    newValues    =    new    int[index    +    1];    	non-compiled	[CE]  	8	None	replace
