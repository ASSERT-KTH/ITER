bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iTypes[i]  =  fieldType.getDurationType().getField(iChronology);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  iTypes[i]  =  fieldType.getDurationType().getField(iChronology);  [BUGGY]    DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	iTypes[i]  =  fieldType.getDurationType().getField(iChronology);	      	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes[i].getValues());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes[i].getValues());  [BUGGY]    DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  newValues  =  iTypes.toArray(newTypes[i].getValues());	      	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  int[]  iValues  =  newTypes.toArray(newTypes.size()  -  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  iValues  =  newTypes.toArray(newTypes.size()  -  1);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  iValues  =  newTypes.toArray(newTypes.size()  -  1);	      int[]    iValues    =    newTypes.toArray(newTypes.size());    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  int[]  newValues  =  newTypes.toArray(newTypes.size()  -  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  newValues  =  newTypes.toArray(newTypes.size()  -  1);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  newValues  =  newTypes.toArray(newTypes.size()  -  1);	      int[]    iValues    =    newTypes.toArray(newTypes.size());    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  for(;  i  <  newTypes.length  +  1;  i++)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  for(;  i  <  newTypes.length  +  1;  i++)  {  [BUGGY]    DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	for(;  i  <  newTypes.length  +  1;  i++)  {	  for(;    i    <    newTypes.length;    i++)    {    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  int[]  iValues  =  unitField.getValues(iChronology);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  iValues  =  unitField.getValues(iChronology);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  iValues  =  unitField.getValues(iChronology);	      int[]    iValues    =    unitField.getValues();    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  int[]  iTypes  =  newValues.toArray(newTypes);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  iTypes  =  newValues.toArray(newTypes);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  iTypes  =  newValues.toArray(newTypes);	      int[]    iTypes    =    newValues.toArray(newValues);    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  int[]  newValues  =  unitField.toArray(newValues);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  newValues  =  unitField.toArray(newValues);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  newValues  =  unitField.toArray(newValues);	      int[]    iTypes    =    newValues.toArray(newValues);    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(unitField);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  newValues  =  iTypes.get(unitField);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  newValues  =  iTypes.get(unitField);	      int[]    newValues    =    iTypes.get(iChronology);    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(iChronology  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  newValues  =  iTypes.get(iChronology  +  1);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  newValues  =  iTypes.get(iChronology  +  1);	      int[]    newValues    =    iTypes.get(iChronology);    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  int[]  newValues  =  unitField.toArray(newTypes[iTypes.length  +  1]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  newValues  =  unitField.toArray(newTypes[iTypes.length  +  1]);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  newValues  =  unitField.toArray(newTypes[iTypes.length  +  1]);	      int[]    newValues    =    iTypes.toArray(newTypes[iTypes.length    +    1]);    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  int[]  iValues  =  newTypes.toArray(newTypes.length);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  iValues  =  newTypes.toArray(newTypes.length);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  iValues  =  newTypes.toArray(newTypes.length);	      int[]    iValues    =    newTypes.toArray(newTypes);    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  int[]  iValues  =  new  int[iValues.length  +  1];  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  iValues  =  new  int[iValues.length  +  1];  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  iValues  =  new  int[iValues.length  +  1];	      int[]    iValues    =    new    int[newValues.length    +    1];    	non-compiled	[CE]  	12	None	replace
14	[BUG]  [BUGGY]  DateTimeFieldType  iTypes[]  =  newTypes  ==  null?  null  :  newTypes.toArray(newTypes);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  DateTimeFieldType  iTypes[]  =  newTypes  ==  null?  null  :  newTypes.toArray(newTypes);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	DateTimeFieldType  iTypes[]  =  newTypes  ==  null?  null  :  newTypes.toArray(newTypes);	      DateTimeFieldType    iTypes[]    =    newTypes.toArray(newTypes);    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  int[]  newValues  =  newTypes.toArray(newTypes[iTypes.length  +  1]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  newValues  =  newTypes.toArray(newTypes[iTypes.length  +  1]);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  newValues  =  newTypes.toArray(newTypes[iTypes.length  +  1]);	      int[]    newValues    =    iTypes.toArray(newTypes[iTypes.length    +    1]);    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  for(;  i  <  newValues.length  +  1;  i++)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  for(;  i  <  newValues.length  +  1;  i++)  {  [BUGGY]    DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	for(;  i  <  newValues.length  +  1;  i++)  {	  for(;    i    <    newValues.length;    i++)    {    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  int[]  iValues  =  newTypes.toArray(newTypes,  value);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  iValues  =  newTypes.toArray(newTypes,  value);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  iValues  =  newTypes.toArray(newTypes,  value);	      int[]    iValues    =    newTypes.toArray(newTypes);    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  iTypes[i]  =  fieldType.getField(iChronology);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  iTypes[i]  =  fieldType.getField(iChronology);  [BUGGY]    DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	iTypes[i]  =  fieldType.getField(iChronology);	      	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  int[]  iTypes  =  newValues!=  null?  values[0]  :  newValues.toArray(newValues);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  iTypes  =  newValues!=  null?  values[0]  :  newValues.toArray(newValues);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  iTypes  =  newValues!=  null?  values[0]  :  newValues.toArray(newValues);	      int[]    iTypes    =    newValues.toArray(newValues);    	non-compiled	[CE]  	13	None	replace
20	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.get(index);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  newValues  =  iTypes.get(index);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  newValues  =  iTypes.get(index);	      int[]    newValues    =    iTypes.get(iChronology);    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  DateTimeFieldType  iTypes[]  =  newTypes!=  null?  null  :  newTypes.toArray(newTypes);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  DateTimeFieldType  iTypes[]  =  newTypes!=  null?  null  :  newTypes.toArray(newTypes);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	DateTimeFieldType  iTypes[]  =  newTypes!=  null?  null  :  newTypes.toArray(newTypes);	      DateTimeFieldType    iTypes[]    =    newTypes.toArray(newTypes);    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  newValues  =  iTypes.toArray(newTypes);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  newValues  =  iTypes.toArray(newTypes);	      int[]    newValues    =    iTypes.toArray(newTypes[iTypes.size()    ]);    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  int[]  iValues  =  newValues.toArray(newTypes);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  iValues  =  newValues.toArray(newTypes);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  iValues  =  newValues.toArray(newTypes);	      int[]    iValues    =    newTypes.toArray(newTypes);    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  int[]  iValues  =  newTypes.toArray(newTypes.size()  +  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  int[]  iValues  =  newTypes.toArray(newTypes.size()  +  1);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	int[]  iValues  =  newTypes.toArray(newTypes.size()  +  1);	      int[]    iValues    =    newTypes.toArray(newTypes.size());    	non-compiled	[CE]  	10	None	replace
25	[BUG]  [BUGGY]  DateTimeFieldType  iTypes[]  =  unitField.toArray(newTypes);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {    [BUGGY]  DateTimeFieldType  iTypes[]  =  unitField.toArray(newTypes);  [BUGGY]    for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {  int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.2886751345948129	439	439	1	replace	DateTimeFieldType  iTypes[]  =  unitField.toArray(newTypes);	      DateTimeFieldType    iTypes[]    =    newTypes.toArray(newTypes);    	non-compiled	[CE]  	8	None	replace
