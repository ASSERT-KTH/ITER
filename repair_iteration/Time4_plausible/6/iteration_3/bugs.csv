bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  compare  =  unitField.compareTo(iValues,  newValues);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  unitField.compareTo(iValues,  newValues);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  unitField.compareTo(iValues,  newValues);	  int    compare    =    unitField.compareTo(iValues,    value);    	non-compiled	[CE]  	16	None	replace
2	[BUG]  [BUGGY]  int  compare  =  unitField.compareTo(newValues,  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  unitField.compareTo(newValues,  value);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  unitField.compareTo(newValues,  value);	  int    compare    =    unitField.compareTo(iValues,    value);    	non-compiled	[CE]  	16	None	replace
3	[BUG]  [BUGGY]  int[]  newValues  =  new  int[iTypes.length  +  1];  System.arraycopy(iTypes,  0,  newValues,  0,  iTypes.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int[]  newValues  =  new  int[iTypes.length  +  1];  System.arraycopy(iTypes,  0,  newValues,  0,  iTypes.length);  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int[]  newValues  =  new  int[iTypes.length  +  1];  System.arraycopy(iTypes,  0,  newValues,  0,  iTypes.length);	  int[]    newValues    =    new    int[iTypes.length    +    1];    System.arraycopy(iTypes,    0,    newValues,    0,    newValues.length);    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  int[]  newValues  =  new  int[iTypes.length  -  1];  System.arraycopy(iTypes,  0,  newValues,  0,  iValues.length);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int[]  newValues  =  new  int[iTypes.length  -  1];  System.arraycopy(iTypes,  0,  newValues,  0,  iValues.length);  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int[]  newValues  =  new  int[iTypes.length  -  1];  System.arraycopy(iTypes,  0,  newValues,  0,  iValues.length);	  int[]    newValues    =    new    int[iTypes.length    +    1];    System.arraycopy(iTypes,    0,    newValues,    0,    iValues.length);    	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  int  compare  =  iTypes[i].getIndex()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  iTypes[i].getIndex()  +  1;  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  iTypes[i].getIndex()  +  1;	  int    compare    =    iTypes[i].getIndex();    	non-compiled	[CE]  	21	None	replace
6	[BUG]  [BUGGY]  int  compare  =  iTypes[i].getIndex()  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  iTypes[i].getIndex()  -  1;  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  iTypes[i].getIndex()  -  1;	  int    compare    =    iTypes[i].getIndex();    	non-compiled	[CE]  	21	None	replace
7	[BUG]  [BUGGY]  int  compare  =  unitField.compareTo(loopUnitField,  newValues,  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  unitField.compareTo(loopUnitField,  newValues,  value);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  unitField.compareTo(loopUnitField,  newValues,  value);	  int    compare    =    unitField.compareTo(loopUnitField,    newValues);    	non-compiled	[CE]  	17	None	replace
8	[BUG]  [BUGGY]  int  compare  =  newValues[i].compareTo(loopUnitField);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  newValues[i].compareTo(loopUnitField);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  newValues[i].compareTo(loopUnitField);	  int    compare    =    iTypes[i].compareTo(unitField);    	non-compiled	[CE]  	1	None	replace
9	[BUG]  [BUGGY]  int  compare  =  iTypes[i].compareTo(loopUnitField,  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  iTypes[i].compareTo(loopUnitField,  value);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  iTypes[i].compareTo(loopUnitField,  value);	  int    compare    =    iTypes[i].compareTo(loopUnitField);    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  int[]  newValues  =  new  int[iTypes.length  -  1];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int[]  newValues  =  new  int[iTypes.length  -  1];  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int[]  newValues  =  new  int[iTypes.length  -  1];	  int[]    newValues    =    new    int[iTypes.length];    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);	  DurationField    unitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	12	None	replace
12	[BUG]  [BUGGY]  DurationFieldType  loopUnitField  =  fieldType.getDurationType().getField(iChronology);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  DurationFieldType  loopUnitField  =  fieldType.getDurationType().getField(iChronology);  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	DurationFieldType  loopUnitField  =  fieldType.getDurationType().getField(iChronology);	  DurationFieldType    loopUnitField    =    loopType.getDurationType().getField(iChronology);    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  int  compare  =  iTypes[i].compareTo(fieldType);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  iTypes[i].compareTo(fieldType);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  iTypes[i].compareTo(fieldType);	  int    compare    =    fieldType.compareTo(iTypes[i]);    	non-compiled	[CE]  	18	None	replace
14	[BUG]  [BUGGY]  int  compare  =  iValues.compareTo(newValues[i]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  iValues.compareTo(newValues[i]);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  iValues.compareTo(newValues[i]);	  int    compare    =    unitField.compareTo(newValues[i]);    	non-compiled	[CE]  	23	None	replace
15	[BUG]  [BUGGY]  int  compare  =  unitField.compareTo(newValues[i],  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  unitField.compareTo(newValues[i],  value);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  unitField.compareTo(newValues[i],  value);	  int    compare    =    unitField.compareTo(newValues[i]);    	non-compiled	[CE]  	23	None	replace
16	[BUG]  [BUGGY]  int[]  newValues  =  new  int[loopUnitField.length  -  1];  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int[]  newValues  =  new  int[loopUnitField.length  -  1];  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int[]  newValues  =  new  int[loopUnitField.length  -  1];	  int[]    loopValues    =    new    int[loopUnitField.length];    	non-compiled	[CE]  	20	None	replace
17	[BUG]  [BUGGY]  int  compare  =  value.compareTo(loopUnitField,  fieldType);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  value.compareTo(loopUnitField,  fieldType);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  value.compareTo(loopUnitField,  fieldType);	  int    compare    =    fieldType.compareTo(loopUnitField,    value);    	non-compiled	[CE]  	11	None	replace
18	[BUG]  [BUGGY]  int  compare  =  fieldType.compareTo(loopUnitField,  newValues);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  fieldType.compareTo(loopUnitField,  newValues);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  fieldType.compareTo(loopUnitField,  newValues);	  int    compare    =    fieldType.compareTo(loopUnitField,    value);    	non-compiled	[CE]  	11	None	replace
19	[BUG]  [BUGGY]  int  compare  =  getValue(iChronology).compareTo(loopUnitField,  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  getValue(iChronology).compareTo(loopUnitField,  value);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  getValue(iChronology).compareTo(loopUnitField,  value);	  int    compare    =    getValue(iChronology).compareTo(loopUnitField);    	non-compiled	[CE]  	22	None	replace
20	[BUG]  [BUGGY]  int  compare  =  getValue(iChronology).compareTo(newValues[i]);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  getValue(iChronology).compareTo(newValues[i]);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  getValue(iChronology).compareTo(newValues[i]);	  int    compare    =    getValue(iChronology).compareTo(loopUnitField);    	non-compiled	[CE]  	22	None	replace
21	[BUG]  [BUGGY]  int  compare  =  iTypes[i].compareTo(loopUnitField,  unitField);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  iTypes[i].compareTo(loopUnitField,  unitField);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  iTypes[i].compareTo(loopUnitField,  unitField);	  int    compare    =    unitField.compareTo(loopUnitField,    iTypes[i]);    	non-compiled	[CE]  	19	None	replace
22	[BUG]  [BUGGY]  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if(unitField.compareTo(loopUnitField)>  0)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if(unitField.compareTo(loopUnitField)>  0)  {  break;  }  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if(unitField.compareTo(loopUnitField)>  0)  {  break;  }	  DurationField    unitField    =    loopUnitField.getDurationType().getField(iChronology);    if(unitField.compareTo(loopUnitField)>    0)    {    break;    }    	non-compiled	[CE]  	13	None	replace
23	[BUG]  [BUGGY]  int  compare  =  unitField.compareTo(loopUnitField,  newValues[i]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  unitField.compareTo(loopUnitField,  newValues[i]);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  unitField.compareTo(loopUnitField,  newValues[i]);	  int    compare    =    unitField.compareTo(loopUnitField,    iTypes[i]);    	non-compiled	[CE]  	19	None	replace
24	[BUG]  [BUGGY]  int  compare  =  unitField.compareTo(iTypes[i],  loopUnitField);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  unitField.compareTo(iTypes[i],  loopUnitField);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  unitField.compareTo(iTypes[i],  loopUnitField);	  int    compare    =    unitField.compareTo(loopUnitField,    iTypes[i]);    	non-compiled	[CE]  	19	None	replace
25	[BUG]  [BUGGY]  int  compare  =  unitField.compareTo(iValues[i]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  unitField.compareTo(iValues[i]);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  unitField.compareTo(iValues[i]);	  int    compare    =    unitField.compareTo(newValues[i]);    	non-compiled	[CE]  	23	None	replace
26	[BUG]  [BUGGY]  DurationField  loopUnitField  =  fieldType.getLoopDurationType().getField(iChronology);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  DurationField  loopUnitField  =  fieldType.getLoopDurationType().getField(iChronology);  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	DurationField  loopUnitField  =  fieldType.getLoopDurationType().getField(iChronology);	  DurationField    loopUnitField    =    loopType.getDurationType().getField(iChronology);    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  int[]  loopValues  =  new  int[loopUnitField.length  -  1];  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int[]  loopValues  =  new  int[loopUnitField.length  -  1];  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int[]  loopValues  =  new  int[loopUnitField.length  -  1];	  int[]    loopValues    =    new    int[loopUnitField.length];    	non-compiled	[CE]  	20	None	replace
28	[BUG]  [BUGGY]  int[]  loopValues  =  new  int[loopUnitField.length  +  1];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int[]  loopValues  =  new  int[loopUnitField.length  +  1];  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int[]  loopValues  =  new  int[loopUnitField.length  +  1];	  int[]    loopValues    =    new    int[loopUnitField.length];    	non-compiled	[CE]  	20	None	replace
29	[BUG]  [BUGGY]  int  compare  =  fieldUnitField.compareTo(iTypes[i]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  fieldUnitField.compareTo(iTypes[i]);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  fieldUnitField.compareTo(iTypes[i]);	  int    compare    =    fieldType.compareTo(iTypes[i]);    	non-compiled	[CE]  	18	None	replace
30	[BUG]  [BUGGY]  int  compare  =  fieldType.compareTo(loopUnitField,  iValues);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  fieldType.compareTo(loopUnitField,  iValues);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  fieldType.compareTo(loopUnitField,  iValues);	  int    compare    =    fieldType.compareTo(loopUnitField,    value);    	non-compiled	[CE]  	11	None	replace
31	[BUG]  [BUGGY]  int  compare  =  fieldType.compareTo(iTypes[i],  value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  fieldType.compareTo(iTypes[i],  value);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  fieldType.compareTo(iTypes[i],  value);	  int    compare    =    fieldType.compareTo(loopUnitField,    value);    	non-compiled	[CE]  	11	None	replace
32	[BUG]  [BUGGY]  int[]  newValues  =  new  int[loopUnitField.length  +  2];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int[]  newValues  =  new  int[loopUnitField.length  +  2];  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int[]  newValues  =  new  int[loopUnitField.length  +  2];	  int[]    newValues    =    new    int[loopUnitField.length    +    1];    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  int  compare  =  loopUnitField.compareTo(iTypes);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  loopUnitField.compareTo(iTypes);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  loopUnitField.compareTo(iTypes);	  int    compare    =    iTypes[i].compareTo(unitField);    	non-compiled	[CE]  	1	None	replace
34	[BUG]  [BUGGY]  int  compare  =  unitField.compareTo(loopUnitField,  iValues);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  unitField.compareTo(loopUnitField,  iValues);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  unitField.compareTo(loopUnitField,  iValues);	  int    compare    =    unitField.compareTo(loopUnitField,    newValues);    	non-compiled	[CE]  	17	None	replace
35	[BUG]  [BUGGY]  int  compare  =  value.compareTo(iValues,  unitField);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  value.compareTo(iValues,  unitField);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  value.compareTo(iValues,  unitField);	  int    compare    =    unitField.compareTo(iValues,    value);    	non-compiled	[CE]  	16	None	replace
36	[BUG]  [BUGGY]  if(iTypes.length!=  0)  {  int[]  newValues  =  new  int[iTypes.length  +  1];  System.arraycopy(iTypes,  0,  newValues,  0,  iValues.length);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  if(iTypes.length!=  0)  {  int[]  newValues  =  new  int[iTypes.length  +  1];  System.arraycopy(iTypes,  0,  newValues,  0,  iValues.length);  }  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	if(iTypes.length!=  0)  {  int[]  newValues  =  new  int[iTypes.length  +  1];  System.arraycopy(iTypes,  0,  newValues,  0,  iValues.length);  }	  int[]    newValues    =    new    int[iTypes.length    +    1];    System.arraycopy(iTypes,    0,    newValues,    0,    iValues.length);    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  DateTimeFieldType  loopUnitField  =  fieldType.getDurationType().getField(iChronology);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  DateTimeFieldType  loopUnitField  =  fieldType.getDurationType().getField(iChronology);  [BUGGY]      int  compare  =  unitField.compareTo(loopUnitField);  if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	DateTimeFieldType  loopUnitField  =  fieldType.getDurationType().getField(iChronology);	  DateTimeFieldType    loopUnitField    =    loopType.getDurationType().getField(iChronology);    	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  int  compare  =  fieldType.compareTo(newValues[i]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  if  (unitField.isSupported())  {  for  (;  i  <  iTypes.length;  i++)  {  DateTimeFieldType  loopType  =  iTypes[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (loopUnitField.isSupported())  {      [BUGGY]  int  compare  =  fieldType.compareTo(newValues[i]);  [BUGGY]      if  (compare  >  0)  {  break;  }  else  if  (compare  ==  0)  {  DurationField  rangeField  =  fieldType.getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (rangeField.compareTo(loopRangeField)  >  0)  {  break;  }  }  }  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time4/src/main/java/org/joda/time/Partial.java	0.3333333333333333	443	443	1	replace	int  compare  =  fieldType.compareTo(newValues[i]);	  int    compare    =    fieldType.compareTo(iTypes[i]);    	non-compiled	[CE]  	18	None	replace
