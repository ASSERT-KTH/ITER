bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externs);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  hasOkDuplicateDeclaration);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  hasOkDuplicateDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externals);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  root);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  root);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  parent);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  exprs);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
9	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs);  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
10	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
11	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  parent);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
12	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs);  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
13	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
14	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
15	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
16	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs.cloneTree());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs.cloneTree());  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
17	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
18	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
19	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
20	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
21	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
22	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
23	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
24	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
25	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
26	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [CE]  incompatible  types  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  incompatible  types	4	None	replace
27	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	4	None	replace
28	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse(root);  [CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;	4	None	replace
29	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverse(root);  [CE]  cannot  find  symbol  externals  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverse(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverse(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  cannot  find  symbol  externals	4	None	replace
30	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	4	None	replace
31	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [CE]  cannot  find  symbol  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
32	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	4	None	replace
33	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;	4	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  void  cannot  be  dereferenced  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  void  cannot  be  dereferenced	27	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  cannot  find  symbol  externals  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  externals	27	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  void  cannot  be  dereferenced  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  void  cannot  be  dereferenced	27	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  void  cannot  be  dereferenced  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  void  cannot  be  dereferenced	27	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  cannot  find  symbol  hasOkDuplicateDeclaration  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  hasOkDuplicateDeclaration	27	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NormalizeStatements)  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NormalizeStatements)	27	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  cannot  find  symbol  parent  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  parent	27	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  cannot  find  symbol  externes  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  externes	27	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  cannot  find  symbol  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
43	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(root);  [CE]  cannot  find  symbol  verifyOnChange  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverse(root);    	non-compiled	[CE]  cannot  find  symbol  verifyOnChange	15	None	replace
44	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [CE]  cannot  find  symbol  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverse(root);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
45	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverse(root);  [CE]  cannot  find  symbol  checkUserDeclaration  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverse(root);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclaration	15	None	replace
46	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(root);  [CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverse(root);    	non-compiled	[CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;	15	None	replace
47	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;	5	None	replace
48	[BUG]  [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
49	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  cannot  find  symbol  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
50	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  type  NodeTraversal  does  not  take  parameters  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  type  NodeTraversal  does  not  take  parameters	5	None	replace
51	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  cannot  find  symbol  hasOkDuplicateDeclaration  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  hasOkDuplicateDeclaration	16	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  parent);  [CE]  cannot  find  symbol  parent  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  parent);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  parent	16	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externs);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false);  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  false);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  renamer);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  renamer);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	16	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  true);  [CE]  cannot  find  symbol  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  true);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  true);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  t);  [CE]  cannot  find  symbol  t  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  t);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  t);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	16	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  null);  [CE]  cannot  find  symbol  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  null);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  null);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
61	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
62	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(root);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	25	None	replace
63	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root);  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
64	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root);    	non-compiled	[CE]  ')'  expected	25	None	replace
65	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  ')'  expected	8	None	replace
66	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  ')'  expected	8	None	replace
67	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
69	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs,  root);  [CE]  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
70	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
71	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse(externs,  root);  [CE]  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
72	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root);  [CE]  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
73	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [CE]  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverse(root);  [CE]  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs.traverse(root);    	non-compiled	[CE]  	22	None	replace
75	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverse(root);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	22	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  externs);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  ')'  expected	29	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  hasOkDuplicateDeclaration);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  hasOkDuplicateDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  ')'  expected	29	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  externals);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  ')'  expected	29	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  exprs);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  exprs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  exprs);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  ')'  expected	29	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  root);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  ')'  expected	29	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  root);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  root);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  ')'  expected	29	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  parent);  [CE]  ')'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  parent);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  ')'  expected	29	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  internal);  [CE]  ')'  expected  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  internal);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  internal);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  ')'  expected	29	None	replace
84	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  ')'  expected	21	None	replace
85	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  externs);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  ')'  expected	21	None	replace
86	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  ')'  expected	21	None	replace
87	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(externs,  root);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  ')'  expected	21	None	replace
88	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  ')'  expected	21	None	replace
89	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  ')'  expected	21	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	3	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	3	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclarations);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclarations);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclarations);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	3	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	3	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  t);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	3	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  renamer);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	3	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [CE]  ')'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	3	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  parent);  [CE]  ')'  expected  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  parent);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	3	None	replace
98	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  ')'  expected	10	None	replace
99	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  ')'  expected	10	None	replace
100	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(root);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  ')'  expected	10	None	replace
101	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertonChange)).traverse(root);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertonChange)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertonChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  ')'  expected	10	None	replace
102	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  ')'  expected	10	None	replace
103	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	1	None	replace
104	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	1	None	replace
105	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	1	None	replace
106	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	1	None	replace
107	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	1	None	replace
108	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	1	None	replace
109	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	1	None	replace
110	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs.traverse(root);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs.traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	12	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	12	None	replace
112	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs,  root);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	12	None	replace
113	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	12	None	replace
114	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root));  [CE]  ')'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root));  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	12	None	replace
115	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [CE]  ')'  expected  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	12	None	replace
116	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  [CE]  ')'  expected  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	12	None	replace
117	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	9	None	replace
118	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	9	None	replace
119	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	9	None	replace
120	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	9	None	replace
121	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	9	None	replace
122	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	9	None	replace
123	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	9	None	replace
124	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  extern);  [CE]  ')'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  extern);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  extern);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	9	None	replace
125	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	20	None	replace
126	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	20	None	replace
127	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
128	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  assertOnChange);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  assertOnChange);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	20	None	replace
129	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	20	None	replace
130	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	20	None	replace
131	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	20	None	replace
132	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  ')'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	20	None	replace
133	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	20	None	replace
134	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	6	None	replace
135	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	6	None	replace
136	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	6	None	replace
137	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	6	None	replace
138	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
139	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	6	None	replace
140	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	6	None	replace
141	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	6	None	replace
142	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [CE]  ')'  expected  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	6	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  parent);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  parent);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  true);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  true);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  true);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  parent);  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  parent);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  false);  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  false);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  false);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  externs);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  renamer);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  renamer);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  renamer);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  true);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  true);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  true);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  t);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  t);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  t);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
159	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
160	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
161	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
162	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
163	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
164	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
165	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
166	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
167	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
168	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
169	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
170	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
171	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(compiler);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(compiler);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(compiler);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	28	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	28	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	28	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	28	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);  [CE]  ')'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	28	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  ')'  expected  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	28	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  externs);  [CE]  <identifier>  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  externs);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  parent);  [CE]  <identifier>  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  parent);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  parent);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false);  [CE]  <identifier>  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  false);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	18	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  true);  [CE]  ')'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  true);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  true);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	18	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  t);  [CE]  ')'  expected  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  t);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  t);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	18	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  null);  [CE]  ';'  expected  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  null);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  null);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  ';'  expected	18	None	replace
190	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverse(root);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(root);    	non-compiled	[CE]  ')'  expected	14	None	replace
191	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(root);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(root);    	non-compiled	[CE]  ')'  expected	14	None	replace
192	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(root);  [CE]  ';'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(root);    	non-compiled	[CE]  ';'  expected	14	None	replace
193	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(root);  [CE]  ')'  expected  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(root);    	non-compiled	[CE]  ')'  expected	14	None	replace
194	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(root);  [CE]  ')'  expected  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(root);    	non-compiled	[CE]  ')'  expected	14	None	replace
195	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(root);  [CE]  ')'  expected  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(root);    	non-compiled	[CE]  ')'  expected	14	None	replace
196	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  ')'  expected	13	None	replace
197	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  ')'  expected	13	None	replace
198	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs);  [CE]  ';'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  ';'  expected	13	None	replace
199	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs);    	non-compiled	[CE]  ')'  expected	26	None	replace
200	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs);    	non-compiled	[CE]  ')'  expected	26	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  this);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	3	None	replace
202	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	19	None	replace
203	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	19	None	replace
204	[BUG]  [BUGGY]  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	19	None	replace
205	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	19	None	replace
206	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	19	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this);  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  this);	      NodeTraversal.traverseNode(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	16	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  ')'  expected	7	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  ')'  expected	7	None	replace
210	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverse(externs);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverse(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(root);    	non-compiled	[CE]  ')'  expected	14	None	replace
211	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	4	None	replace
212	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extterns,  root);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extterns,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extterns,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	4	None	replace
213	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	4	None	replace
214	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  root);  [CE]  ')'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	4	None	replace
215	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  ')'  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ')'  expected	4	None	replace
216	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs.cloneTree());  [CE]  ';'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs.cloneTree());  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs.cloneTree());	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  ';'  expected	4	None	replace
217	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	6	None	replace
218	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs.cloneTree());  [CE]  ';'  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs.cloneTree());	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	6	None	replace
219	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(root,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(root,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(root,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
220	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externes);  [CE]  ';'  expected  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externes);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externes);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	6	None	replace
221	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  externs);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
222	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  ')'  expected	21	None	replace
223	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  this);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  null);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  null);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  null);	      NodeTraversal.traverseNodes(compiler,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	2	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  node);  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  node);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  node);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	2	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclaration);  [CE]  ')'  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclaration);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclaration);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  ')'  expected	2	None	replace
229	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	9	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  this);	      NodeTraversal.traverseConstants(compiler,    externs,    root);    	non-compiled	[CE]  ';'  expected	18	None	replace
231	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	5	None	replace
232	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	5	None	replace
233	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  ')'  expected	8	None	replace
235	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root);  [CE]  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
236	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
237	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [CE]  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  	11	None	replace
238	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [CE]  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  	11	None	replace
239	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [CE]  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  	10	None	replace
240	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs);  [CE]  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  	10	None	replace
241	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverseRoots(externs,  root);  [CE]  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	12	None	replace
242	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  root);  [CE]  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	12	None	replace
243	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
244	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  [CE]  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	20	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	20	None	replace
246	[BUG]  [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
247	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  renamer);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  	29	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t);  [CE]  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  t);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  	29	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  this);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  	29	None	replace
251	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);  [CE]  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  	24	None	replace
252	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
253	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
254	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs,  root);  [CE]  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  	24	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
257	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
258	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
259	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
260	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
261	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [CE]  illegal  start  of  type  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);  [CE]  illegal  start  of  type  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
265	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
266	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internal);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internal);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
268	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externes);  [CE]  illegal  start  of  type  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externes);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externes);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
270	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
271	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);  [CE]  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  	13	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
277	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals,  root);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  not  a  statement	23	None	replace
278	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  not  a  statement	4	None	replace
279	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  root);  [CE]  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  	4	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements());  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements());  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  not  a  statement	29	None	replace
281	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	1	None	replace
282	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	1	None	replace
283	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  internal);  [CE]  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  internal);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  internal);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	1	None	replace
284	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  root);  [CE]  not  a  statement  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	6	None	replace
285	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	6	None	replace
286	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	5	None	replace
287	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  interns);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  interns);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  interns);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	9	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	27	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	27	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);  [CE]  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	27	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  root);  [CE]  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	27	None	replace
292	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverse(root);    	non-compiled	[CE]  	15	None	replace
293	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [CE]  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverse(root);    	non-compiled	[CE]  	15	None	replace
294	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [CE]  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  	11	None	replace
295	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);  [CE]  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  	11	None	replace
296	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse();  [CE]  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse();  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  	11	None	replace
297	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  onChange)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  onChange)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  onChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
298	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements());  [CE]  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements());  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  	3	None	replace
300	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [CE]  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs);    	non-compiled	[CE]  	26	None	replace
301	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(root);  [CE]  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	12	None	replace
302	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	12	None	replace
303	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(root);  [CE]  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	12	None	replace
304	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root);  [CE]  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	12	None	replace
305	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverseRoots(externs,  root);  [CE]  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	12	None	replace
306	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs,  root);  [CE]  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	12	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  HashMap.class);  [CE]  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  HashMap.class);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  HashMap.class);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  	2	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
309	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(root);  [CE]  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(root);    	non-compiled	[CE]  	14	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  Root);  [CE]  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  Root);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  Root);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  	7	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this);  [BUGGY]    new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  this);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
312	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  root);  [CE]  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
313	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root,  externs);  [CE]  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root,  externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
314	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root);  [CE]  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	8	None	replace
315	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  root);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
316	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
317	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);  [CE]  <identifier>  expected  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
318	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(root);  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  not  a  statement	10	None	replace
319	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root);  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root);    	non-compiled	[CE]  not  a  statement	25	None	replace
320	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  externs,  root);  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  not  a  statement	21	None	replace
321	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  internal);  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  internal);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    root);    	non-compiled	[CE]  not  a  statement	21	None	replace
322	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	24	None	replace
323	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverse(externs);  [CE]  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverse(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  	13	None	replace
324	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs);  [CE]  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs);  [BUGGY]    compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  	13	None	replace
